00:00:00,162 --> 00:00:02,974
SPEAKER_1:  Can you imagine possible features?

00:00:04,386 --> 00:00:06,846
SPEAKER_1:  that Python 4.0 might have.

00:00:07,170 --> 00:00:07,838
SPEAKER_1:  that would.

00:00:09,026 --> 00:00:10,718
SPEAKER_1:  necessitate the creation.

00:00:10,978 --> 00:00:12,574
SPEAKER_1:  of the new 4.0.

00:00:13,218 --> 00:00:14,398
SPEAKER_1:  given the amount of

00:00:15,234 --> 00:00:16,670
SPEAKER_1:  Pain and Joy.

00:00:17,122 --> 00:00:20,894
SPEAKER_1:  suffering and triumph that was involved in the move between.

00:00:21,474 --> 00:00:22,942
SPEAKER_1:  Version 2 and version 3.

00:00:25,474 --> 00:00:27,742
SPEAKER_1:  Following is a conversation with Guido Van Rossum.

00:00:28,130 --> 00:00:29,790
SPEAKER_1:  his second time on this podcast.

00:00:30,018 --> 00:00:30,910
SPEAKER_1:  He is the creator.

00:00:31,234 --> 00:00:32,798
SPEAKER_1:  the Python programming language.

00:00:33,026 --> 00:00:34,590
SPEAKER_1:  and it's Python's.

00:00:34,850 --> 00:00:36,158
SPEAKER_1:  and Merida's BDFO.

00:00:36,610 --> 00:00:38,462
SPEAKER_1:  benevolent dictator for life.

00:00:39,138 --> 00:00:41,726
SPEAKER_1:  This is the Lex Friedman podcast to support it.

00:00:41,954 --> 00:00:44,030
SPEAKER_1:  Please check out our sponsors in the description.

00:00:44,386 --> 00:00:44,862
SPEAKER_1:  And now...

00:00:45,154 --> 00:00:45,822
SPEAKER_1:  difference.

00:00:46,146 --> 00:00:47,550
SPEAKER_1:  Que es guido, buen raso.

00:00:48,674 --> 00:00:51,838
SPEAKER_1:  Python 3.11 is coming out very soon.

00:00:52,514 --> 00:00:53,918
SPEAKER_1:  In it, see Python.

00:00:54,210 --> 00:00:57,310
SPEAKER_1:  claimed to be 10 to 60% faster.

00:00:57,826 --> 00:00:58,718
SPEAKER_1:  How'd you pull that off?

00:00:59,362 --> 00:01:00,414
SPEAKER_1:  And let's see Python.

00:01:00,610 --> 00:01:10,078
SPEAKER_0:  CPython is the last Python implementation standing, also the first one that was ever created. The original Python implementation that I started over 30 years ago.

00:01:10,306 --> 00:01:14,334
SPEAKER_1:  So what does it mean that Python, the programming language is implemented?

00:01:14,626 --> 00:01:16,766
SPEAKER_1:  in another programming language called C.

00:01:16,930 --> 00:01:19,230
SPEAKER_0:  What kind of audience do you have in mind here?

00:01:19,810 --> 00:01:21,278
SPEAKER_0:  People who know programming?

00:01:21,378 --> 00:01:25,534
SPEAKER_1:  No, there's somebody on a boat that's into fishing and I've never heard about programming.

00:01:25,858 --> 00:01:30,974
SPEAKER_1:  but also some world-class programmers. You're gonna have to speak to both. Imagine a boat with two people.

00:01:31,426 --> 00:01:34,398
SPEAKER_1:  One of them has not heard about programming is really into fishing.

00:01:34,850 --> 00:01:36,254
SPEAKER_1:  And the other one is.

00:01:36,770 --> 00:01:41,118
SPEAKER_1:  like an incredible Silicon Valley programmer that's programmed in everything.

00:01:41,538 --> 00:01:43,390
SPEAKER_1:  C, C++, Python.

00:01:43,906 --> 00:01:48,030
SPEAKER_1:  Rust, Java, it knows the entire history of programming languages, so you're going to have to speak.

00:01:49,186 --> 00:01:55,561
SPEAKER_0:  I imagine that boat in the middle of the ocean. I'm going to please the guy who knows how to fish first. Yes, please.

00:01:55,561 --> 00:01:56,286
SPEAKER_1:  It is.

00:01:56,514 --> 00:02:00,222
SPEAKER_1:  He seems like the most useful in the middle of the ocean.

00:02:00,578 --> 00:02:11,678
SPEAKER_0:  You gotta make him mad. I'm sure he has a cell phone, so he's probably very suspicious about what goes on in that cell phone, but he must have heard that inside a cell phone is a tiny computer.

00:02:12,226 --> 00:02:17,054
SPEAKER_0:  And a programming language is computer code that tells the computer what to do.

00:02:17,474 --> 00:02:18,430
SPEAKER_1:  very low level.

00:02:19,170 --> 00:02:19,870
SPEAKER_1:  language.

00:02:20,418 --> 00:02:23,198
SPEAKER_1:  It's zeros and ones and then there's assembly.

00:02:23,650 --> 00:02:24,775
SPEAKER_1:  And then... OHHHH, YET

00:02:24,775 --> 00:02:30,558
SPEAKER_0:  Yeah, we don't talk about these really low levels because those just confuse people.

00:02:31,138 --> 00:02:35,870
SPEAKER_0:  When we're talking about human language, we're not usually talking about vocal tracts and...

00:02:36,098 --> 00:02:39,326
SPEAKER_0:  how you position your tongue. I was talking yesterday about how

00:02:39,682 --> 00:02:41,534
SPEAKER_0:  when you have a Chinese person.

00:02:42,082 --> 00:02:45,374
SPEAKER_0:  and they speak English. This is a bit of aâ€¦

00:02:45,858 --> 00:02:47,998
SPEAKER_0:  Stereotype they often don't know.

00:02:48,546 --> 00:02:53,118
SPEAKER_0:  They can't seem to make the difference well between an L and an R.

00:02:54,146 --> 00:02:57,854
SPEAKER_0:  And I have a theory about that and I've never checked this with linguists.

00:02:58,882 --> 00:03:05,246
SPEAKER_0:  that it probably has to do with the fact that in Chinese there is not really a difference.

00:03:05,730 --> 00:03:09,022
SPEAKER_0:  And it could be that there are regional variations in.

00:03:09,506 --> 00:03:14,046
SPEAKER_0:  how Chinese native Chinese speakers pronounce that one sound that's

00:03:14,818 --> 00:03:16,190
SPEAKER_0:  Sounds to L to some-

00:03:16,546 --> 00:03:17,854
SPEAKER_0:  like L to some of them.

00:03:18,082 --> 00:03:19,038
SPEAKER_0:  to others.

00:03:19,362 --> 00:03:22,110
SPEAKER_1:  So it's both the sounds you produce.

00:03:22,498 --> 00:03:24,798
SPEAKER_1:  with your mouth throughout the history of your life.

00:03:25,218 --> 00:03:32,670
SPEAKER_1:  and what you're used to listening to. I mean, every language has that. Russian has, the Slavic languages have sounds like the letters.

00:03:33,026 --> 00:03:33,790
SPEAKER_1:  S-s-s-sha-

00:03:34,498 --> 00:03:39,390
SPEAKER_1:  like Americans or English speakers don't seem to know the sound.

00:03:40,258 --> 00:03:40,638
SPEAKER_1:  Zzzz

00:03:40,962 --> 00:03:42,087
SPEAKER_1:  This seemed uncomf-

00:03:42,087 --> 00:03:43,230
SPEAKER_0:  That's

00:03:43,650 --> 00:03:44,382
SPEAKER_0:  Yeah.

00:03:44,610 --> 00:03:47,550
SPEAKER_0:  So yes, OK, so we're not we're not going to.

00:03:47,714 --> 00:03:49,086
SPEAKER_1:  the shapes of tongues.

00:03:49,378 --> 00:03:51,253
SPEAKER_1:  and the sounds that the mouth can make.

00:03:51,253 --> 00:03:55,518
SPEAKER_0:  And similarly we're not going into the ones and zeros or machine language.

00:03:56,290 --> 00:04:00,286
SPEAKER_0:  I would say a programming language is a list of instructions like...

00:04:00,962 --> 00:04:02,206
SPEAKER_0:  A cookbook recipe.

00:04:03,298 --> 00:04:04,254
SPEAKER_0:  that sort of.

00:04:04,578 --> 00:04:06,366
SPEAKER_0:  tells you how to do a certain thing.

00:04:06,946 --> 00:04:08,382
SPEAKER_0:  Like make a sandwich, well...

00:04:09,442 --> 00:04:12,094
SPEAKER_0:  Acquire a loaf of bread, cut it in slices.

00:04:12,866 --> 00:04:16,606
SPEAKER_0:  Take two slices, put mustard on one.

00:04:16,930 --> 00:04:17,630
SPEAKER_0:  Duh.

00:04:18,082 --> 00:04:19,742
SPEAKER_0:  jelly on the other or something.

00:04:20,290 --> 00:04:22,366
SPEAKER_0:  then add the meat, then add the cheese.

00:04:23,522 --> 00:04:27,838
SPEAKER_0:  I've heard that science teachers can actually do great stuff.

00:04:28,258 --> 00:04:33,438
SPEAKER_0:  with recipes like that and trying to interpret their students' instructions incorrectly.

00:04:33,762 --> 00:04:36,574
SPEAKER_0:  until the students are completely unambiguous about it.

00:04:37,506 --> 00:04:39,582
SPEAKER_1:  with language, see that's the difference between.

00:04:40,290 --> 00:04:42,366
SPEAKER_1:  natural languages and programming languages.

00:04:42,946 --> 00:04:43,422
SPEAKER_1:  I think.

00:04:43,842 --> 00:04:48,862
SPEAKER_1:  ambiguity as a feature, not a bug in human spoken languages.

00:04:49,154 --> 00:04:49,726
SPEAKER_1:  Like, uh...

00:04:50,498 --> 00:04:53,342
SPEAKER_1:  That's the dance of communication between humans.

00:04:54,338 --> 00:04:57,854
SPEAKER_0:  Well, for lawyers, ambiguity certainly is a feature.

00:04:59,010 --> 00:04:59,614
SPEAKER_0:  Uh...

00:05:00,002 --> 00:05:03,486
SPEAKER_0:  for plenty of other cases, the ambiguity.

00:05:03,938 --> 00:05:07,870
SPEAKER_0:  is not much of a feature, but we work around it, of course.

00:05:08,258 --> 00:05:10,462
SPEAKER_0:  What's more important is context.

00:05:11,298 --> 00:05:13,854
SPEAKER_1:  So with context, the precision of the statement.

00:05:14,306 --> 00:05:15,934
SPEAKER_1:  becomes more and more concrete.

00:05:16,898 --> 00:05:18,302
SPEAKER_1:  But, you know, when you say...

00:05:18,530 --> 00:05:20,094
SPEAKER_1:  I love you to a person that...

00:05:20,450 --> 00:05:21,598
SPEAKER_1:  matters a lot to you.

00:05:22,082 --> 00:05:23,294
SPEAKER_1:  The person doesn't

00:05:23,522 --> 00:05:25,982
SPEAKER_1:  to compile that statement and return an error saying

00:05:26,338 --> 00:05:27,422
SPEAKER_1:  Please define love.

00:05:28,290 --> 00:05:32,350
SPEAKER_0:  Right. But I imagine that my wife and my son...

00:05:32,770 --> 00:05:34,238
SPEAKER_0:  interpret it very differently.

00:05:35,554 --> 00:05:37,429
SPEAKER_0:  Yes. That's the same three words.

00:05:37,429 --> 00:05:38,686
SPEAKER_1:  but imprecisely still.

00:05:41,186 --> 00:05:48,007
SPEAKER_0:  Lawyers never have a lot of follow-up questions for you. Nevertheless, the context is already different in that case.

00:05:48,007 --> 00:05:49,566
SPEAKER_1:  Yes, fair enough. So that's...

00:05:50,114 --> 00:05:51,998
SPEAKER_1:  That's a programming language.

00:05:52,226 --> 00:05:53,086
SPEAKER_1:  is uh...

00:05:53,634 --> 00:05:55,486
SPEAKER_1:  ability to unambiguously

00:05:55,874 --> 00:05:56,990
SPEAKER_1:  state a recipe.

00:05:58,114 --> 00:05:59,390
SPEAKER_1:  Actually, let's go back.

00:05:59,842 --> 00:06:00,894
SPEAKER_1:  Let's go to Pepe.

00:06:01,410 --> 00:06:04,638
SPEAKER_1:  You go through and pep ate the style guy for Python code.

00:06:05,154 --> 00:06:08,766
SPEAKER_1:  some ideas of what this language should look like.

00:06:09,474 --> 00:06:11,006
SPEAKER_1:  Feel like, read like.

00:06:11,458 --> 00:06:14,334
SPEAKER_1:  And the big idea there is that code readability counts.

00:06:14,754 --> 00:06:15,582
SPEAKER_1:  What does that mean to you?

00:06:16,066 --> 00:06:17,054
SPEAKER_1:  and how to achieve it.

00:06:17,410 --> 00:06:18,535
SPEAKER_1:  So this recipe should be.

00:06:18,535 --> 00:06:20,830
SPEAKER_0:  Readable. That's a thing between programs.

00:06:22,370 --> 00:06:27,966
SPEAKER_0:  Because on the one hand, we always explain the concept of programming language as...

00:06:28,514 --> 00:06:29,374
SPEAKER_0:  computers

00:06:29,826 --> 00:06:41,342
SPEAKER_0:  need instructions and computers are very dumb and they need very precise instructions because they don't have much context. In fact they have lots of context but their context is very different.

00:06:42,466 --> 00:06:42,910
SPEAKER_0:  But.

00:06:43,202 --> 00:06:44,350
SPEAKER_0:  what we've seen.

00:06:44,706 --> 00:06:50,462
SPEAKER_0:  emerged during the development of software starting in the probably in the late 40s.

00:06:51,554 --> 00:06:52,542
SPEAKER_0:  is that.

00:06:52,962 --> 00:06:56,062
SPEAKER_0:  Software is a very social activity.

00:06:56,578 --> 00:07:02,558
SPEAKER_0:  A software developer is not a mad scientist who sits alone in his lab writing brilliant code.

00:07:03,650 --> 00:07:04,158
SPEAKER_0:  Uh...

00:07:04,642 --> 00:07:07,550
SPEAKER_0:  software is developed by teams of people.

00:07:08,482 --> 00:07:14,398
SPEAKER_0:  Even the mad scientist sitting alone in his lab can type fast enough to produce enough code.

00:07:14,882 --> 00:07:19,134
SPEAKER_0:  so that by the time he's done with his coding, he still remembers what's going on.

00:07:19,650 --> 00:07:21,630
SPEAKER_0:  the first few lines he wrote mean.

00:07:21,890 --> 00:07:24,382
SPEAKER_0:  So even the mad scientist.

00:07:24,898 --> 00:07:28,734
SPEAKER_0:  coding alone in his lab would be sort of wise to.

00:07:29,698 --> 00:07:32,478
SPEAKER_0:  adopt conventions on how to.

00:07:33,090 --> 00:07:33,822
SPEAKER_0:  format.

00:07:34,658 --> 00:07:37,726
SPEAKER_0:  the instructions that he gives to the computer so that

00:07:38,306 --> 00:07:38,974
SPEAKER_0:  The thing is...

00:07:39,234 --> 00:07:43,486
SPEAKER_0:  There is a difference between a cookbook recipe and a computer program.

00:07:44,482 --> 00:07:47,262
SPEAKER_0:  The cookbook recipe, the author of the cookbook.

00:07:47,810 --> 00:07:48,894
SPEAKER_0:  Write it once.

00:07:49,634 --> 00:07:52,798
SPEAKER_0:  and then it's printed in 100,000 copies.

00:07:53,442 --> 00:07:59,486
SPEAKER_0:  And then lots of people in their kitchens try to recreate that recipe, that particular...

00:08:00,482 --> 00:08:01,854
SPEAKER_0:  pie or dish.

00:08:02,338 --> 00:08:03,230
SPEAKER_0:  from the recipe.

00:08:03,938 --> 00:08:04,702
SPEAKER_0:  And so.

00:08:05,602 --> 00:08:06,654
SPEAKER_0:  DARE THE-

00:08:07,810 --> 00:08:11,294
SPEAKER_0:  The goal of the cookbook author is to make it clear.

00:08:12,130 --> 00:08:13,086
SPEAKER_0:  to the human.

00:08:13,538 --> 00:08:15,678
SPEAKER_0:  reader of the recipe, the human.

00:08:15,938 --> 00:08:16,574
SPEAKER_0:  Amateur.

00:08:16,930 --> 00:08:18,590
SPEAKER_0:  chef in most cases.

00:08:19,810 --> 00:08:21,502
SPEAKER_0:  when you're writing.

00:08:22,114 --> 00:08:26,142
SPEAKER_0:  a computer program, you have two audiences at once.

00:08:27,330 --> 00:08:28,350
SPEAKER_0:  It needs to.

00:08:29,378 --> 00:08:30,878
SPEAKER_0:  Tell the computer what to do.

00:08:32,610 --> 00:08:32,990
SPEAKER_0:  but.

00:08:33,442 --> 00:08:39,486
SPEAKER_0:  It also is useful if that program is readable by other programmers.

00:08:40,162 --> 00:08:43,902
SPEAKER_0:  because computer software, unlike the typical recipe for...

00:08:44,418 --> 00:08:45,438
SPEAKER_0:  a cherry pie.

00:08:45,890 --> 00:08:47,390
SPEAKER_0:  is so complex.

00:08:48,994 --> 00:08:52,190
SPEAKER_0:  that you don't get all of it right at once.

00:08:52,898 --> 00:08:55,518
SPEAKER_0:  you end up with the activity of debugging.

00:08:56,066 --> 00:08:59,550
SPEAKER_0:  and you end up with the activity of. So debugging is.

00:09:02,210 --> 00:09:05,886
SPEAKER_0:  trying to figure out why your code doesn't run the way you thought it should run.

00:09:06,626 --> 00:09:10,142
SPEAKER_1:  That means broadly, it could be stupid little errors or it could be big.

00:09:10,370 --> 00:09:20,126
SPEAKER_0:  logical errors, spiritual. It could be anything from a typo to a wrong choice of algorithm to

00:09:21,058 --> 00:09:22,974
SPEAKER_0:  building something that does what

00:09:23,426 --> 00:09:25,534
SPEAKER_0:  You tell it to do, but that's not useful.

00:09:26,978 --> 00:09:30,206
SPEAKER_1:  It seems to work really well 99% of the time.

00:09:31,330 --> 00:09:34,654
SPEAKER_1:  does weird things 1% of the time on some edge cases.

00:09:35,234 --> 00:09:38,759
SPEAKER_1:  That's pretty much all software nowadays. All good software.

00:09:38,759 --> 00:09:41,759
SPEAKER_0:  Well, yeah, for bad software.

00:09:41,759 --> 00:09:43,742
SPEAKER_1:  That 99 goes down a lot.

00:09:44,034 --> 00:09:49,854
SPEAKER_1:  So, but it's not just about the complexity of the program. It's like you said, it is a social endeavor.

00:09:50,722 --> 00:09:51,486
SPEAKER_1:  in that.

00:09:51,810 --> 00:09:54,435
SPEAKER_1:  You're constantly improving that recipe for the cherry.

00:09:54,435 --> 00:09:54,814
SPEAKER_0:  Bye.

00:09:55,426 --> 00:09:58,270
SPEAKER_0:  but you're sort of, you're in a group of people.

00:09:58,754 --> 00:10:00,222
SPEAKER_0:  improving that recipe.

00:10:00,834 --> 00:10:02,366
SPEAKER_0:  or the mad scientist.

00:10:02,754 --> 00:10:06,238
SPEAKER_0:  is improving the recipe that he created a year ago.

00:10:06,690 --> 00:10:07,774
SPEAKER_0:  and making it better.

00:10:08,802 --> 00:10:09,694
SPEAKER_0:  or adding.

00:10:10,018 --> 00:10:12,798
SPEAKER_0:  adding something he decides that he wants to.

00:10:13,346 --> 00:10:16,734
SPEAKER_0:  I don't know, he wants some decoration on his pie or icing or...

00:10:17,954 --> 00:10:22,078
SPEAKER_1:  So there's broad philosophical things in their specific advice on style.

00:10:22,786 --> 00:10:25,982
SPEAKER_1:  So first of all, the thing that people first experience when they look up Python.

00:10:27,330 --> 00:10:29,406
SPEAKER_1:  There is a, it is very readable.

00:10:30,210 --> 00:10:33,342
SPEAKER_1:  but there's also like a spatial structure to it.

00:10:34,274 --> 00:10:37,950
SPEAKER_1:  Can you explain the indentation style of Python and what is the

00:10:38,306 --> 00:10:39,262
SPEAKER_1:  magic to it.

00:10:39,490 --> 00:10:43,678
SPEAKER_0:  Spaces are important for readability of any kind of text.

00:10:44,418 --> 00:10:46,846
SPEAKER_0:  if you take a cookbook recipe.

00:10:47,682 --> 00:10:50,334
SPEAKER_0:  and you remove all the sort of...

00:10:52,066 --> 00:10:54,878
SPEAKER_0:  all the bullets and other markup.

00:10:55,810 --> 00:11:01,246
SPEAKER_0:  and you just crunch all the text together. Maybe you leave the spaces between the words, but that's all you leave.

00:11:03,138 --> 00:11:04,254
SPEAKER_0:  when you're in the kitchen.

00:11:04,642 --> 00:11:08,606
SPEAKER_0:  trying to figure out what are the ingredients and what are the steps.

00:11:09,538 --> 00:11:12,254
SPEAKER_0:  And where does this step end and the next step begin?

00:11:12,834 --> 00:11:16,670
SPEAKER_0:  You're going to have a hard time if it's just one solid block of text.

00:11:17,634 --> 00:11:23,102
SPEAKER_0:  On the other hand, what a typical cookbook does if the paper is not too expensive.

00:11:24,002 --> 00:11:28,190
SPEAKER_0:  Each recipe starts on its own page. Maybe there's a picture next to it.

00:11:28,706 --> 00:11:31,038
SPEAKER_0:  The list of ingredients comes first.

00:11:31,938 --> 00:11:34,270
SPEAKER_0:  uh... there's a standard notation

00:11:34,690 --> 00:11:38,206
SPEAKER_0:  there's shortcuts so that you don't have to...

00:11:38,818 --> 00:11:39,326
SPEAKER_0:  Sort of.

00:11:39,970 --> 00:11:46,750
SPEAKER_0:  write two sentences on how you have to cut the onion because there are only three ways that people ever cut onions in the kitchen.

00:11:47,042 --> 00:11:49,054
SPEAKER_0:  small, medium, and in slices.

00:11:49,538 --> 00:11:50,462
SPEAKER_0:  or something like that.

00:11:51,586 --> 00:11:54,782
SPEAKER_0:  Right. None of my examples make any sense to real cooks of-

00:11:55,874 --> 00:12:01,054
SPEAKER_1:  We're talking to programmers with the metaphor of cooking. I love it.

00:12:01,314 --> 00:12:05,758
SPEAKER_1:  Um, but there is a strictness to the spacing that Python defines.

00:12:06,146 --> 00:12:07,102
SPEAKER_1:  So there's some.

00:12:08,386 --> 00:12:11,966
SPEAKER_1:  looser things some stricter things but the four spaces for the

00:12:12,738 --> 00:12:14,782
SPEAKER_1:  for the indentation is really interesting.

00:12:15,298 --> 00:12:16,254
SPEAKER_1:  It's really, um,

00:12:16,770 --> 00:12:18,942
SPEAKER_1:  It really defines what language you look some.

00:12:19,042 --> 00:12:19,582
SPEAKER_0:  feels like.

00:12:19,906 --> 00:12:21,918
SPEAKER_0:  because indentation sort of.

00:12:22,498 --> 00:12:26,526
SPEAKER_0:  taking a block of text and then having inside that block of text.

00:12:27,426 --> 00:12:30,334
SPEAKER_0:  A smaller block of text that is indented further.

00:12:31,042 --> 00:12:33,790
SPEAKER_0:  a sort of a group. It's like.

00:12:34,242 --> 00:12:36,286
SPEAKER_0:  You have a bulleted list.

00:12:37,378 --> 00:12:43,454
SPEAKER_0:  in a complex business document and inside some of the bullets are other bulleted lists.

00:12:43,778 --> 00:12:45,246
SPEAKER_0:  You will indent those too.

00:12:46,306 --> 00:12:49,758
SPEAKER_0:  If each bulleted list is indented several inches,

00:12:50,402 --> 00:12:52,286
SPEAKER_0:  then at two levels deep, there's no.

00:12:52,770 --> 00:12:56,126
SPEAKER_0:  No space left on the page to put any of the words of the text.

00:12:56,514 --> 00:13:00,606
SPEAKER_0:  So you can't indent too far. On the other hand, if you don't indent at all,

00:13:01,218 --> 00:13:07,966
SPEAKER_0:  You can't tell whether something is a top level bullet or a second level bullet or a third level bullet. So you have to have.

00:13:08,930 --> 00:13:11,518
SPEAKER_0:  Some compromise and uh...

00:13:11,874 --> 00:13:12,862
SPEAKER_0:  Based on

00:13:13,282 --> 00:13:14,942
SPEAKER_0:  Ancient conventions.

00:13:15,586 --> 00:13:20,222
SPEAKER_0:  and sort of the typical width of a computer screen in the 80s.

00:13:21,090 --> 00:13:23,678
SPEAKER_0:  and all sorts of things sort of.

00:13:25,922 --> 00:13:29,854
SPEAKER_0:  we came up with sort of forced basis as a compromise.

00:13:30,370 --> 00:13:32,030
SPEAKER_0:  I mean, there are groups.

00:13:32,578 --> 00:13:36,830
SPEAKER_0:  There are large groups of people who code with two spaces.

00:13:37,154 --> 00:13:40,446
SPEAKER_0:  indent level, for example the Google Style Guide.

00:13:41,186 --> 00:13:47,422
SPEAKER_0:  All the Google Python code and I think also all the Google C++ code is indented with only two spaces.

00:13:48,514 --> 00:13:49,758
SPEAKER_0:  If you're not used to that.

00:13:50,306 --> 00:13:51,358
SPEAKER_0:  It's harder.

00:13:52,354 --> 00:13:53,598
SPEAKER_0:  At a glance.

00:13:54,594 --> 00:13:58,558
SPEAKER_0:  understand the code because the sort of the high level structure.

00:13:58,882 --> 00:14:00,734
SPEAKER_0:  is determined by the indentation.

00:14:01,218 --> 00:14:08,446
SPEAKER_0:  On the other hand, there are other programming languages where the indentation is eight spaces or a whole tap stop.

00:14:09,026 --> 00:14:10,750
SPEAKER_0:  in sort of classic unix.

00:14:11,298 --> 00:14:15,326
SPEAKER_0:  And to me that looks weird because you sort of after three indent levels you've

00:14:15,714 --> 00:14:16,926
SPEAKER_0:  You've got no room left.

00:14:18,082 --> 00:14:21,662
SPEAKER_1:  Well there are some languages where the indentation is a recommendation.

00:14:22,658 --> 00:14:26,398
SPEAKER_1:  This is a stylistic one. The code compiles even without any indentation.

00:14:27,330 --> 00:14:31,262
SPEAKER_1:  And then Python really indentation is a fundamental part of the language.

00:14:32,994 --> 00:14:36,126
SPEAKER_0:  It doesn't have to be four spaces, so you can...

00:14:36,450 --> 00:14:40,286
SPEAKER_0:  code Python with two spaces per block or for or.

00:14:40,514 --> 00:14:41,886
SPEAKER_0:  six paces or.

00:14:42,210 --> 00:14:44,766
SPEAKER_0:  12 if you really want to go wild but

00:14:46,338 --> 00:14:47,614
SPEAKER_0:  sort of everything.

00:14:48,482 --> 00:14:52,254
SPEAKER_0:  that belongs to the same block needs to be indented the same way.

00:14:53,026 --> 00:14:57,982
SPEAKER_0:  In practice, in most other languages, people recommend doing that anyway. If you look at...

00:14:59,266 --> 00:15:01,726
SPEAKER_0:  C or Rust or C++.

00:15:02,562 --> 00:15:03,806
SPEAKER_0:  all those languages.

00:15:04,162 --> 00:15:04,766
SPEAKER_0:  Jaffa.

00:15:05,410 --> 00:15:07,934
SPEAKER_0:  don't have a requirement of indentation.

00:15:08,898 --> 00:15:11,102
SPEAKER_0:  but except in extreme cases.

00:15:11,938 --> 00:15:13,950
SPEAKER_0:  they're just as anal about.

00:15:14,562 --> 00:15:16,670
SPEAKER_0:  having their code properly indented.

00:15:17,122 --> 00:15:18,942
SPEAKER_1:  So any IDE that

00:15:19,874 --> 00:15:21,502
SPEAKER_1:  the syntax highlighting.

00:15:22,114 --> 00:15:25,310
SPEAKER_1:  that works with Java or C++, they will yell at you.

00:15:25,858 --> 00:15:28,414
SPEAKER_1:  aggressively if you don't do proper indentation.

00:15:28,674 --> 00:15:31,678
SPEAKER_0:  they'd suggest the proper indentation for you.

00:15:32,450 --> 00:15:32,830
SPEAKER_0:  Like.

00:15:33,122 --> 00:15:35,262
SPEAKER_0:  In C, you type...

00:15:35,650 --> 00:15:43,262
SPEAKER_0:  a few words and then you type a curly brace which is their notion of sort of begin an indented block.

00:15:44,450 --> 00:15:53,470
SPEAKER_0:  Then you hit return and then it automatically indents four or eight spaces depending on your style preferences or how your editor is configured.

00:15:53,890 --> 00:15:58,462
SPEAKER_1:  Was there a possible universe in which you considered having braces in Python?

00:15:59,266 --> 00:15:59,966
SPEAKER_0:  Absolutely.

00:16:00,770 --> 00:16:03,326
SPEAKER_1:  What was it 6040, 7030?

00:16:03,746 --> 00:16:05,054
SPEAKER_1:  in your head.

00:16:05,602 --> 00:16:07,102
SPEAKER_1:  What was the trade-off?

00:16:07,234 --> 00:16:08,606
SPEAKER_0:  for a long time.

00:16:08,866 --> 00:16:09,918
SPEAKER_0:  I was actually

00:16:10,274 --> 00:16:13,086
SPEAKER_0:  convinced that the indentation was just

00:16:13,474 --> 00:16:13,822
SPEAKER_0:  better.

00:16:15,490 --> 00:16:15,998
SPEAKER_0:  Uh...

00:16:16,770 --> 00:16:18,430
SPEAKER_0:  without context.

00:16:19,010 --> 00:16:22,014
SPEAKER_0:  I would still claim that indentation is better.

00:16:23,138 --> 00:16:23,742
SPEAKER_0:  Uhhh...

00:16:24,162 --> 00:16:25,726
SPEAKER_0:  It reduces clutter.

00:16:26,050 --> 00:16:26,782
SPEAKER_0:  However...

00:16:27,554 --> 00:16:30,910
SPEAKER_0:  as I started to say earlier, context is almost everything.

00:16:31,874 --> 00:16:34,302
SPEAKER_0:  and in the context of coding.

00:16:35,426 --> 00:16:41,470
SPEAKER_0:  Most programmers are familiar with multiple languages, even if they're only good at one or two.

00:16:42,498 --> 00:16:44,542
SPEAKER_0:  And apart from Python.

00:16:45,058 --> 00:16:48,542
SPEAKER_0:  and maybe Fortron, I don't know how that's written these days anymore but...

00:16:49,154 --> 00:16:53,662
SPEAKER_0:  All the other languages, Java, Rust, C, C++, JavaScript, TypeScript.

00:16:54,306 --> 00:16:54,718
SPEAKER_0:  Pearl.

00:16:55,490 --> 00:16:57,694
SPEAKER_0:  are all using curly braces.

00:16:57,986 --> 00:16:59,166
SPEAKER_0:  uh, to-

00:16:59,458 --> 00:16:59,998
SPEAKER_0:  Sort of.

00:17:00,418 --> 00:17:01,598
SPEAKER_0:  indicate blocks.

00:17:02,210 --> 00:17:04,094
SPEAKER_0:  And so Python is the odd one out.

00:17:04,802 --> 00:17:06,110
SPEAKER_1:  with a radical idea.

00:17:06,658 --> 00:17:07,326
SPEAKER_1:  Do you still?

00:17:07,746 --> 00:17:13,374
SPEAKER_1:  as a radical renegade revolutionary, you still stand behind this idea of space, of uh...

00:17:13,602 --> 00:17:15,262
SPEAKER_1:  indentation versus braces.

00:17:16,034 --> 00:17:18,366
SPEAKER_1:  Like what can you dig into it a little bit more?

00:17:19,202 --> 00:17:22,366
SPEAKER_1:  why you still stand behind indentation.

00:17:22,722 --> 00:17:24,446
SPEAKER_0:  because context is not.

00:17:24,770 --> 00:17:26,750
SPEAKER_0:  The whole story history...

00:17:27,042 --> 00:17:29,854
SPEAKER_0:  in a sense provides more context.

00:17:30,466 --> 00:17:31,326
SPEAKER_0:  for Python.

00:17:32,386 --> 00:17:33,694
SPEAKER_0:  There's no chance.

00:17:34,306 --> 00:17:35,614
SPEAKER_0:  that we can switch.

00:17:36,738 --> 00:17:41,054
SPEAKER_0:  Python is using curly braces for something else, dictionaries mostly.

00:17:42,050 --> 00:17:44,350
SPEAKER_0:  We would get in trouble if we wanted to switch.

00:17:44,738 --> 00:17:45,982
SPEAKER_0:  just like you couldn't.

00:17:46,242 --> 00:17:49,438
SPEAKER_0:  redefine C to use indentation.

00:17:50,018 --> 00:17:50,654
SPEAKER_0:  even

00:17:50,882 --> 00:17:54,270
SPEAKER_0:  if you agree that indentation sort ofâ€¦

00:17:54,978 --> 00:17:57,310
SPEAKER_0:  in a greenfield environment would be better.

00:17:58,018 --> 00:17:59,454
SPEAKER_0:  You can't change-

00:18:00,002 --> 00:18:02,078
SPEAKER_0:  that kind of thing in a language.

00:18:02,850 --> 00:18:08,670
SPEAKER_0:  It's hard enough to reach agreement over much more minor details.

00:18:08,898 --> 00:18:16,094
SPEAKER_0:  I mean in the past in Python we did have a big debate about teps versus spaces and four spaces versus fewer or more.

00:18:17,186 --> 00:18:19,102
SPEAKER_0:  And we sort of came up with.

00:18:19,906 --> 00:18:22,622
SPEAKER_0:  a recommended standard and sort of.

00:18:23,202 --> 00:18:25,374
SPEAKER_0:  options for people who want to be different.

00:18:27,138 --> 00:18:28,030
SPEAKER_0:  But yes.

00:18:28,194 --> 00:18:31,294
SPEAKER_1:  I guess the thought experiment I'd like you to consider.

00:18:31,682 --> 00:18:32,926
SPEAKER_1:  is if you could travel back.

00:18:33,154 --> 00:18:33,854
SPEAKER_1:  through time.

00:18:34,530 --> 00:18:37,470
SPEAKER_1:  when the compatibility is not an issue.

00:18:38,210 --> 00:18:40,126
SPEAKER_1:  and you start a Python all over again.

00:18:40,930 --> 00:18:41,726
SPEAKER_1:  can you make?

00:18:42,210 --> 00:18:42,942
SPEAKER_1:  the case.

00:18:43,202 --> 00:18:43,966
SPEAKER_1:  for a

00:18:44,194 --> 00:18:45,342
SPEAKER_1:  indentations still.

00:18:46,178 --> 00:18:52,158
SPEAKER_0:  Well, it frees up a pair of matched brackets of which there are never enough in the world.

00:18:52,962 --> 00:18:54,558
SPEAKER_0:  for other purposes.

00:18:55,138 --> 00:18:57,886
SPEAKER_0:  really makes the language slightly.

00:18:59,138 --> 00:18:59,742
SPEAKER_0:  Sort of.

00:19:00,674 --> 00:19:02,014
SPEAKER_0:  easier to grasp.

00:19:02,690 --> 00:19:05,022
SPEAKER_0:  for people who don't already know.

00:19:05,954 --> 00:19:07,486
SPEAKER_0:  programming language.

00:19:09,250 --> 00:19:10,238
SPEAKER_0:  Because the sort of-

00:19:10,690 --> 00:19:15,358
SPEAKER_0:  One of the things, and I mostly got this from my mentors who were...

00:19:16,386 --> 00:19:20,094
SPEAKER_0:  taught me programming language design in the earlier 80s.

00:19:20,738 --> 00:19:22,270
SPEAKER_0:  when you're teaching programming.

00:19:24,130 --> 00:19:27,326
SPEAKER_0:  for the total newbie who has not.

00:19:28,962 --> 00:19:31,806
SPEAKER_0:  code it before, not in any other language.

00:19:32,738 --> 00:19:33,214
SPEAKER_0:  Uh.

00:19:33,890 --> 00:19:37,918
SPEAKER_0:  A whole bunch of concepts in programming are very alien.

00:19:38,178 --> 00:19:38,526
SPEAKER_0:  or.

00:19:39,618 --> 00:19:40,222
SPEAKER_0:  Sort of.

00:19:41,122 --> 00:19:49,502
SPEAKER_0:  new and maybe very interesting but also distracting and confusing and there are many different things you have to learn you have to

00:19:50,146 --> 00:19:50,622
SPEAKER_0:  Sative.

00:19:51,810 --> 00:19:52,798
SPEAKER_0:  in a typical.

00:19:53,474 --> 00:19:56,062
SPEAKER_0:  13 week programming course you have to

00:19:56,866 --> 00:19:58,558
SPEAKER_0:  if it's like really.

00:19:59,714 --> 00:20:01,630
SPEAKER_0:  learning to program from scratch.

00:20:02,210 --> 00:20:06,174
SPEAKER_0:  You have to cover algorithms, you have to cover data structures, you have to cover

00:20:06,626 --> 00:20:09,662
SPEAKER_0:  Syntax, you have to cover variables, loops.

00:20:09,890 --> 00:20:10,750
SPEAKER_0:  functions.

00:20:11,074 --> 00:20:12,862
SPEAKER_0:  recursion classes.

00:20:13,954 --> 00:20:16,254
SPEAKER_0:  expressions operators.

00:20:16,674 --> 00:20:19,870
SPEAKER_0:  There are so many concepts if you sort of.

00:20:20,962 --> 00:20:23,262
SPEAKER_0:  if you can spend a little less time.

00:20:24,674 --> 00:20:27,006
SPEAKER_0:  having to worry about the syntax.

00:20:27,714 --> 00:20:29,982
SPEAKER_0:  The classic example was often

00:20:31,874 --> 00:20:40,382
SPEAKER_0:  Oh, the compiler complains every time I put a semicolon in the wrong place or I forget to put a semicolon.

00:20:41,698 --> 00:20:44,702
SPEAKER_0:  Python doesn't have semicolons in that sense.

00:20:45,314 --> 00:20:46,622
SPEAKER_0:  so you can't forget them.

00:20:47,202 --> 00:20:48,350
SPEAKER_0:  and you are also not.

00:20:49,122 --> 00:20:49,790
SPEAKER_0:  Sort of.

00:20:50,402 --> 00:20:53,694
SPEAKER_0:  misled into putting them where they don't belong because

00:20:53,922 --> 00:20:56,030
SPEAKER_0:  you don't learn about them in the first place.

00:20:56,994 --> 00:20:58,110
SPEAKER_1:  the flip side of that is.

00:20:58,786 --> 00:21:02,302
SPEAKER_1:  forcing the strictness onto the beginning programmer.

00:21:02,786 --> 00:21:05,470
SPEAKER_1:  to teach them that programming is a...

00:21:06,434 --> 00:21:08,926
SPEAKER_1:  values attention to details. You don't get to just.

00:21:09,154 --> 00:21:10,279
SPEAKER_1:  write the way you write in English.

00:21:10,279 --> 00:21:14,782
SPEAKER_0:  many of other details that they have to pay attention to. I think they'll...

00:21:15,170 --> 00:21:17,406
SPEAKER_0:  They'll still get the message about...

00:21:18,338 --> 00:21:19,463
SPEAKER_0:  paying attention to detail.

00:21:19,463 --> 00:21:23,294
SPEAKER_1:  The interesting design choice, so I still program quite a bit in PHP.

00:21:24,034 --> 00:21:28,222
SPEAKER_1:  and I'm sure there's other languages like this, but the dollar sign before a variable.

00:21:29,282 --> 00:21:29,694
SPEAKER_1:  That was.

00:21:30,146 --> 00:21:31,486
SPEAKER_1:  Oh, isn't it annoying?

00:21:31,938 --> 00:21:32,670
SPEAKER_1:  thing for me.

00:21:33,090 --> 00:21:34,302
SPEAKER_1:  I didn't quite...

00:21:34,754 --> 00:21:37,502
SPEAKER_1:  fit into my understanding of why this is good for a programmer.

00:21:38,498 --> 00:21:40,606
SPEAKER_1:  I'm not sure if you ever thought about that one.

00:21:41,730 --> 00:21:42,855
SPEAKER_1:  That is a

00:21:42,855 --> 00:21:48,830
SPEAKER_0:  historical thing. There is a whole lineage of programming languages, PHP.

00:21:49,282 --> 00:21:50,110
SPEAKER_0:  is one.

00:21:50,530 --> 00:21:51,614
SPEAKER_0:  Pearl was one.

00:21:52,418 --> 00:21:53,598
SPEAKER_0:  on the Unix Shell.

00:21:54,498 --> 00:21:58,462
SPEAKER_0:  uh... is one of the oldest or or all the different shells

00:21:59,650 --> 00:22:02,750
SPEAKER_0:  The dollar was invented for that purpose.

00:22:03,426 --> 00:22:11,166
SPEAKER_0:  because the very earliest shells had a notion of scripting, but they did not have a notion of parameterizing the scripting.

00:22:12,546 --> 00:22:16,222
SPEAKER_0:  And so a script is just a few lines of text.

00:22:17,058 --> 00:22:19,454
SPEAKER_0:  where each line of text is a command.

00:22:19,746 --> 00:22:20,254
SPEAKER_0:  That is.

00:22:20,802 --> 00:22:24,030
SPEAKER_0:  read by a very primitive command processor that then...

00:22:24,642 --> 00:22:30,814
SPEAKER_0:  sort of takes the first word on the line as the name of a program and passes all the rest.

00:22:31,522 --> 00:22:32,062
SPEAKER_0:  of the

00:22:32,866 --> 00:22:37,278
SPEAKER_0:  line as text into the program for the program to figure out what to do with.

00:22:37,762 --> 00:22:38,878
SPEAKER_0:  as arguments.

00:22:39,650 --> 00:22:45,790
SPEAKER_0:  And so by the time scripting was slightly more mature than the very first script

00:22:46,658 --> 00:22:48,542
SPEAKER_0:  there was a convention that...

00:22:48,930 --> 00:22:50,110
SPEAKER_0:  just like the first.

00:22:50,626 --> 00:22:52,446
SPEAKER_0:  Word of the line is...

00:22:52,962 --> 00:22:54,878
SPEAKER_0:  the name of the program.

00:22:55,202 --> 00:22:56,574
SPEAKER_0:  The following words.

00:22:57,282 --> 00:22:59,358
SPEAKER_0:  could be names of files.

00:23:00,642 --> 00:23:01,790
SPEAKER_0:  input.text.

00:23:02,210 --> 00:23:03,870
SPEAKER_0:  output.html.

00:23:04,386 --> 00:23:05,246
SPEAKER_0:  things like that.

00:23:06,242 --> 00:23:08,286
SPEAKER_0:  The next thing that happens is...

00:23:08,738 --> 00:23:18,558
SPEAKER_0:  Oh, it would actually be really nice if we could have variables and especially parameters for scripts. Values are usually what starts this process.

00:23:20,002 --> 00:23:22,878
SPEAKER_0:  But now you have a problem because you can't just...

00:23:23,778 --> 00:23:26,654
SPEAKER_0:  Say the parameters are x, y, and z.

00:23:27,522 --> 00:23:29,598
SPEAKER_0:  And so now we call.

00:23:29,826 --> 00:23:35,134
SPEAKER_0:  Say, let's say X is the input file and Y is the output file. And let's forget about Z for now.

00:23:35,810 --> 00:23:36,926
SPEAKER_0:  I have my program.

00:23:37,698 --> 00:23:42,846
SPEAKER_0:  and I write program x, y. Well, that already has a meaning because that presumably means...

00:23:43,842 --> 00:23:44,318
SPEAKER_0:  X.

00:23:44,866 --> 00:23:46,238
SPEAKER_0:  itself is the file.

00:23:47,490 --> 00:23:49,918
SPEAKER_0:  It's a file name. It's not a variable name.

00:23:51,842 --> 00:23:53,310
SPEAKER_0:  Uh, and so.

00:23:54,274 --> 00:24:01,662
SPEAKER_0:  the inventors of things like the Unix shell and I'm sure job command language at IBM before that

00:24:02,562 --> 00:24:03,102
SPEAKER_0:  Uh...

00:24:04,226 --> 00:24:05,246
SPEAKER_0:  had to use.

00:24:05,922 --> 00:24:09,566
SPEAKER_0:  Something that made it clear to the script processor.

00:24:11,042 --> 00:24:15,998
SPEAKER_0:  Here is an X that is not actually the name of a file, which you just pass through.

00:24:17,570 --> 00:24:19,070
SPEAKER_0:  to the program you're running.

00:24:19,746 --> 00:24:22,206
SPEAKER_0:  Here is an x that is the name of a variable.

00:24:22,786 --> 00:24:23,518
SPEAKER_0:  And

00:24:24,354 --> 00:24:26,974
SPEAKER_0:  when you're writing a script processor.

00:24:27,650 --> 00:24:29,886
SPEAKER_0:  you try to keep it as simple as possible.

00:24:30,882 --> 00:24:34,334
SPEAKER_0:  because certainly in the 50s and 60s.

00:24:35,170 --> 00:24:35,774
SPEAKER_0:  Uhhh

00:24:36,258 --> 00:24:43,838
SPEAKER_0:  The thing that interprets the script had to be a very small program because it had to fit in a very small part of memory.

00:24:44,482 --> 00:24:45,150
SPEAKER_0:  And so.

00:24:45,538 --> 00:24:46,366
SPEAKER_0:  saying oh.

00:24:47,042 --> 00:24:50,366
SPEAKER_0:  Just look at each character and if you see a dollar sign...

00:24:51,010 --> 00:24:57,086
SPEAKER_0:  You jump to another section of the code and then you gobble up characters, say, until the next space or something.

00:24:57,730 --> 00:24:59,358
SPEAKER_0:  and you say that's the variable name.

00:25:00,546 --> 00:25:02,590
SPEAKER_0:  And so it was sort of.

00:25:03,586 --> 00:25:05,182
SPEAKER_0:  invented as

00:25:06,786 --> 00:25:13,374
SPEAKER_0:  a clever way to make parsing of things that contain both variable and fixed parts.

00:25:14,146 --> 00:25:15,134
SPEAKER_0:  Very easy.

00:25:15,618 --> 00:25:17,534
SPEAKER_0:  in a very simple script processor.

00:25:18,114 --> 00:25:21,598
SPEAKER_0:  it also helps even then it also helps the human

00:25:22,466 --> 00:25:24,926
SPEAKER_0:  author and the human reader of the

00:25:26,146 --> 00:25:26,974
SPEAKER_0:  the script.

00:25:27,970 --> 00:25:29,374
SPEAKER_0:  quickly see O.

00:25:30,338 --> 00:25:39,713
SPEAKER_0:  20 lines down in the script I see a reference to xyz. Oh, it has a dollar in front of it, so now we know that xyz must be one of the parameters of the script.

00:25:39,713 --> 00:25:43,006
SPEAKER_1:  But this is fascinating. Several things to say, which is...

00:25:43,778 --> 00:25:47,518
SPEAKER_1:  the leftovers from the simple script processor languages.

00:25:48,034 --> 00:25:50,366
SPEAKER_1:  are now on code bases like behind Facebook.

00:25:50,786 --> 00:25:55,934
SPEAKER_1:  or behind most of the back end. I think PHP probably still runs almost at the back end of the internet.

00:25:56,258 --> 00:25:59,582
SPEAKER_0:  Oh yeah, I think there's a lot of it in Wikipedia too, for example.

00:26:00,450 --> 00:26:04,478
SPEAKER_1:  It's funny that those decisions are not funny. It's fascinating that those decisions...

00:26:04,962 --> 00:26:06,238
SPEAKER_1:  permeate through time.

00:26:07,170 --> 00:26:08,295
SPEAKER_1:  just like biological.

00:26:08,295 --> 00:26:09,214
SPEAKER_0:  systems, right?

00:26:10,146 --> 00:26:11,550
SPEAKER_0:  I mean, that sort of.

00:26:12,034 --> 00:26:13,886
SPEAKER_0:  the inner workings of DNA.

00:26:14,978 --> 00:26:18,814
SPEAKER_0:  Have been stable for well i don't know how long it was like three hundred.

00:26:19,042 --> 00:26:21,374
SPEAKER_0:  million years, half a billion years.

00:26:22,402 --> 00:26:25,214
SPEAKER_0:  And there are all sorts of weird quirks there.

00:26:26,114 --> 00:26:28,862
SPEAKER_0:  that don't make a lot of sense if you were to design.

00:26:29,442 --> 00:26:32,067
SPEAKER_0:  a system like self-replicating molecules.

00:26:32,067 --> 00:26:32,766
SPEAKER_1:  from scratch.

00:26:33,282 --> 00:26:36,382
SPEAKER_1:  Well, that system has a lot of interesting resilience.

00:26:37,026 --> 00:26:38,622
SPEAKER_1:  as redundancy.

00:26:38,946 --> 00:26:40,286
SPEAKER_1:  that results.

00:26:40,930 --> 00:26:48,990
SPEAKER_1:  Like it messes up in interesting ways that still is resilient when you look at the system level of the organism code doesn't necessarily.

00:26:49,282 --> 00:26:51,998
SPEAKER_1:  have that program, a computer programming code.

00:26:52,674 --> 00:26:54,686
SPEAKER_0:  You'd be surprised.

00:26:55,362 --> 00:26:58,238
SPEAKER_0:  how much resilience modern code has.

00:26:58,882 --> 00:27:02,750
SPEAKER_0:  I mean, if you look at the number of bugs per line of code.

00:27:03,938 --> 00:27:06,718
SPEAKER_0:  Even in, in very well tested.

00:27:08,034 --> 00:27:10,590
SPEAKER_0:  code that in practice works just fine.

00:27:11,650 --> 00:27:15,294
SPEAKER_0:  There are actually lots of things that don't work fine.

00:27:16,162 --> 00:27:16,702
SPEAKER_0:  and

00:27:16,930 --> 00:27:22,110
SPEAKER_0:  There are error correcting or self-correcting mechanisms at many levels.

00:27:22,594 --> 00:27:23,719
SPEAKER_1:  including probably the U.

00:27:23,719 --> 00:27:24,702
SPEAKER_0:  user of the code.

00:27:24,962 --> 00:27:33,054
SPEAKER_0:  Well, in the end, the user who sort of is told, well, you've got to reboot your PC, is part of that system.

00:27:33,698 --> 00:27:36,126
SPEAKER_0:  and a slightly...

00:27:36,674 --> 00:27:40,062
SPEAKER_0:  last drastic thing is reload the page which we all

00:27:40,642 --> 00:27:43,998
SPEAKER_0:  know how to do without thinking about it when...

00:27:44,354 --> 00:27:49,694
SPEAKER_0:  something weird happens. You try to reload a few times before you say, oh, there's something really weird.

00:27:50,178 --> 00:27:53,342
SPEAKER_1:  Or try to click the button again if the first time didn't work.

00:27:53,538 --> 00:28:01,022
SPEAKER_0:  Well, yeah, we should all have learned not to do that, because that's probably just going to turn the light back off.

00:28:01,506 --> 00:28:02,631
SPEAKER_0:  Yeah, true. So do it.

00:28:02,631 --> 00:28:04,958
SPEAKER_1:  three times. That's the right lesson.

00:28:05,250 --> 00:28:06,238
SPEAKER_1:  So, uh...

00:28:07,330 --> 00:28:09,342
SPEAKER_1:  And I wonder how many people actually...

00:28:09,730 --> 00:28:11,646
SPEAKER_1:  like the dollar sign.

00:28:11,970 --> 00:28:13,790
SPEAKER_1:  Like you said, it is documentation.

00:28:14,210 --> 00:28:14,718
SPEAKER_1:  So...

00:28:15,170 --> 00:28:16,158
SPEAKER_1:  To me, it's...

00:28:16,386 --> 00:28:20,190
SPEAKER_1:  whatever the opposite of syntactic sugar is syntactic poison.

00:28:20,834 --> 00:28:21,374
SPEAKER_1:  to me.

00:28:21,634 --> 00:28:26,334
SPEAKER_1:  It is such a pain in the ass that after typing a dollar sign, also super error prone.

00:28:27,170 --> 00:28:29,406
SPEAKER_1:  So it's not self documenting, it's.

00:28:29,730 --> 00:28:31,614
SPEAKER_1:  It's a bug generating thing.

00:28:32,002 --> 00:28:36,862
SPEAKER_1:  It is a kind of documentation that's the pro and the con is it's a source of a lot of bugs.

00:28:37,346 --> 00:28:38,686
SPEAKER_1:  But actually I have to ask you, um...

00:28:39,714 --> 00:28:42,686
SPEAKER_1:  This is a really interesting idea of bugs per line of code.

00:28:43,682 --> 00:28:46,398
SPEAKER_1:  If you look at all the computer systems out there.

00:28:46,626 --> 00:28:47,774
SPEAKER_1:  from the code that runs.

00:28:48,002 --> 00:28:49,150
SPEAKER_1:  nuclear weapons.

00:28:49,698 --> 00:28:50,942
SPEAKER_1:  the code that runs.

00:28:51,266 --> 00:28:53,630
SPEAKER_1:  all the amazing companies that you've been involved with.

00:28:54,050 --> 00:28:55,038
SPEAKER_1:  and not.

00:28:55,554 --> 00:28:59,038
SPEAKER_1:  code that runs Twitter and Facebook and Dropbox and Google and

00:28:59,298 --> 00:29:01,182
SPEAKER_1:  Microsoft Windows and so on.

00:29:02,018 --> 00:29:03,454
SPEAKER_1:  and we like laid out.

00:29:05,474 --> 00:29:07,230
SPEAKER_1:  Wouldn't that be a cool like table?

00:29:07,842 --> 00:29:09,182
SPEAKER_1:  bugs per line of code.

00:29:10,274 --> 00:29:12,894
SPEAKER_1:  What would the- let's put like actual companies aside.

00:29:13,570 --> 00:29:17,374
SPEAKER_1:  Do you think we'd be surprised by the number we see there for all these companies?

00:29:18,498 --> 00:29:20,606
SPEAKER_0:  that depends on whether you've ever...

00:29:21,218 --> 00:29:21,918
SPEAKER_0:  read about.

00:29:22,370 --> 00:29:25,470
SPEAKER_0:  research that's been done in this area before.

00:29:26,402 --> 00:29:26,846
SPEAKER_0:  and

00:29:28,290 --> 00:29:30,910
SPEAKER_0:  I don't know, the last time I...

00:29:31,778 --> 00:29:37,406
SPEAKER_0:  I saw some research like that that was probably in the 90s and the research might have been done in the 80s.

00:29:38,274 --> 00:29:38,718
SPEAKER_0:  But.

00:29:39,426 --> 00:29:41,374
SPEAKER_0:  The conclusion was...

00:29:41,794 --> 00:29:42,590
SPEAKER_0:  across.

00:29:43,170 --> 00:29:45,694
SPEAKER_0:  a wide range of different software.

00:29:46,050 --> 00:29:47,454
SPEAKER_0:  different languages.

00:29:48,194 --> 00:29:50,046
SPEAKER_0:  different companies

00:29:50,594 --> 00:29:52,542
SPEAKER_0:  different development styles.

00:29:53,634 --> 00:29:56,222
SPEAKER_0:  The number of bugs is always...

00:29:56,898 --> 00:30:01,630
SPEAKER_0:  I think it's in the order of about one buck per thousand lines in Sertif.

00:30:02,434 --> 00:30:05,342
SPEAKER_0:  mature software that is considered.

00:30:06,722 --> 00:30:08,254
SPEAKER_0:  Interesting. As good as it gets.

00:30:08,354 --> 00:30:11,358
SPEAKER_1:  Can I give you some facts here? There's a lot of papers.

00:30:11,746 --> 00:30:13,726
SPEAKER_1:  So you said mature software, right?

00:30:14,082 --> 00:30:15,166
SPEAKER_1:  So here's a.

00:30:16,578 --> 00:30:18,110
SPEAKER_1:  a report from a, uh...

00:30:18,690 --> 00:30:20,798
SPEAKER_1:  like programming analytics company.

00:30:21,922 --> 00:30:24,030
SPEAKER_1:  Now this is from a developer perspective.

00:30:24,930 --> 00:30:28,318
SPEAKER_1:  Let me just say what it says because this is very weird and surprising.

00:30:28,770 --> 00:30:33,278
SPEAKER_1:  On average, a developer creates 70 bugs per 1,000 lines of code.

00:30:34,690 --> 00:30:38,558
SPEAKER_1:  15 bugs per 1000 lines of code find their way to the customers.

00:30:40,034 --> 00:30:41,159
SPEAKER_1:  This is in software, they've...

00:30:41,159 --> 00:30:44,670
SPEAKER_0:  No, I was wrong by an order.

00:30:45,026 --> 00:30:48,542
SPEAKER_1:  Fixing a bug takes 30 times longer than writing a line of code.

00:30:49,186 --> 00:30:50,046
SPEAKER_1:  That I can believe.

00:30:51,266 --> 00:30:54,334
SPEAKER_1:  75% of a developer's time is spent on debugging.

00:30:55,234 --> 00:30:59,070
SPEAKER_1:  Um, that's for an average developer that they analyze this 15 argue.

00:30:59,586 --> 00:31:00,382
SPEAKER_0:

00:31:00,642 --> 00:31:02,494
SPEAKER_1:  1500 hours a year.

00:31:02,882 --> 00:31:03,934
SPEAKER_1:  in US alone.

00:31:04,258 --> 00:31:09,502
SPEAKER_1:  $113 billion to spend annually on identifying and fixing bugs.

00:31:10,434 --> 00:31:17,502
SPEAKER_0:  And I imagine this is marketing literature for someone who claims to have a golden bullet or silver bullet that...

00:31:18,082 --> 00:31:26,814
SPEAKER_0:  makes all that investment in fixing bugs go away, but that is usually not going to... Yeah. It's not gonna happen.

00:31:27,074 --> 00:31:28,199
SPEAKER_0:  Well there are...

00:31:28,199 --> 00:31:31,102
SPEAKER_1:  I mean, they're referencing a lot of stuff, of course, but it is a page.

00:31:31,682 --> 00:31:35,774
SPEAKER_1:  that is you know there's a contact us button at the bottom

00:31:36,226 --> 00:31:37,598
SPEAKER_1:  Presumably if you just...

00:31:38,210 --> 00:31:42,302
SPEAKER_1:  spend a little bit less than $100 billion, we're willing to solve the problem for you.

00:31:43,746 --> 00:31:50,078
SPEAKER_1:  Right. And there's also a report on stock exchanges that overflow on the exact same topic. But when I open it up at the moment.

00:31:50,498 --> 00:31:53,310
SPEAKER_1:  The page says, Stack Overflow is currently offline for me.

00:31:54,114 --> 00:31:55,870
SPEAKER_0:  Oh, that is ironic. Yes.

00:31:56,354 --> 00:31:57,479
SPEAKER_0:  uh... by the way they're air-paid

00:31:57,479 --> 00:31:58,686
SPEAKER_1:  is awesome. Anyway.

00:32:00,066 --> 00:32:03,518
SPEAKER_1:  I mean, can you believe that number of bugs? Oh, absolutely.

00:32:04,066 --> 00:32:07,486
SPEAKER_1:  Isn't that scary that 70 bucks per 1000 lines of code?

00:32:07,938 --> 00:32:09,813
SPEAKER_1:  So even 10 bucks for a thousand lines of- Well-

00:32:09,813 --> 00:32:10,430
SPEAKER_0:  That's about...

00:32:10,818 --> 00:32:14,878
SPEAKER_0:  one bug after every 15 lines, and that's when you're first typing it in.

00:32:16,066 --> 00:32:17,191
SPEAKER_0:  Yeah, from a developer, but...

00:32:17,191 --> 00:32:17,726
SPEAKER_1:  but like.

00:32:18,338 --> 00:32:19,902
SPEAKER_1:  how many bugs are gonna be found.

00:32:21,090 --> 00:32:26,206
SPEAKER_0:  if you're typing it in. Well, the development process is extremely iterative.

00:32:27,138 --> 00:32:28,478
SPEAKER_0:  Typically you don't make.

00:32:28,706 --> 00:32:32,350
SPEAKER_0:  A plan for what software you're going to release a year from now.

00:32:33,250 --> 00:32:39,710
SPEAKER_0:  and work out all the details because actually all the details themselves consist.

00:32:40,674 --> 00:32:42,462
SPEAKER_0:  sort of compose a program.

00:32:43,970 --> 00:32:45,022
SPEAKER_0:  And that's that.

00:32:46,114 --> 00:32:48,990
SPEAKER_0:  being a program, all your plans will have bugs in them too.

00:32:49,730 --> 00:32:51,038
SPEAKER_0:  and inaccuracies.

00:32:52,034 --> 00:32:54,718
SPEAKER_0:  But what you actually do is...

00:32:56,834 --> 00:32:59,262
SPEAKER_0:  you do a bunch of typing and I'm actually...

00:32:59,778 --> 00:33:01,918
SPEAKER_0:  really, I'm a really bad typist.

00:33:02,978 --> 00:33:03,486
SPEAKER_0:  That just.

00:33:04,034 --> 00:33:06,110
SPEAKER_0:  I've never learned to type with ten fingers.

00:33:07,042 --> 00:33:08,094
SPEAKER_0:  I need to use.

00:33:08,898 --> 00:33:11,838
SPEAKER_0:  Well, I use all ten of them, but not very well.

00:33:12,706 --> 00:33:19,870
SPEAKER_0:  But I never took a typing class and I never sort of corrected that. So the first time I seriously learned...

00:33:20,450 --> 00:33:22,526
SPEAKER_0:  I had to learn the layout of it.

00:33:22,754 --> 00:33:24,158
SPEAKER_0:  of a QWERTY keyboard.

00:33:24,994 --> 00:33:28,254
SPEAKER_0:  was actually in college in my first programming classes.

00:33:28,898 --> 00:33:30,398
SPEAKER_0:  where we used punch cards.

00:33:31,618 --> 00:33:32,414
SPEAKER_0:  And so...

00:33:33,314 --> 00:33:35,230
SPEAKER_0:  with my two fingers, I sort of...

00:33:35,458 --> 00:33:36,190
SPEAKER_0:  PECT OUT!

00:33:36,962 --> 00:33:37,694
SPEAKER_0:  my code.

00:33:39,010 --> 00:33:40,286
SPEAKER_0:  Watch anyone.

00:33:41,090 --> 00:33:43,070
SPEAKER_0:  give you a little coding demonstration.

00:33:43,970 --> 00:33:45,502
SPEAKER_0:  they'll have to produce like...

00:33:45,890 --> 00:33:47,294
SPEAKER_0:  four lines of code.

00:33:48,514 --> 00:33:52,062
SPEAKER_0:  and now see how many times they use the backspace key.

00:33:53,090 --> 00:33:55,070
SPEAKER_0:  because they made a mistake and

00:33:56,098 --> 00:33:59,550
SPEAKER_0:  And some people, especially when someone else is looking.

00:34:01,890 --> 00:34:06,174
SPEAKER_0:  Will Backspace over 20, 30, 40 characters?

00:34:06,690 --> 00:34:09,246
SPEAKER_0:  to fix a typo earlier in the line. If you're

00:34:10,690 --> 00:34:19,326
SPEAKER_0:  If you're slightly more experienced, of course, you use your arrow buttons to go or your mouse to, but the mouse is usually slower than the arrows.

00:34:20,290 --> 00:34:21,854
SPEAKER_0:  But a lot of people...

00:34:22,466 --> 00:34:23,358
SPEAKER_0:  when they type.

00:34:23,586 --> 00:34:26,718
SPEAKER_0:  A 20-character word, which is not unusual.

00:34:27,138 --> 00:34:32,446
SPEAKER_0:  and they realized they made a mistake at the start of the word. They backspaced over the whole thing.

00:34:33,218 --> 00:34:37,566
SPEAKER_0:  and then retype it. And sometimes it takes three, four times to get it right. So

00:34:38,978 --> 00:34:41,406
SPEAKER_0:  I don't know what your definition of bug is.

00:34:41,762 --> 00:34:42,558
SPEAKER_0:  Arguably.

00:34:42,786 --> 00:34:46,238
SPEAKER_0:  mistyping a word and then correcting it immediately.

00:34:46,722 --> 00:34:48,606
SPEAKER_0:  is not a bug on the other hand you

00:34:48,962 --> 00:34:49,790
SPEAKER_0:  You already.

00:34:50,850 --> 00:34:52,446
SPEAKER_0:  do sort of lose time.

00:34:53,058 --> 00:34:57,118
SPEAKER_0:  And every once in a while, there's sort of a typo that you don't get.

00:34:57,730 --> 00:34:58,910
SPEAKER_0:  in that process.

00:34:59,874 --> 00:35:02,750
SPEAKER_0:  And now you've typed like 10 lines of code.

00:35:03,458 --> 00:35:08,222
SPEAKER_0:  and somewhere in the middle of it you don't know where yet is a typo or

00:35:08,834 --> 00:35:11,262
SPEAKER_0:  maybe a think-o where you forgot that.

00:35:11,842 --> 00:35:14,174
SPEAKER_0:  you had to initialize a variable or something.

00:35:14,658 --> 00:35:18,174
SPEAKER_1:  But those are two different things. And I would say, yes, you have to actually run the code.

00:35:18,434 --> 00:35:19,614
SPEAKER_1:  to discover that typo.

00:35:20,034 --> 00:35:20,350
SPEAKER_1:  but...

00:35:20,898 --> 00:35:23,710
SPEAKER_1:  forgetting to initialize a variable is a fundamentally different

00:35:25,122 --> 00:35:27,198
SPEAKER_1:  because that thing could go undiscovered.

00:35:27,554 --> 00:35:33,662
SPEAKER_0:  that depends on the language in python it will not write in the sort of modern compilers are usually pretty good at

00:35:33,922 --> 00:35:34,942
SPEAKER_0:  catching that even.

00:35:35,746 --> 00:35:36,871
SPEAKER_0:  even for C.

00:35:36,871 --> 00:35:39,838
SPEAKER_1:  for that specific thing, but actually deeper.

00:35:40,770 --> 00:35:43,230
SPEAKER_1:  it might, there might be another variable.

00:35:43,906 --> 00:35:46,526
SPEAKER_1:  that his initialized but logically speaking.

00:35:47,106 --> 00:35:50,494
SPEAKER_1:  The one you meant related. Yup.

00:35:51,074 --> 00:35:54,782
SPEAKER_1:  It's like name the same, but it's a different thing and you forgot to initialize.

00:35:55,298 --> 00:35:57,054
SPEAKER_1:  whatever some counter or some

00:35:57,410 --> 00:35:58,535
SPEAKER_1:  some basic variable there.

00:35:58,535 --> 00:36:00,350
SPEAKER_0:  I can tell that you've coded.

00:36:00,802 --> 00:36:01,374
SPEAKER_1:  Yes.

00:36:01,922 --> 00:36:04,574
SPEAKER_1:  By the way, I should mention that I use a Kinesis keyboard.

00:36:05,314 --> 00:36:07,390
SPEAKER_1:  which has the backspace under the thumb.

00:36:08,034 --> 00:36:09,950
SPEAKER_1:  and one of the biggest reasons.

00:36:10,594 --> 00:36:11,742
SPEAKER_1:  I use that keyboard.

00:36:12,130 --> 00:36:16,702
SPEAKER_1:  is because you realize in order to use the backspace on a usual keyboard.

00:36:17,026 --> 00:36:18,718
SPEAKER_1:  You have to stretch your pinky out.

00:36:19,138 --> 00:36:21,182
SPEAKER_1:  Mm-hmm. I like

00:36:21,858 --> 00:36:26,206
SPEAKER_1:  the foremost normal keyboards the back space is under the pinky

00:36:26,658 --> 00:36:29,022
SPEAKER_1:  And so I don't know if people realize.

00:36:29,442 --> 00:36:30,174
SPEAKER_1:  The pain.

00:36:30,466 --> 00:36:31,838
SPEAKER_1:  they go through in their life.

00:36:32,866 --> 00:36:36,894
SPEAKER_1:  because of the backspace key being so far away. So with the kinesis, it's right under the.

00:36:37,250 --> 00:36:39,070
SPEAKER_1:  so you don't have to actually move your hands.

00:36:39,170 --> 00:36:49,982
SPEAKER_0:  the backspace and the delete. What do you do if you're ever not with your own keyboard and you have to use someone else's PC keyboard that has a standard layout?

00:36:50,498 --> 00:36:51,998
SPEAKER_1:  So first of all, it turns out.

00:36:52,450 --> 00:36:54,014
SPEAKER_1:  that you can actually go your whole life.

00:36:54,370 --> 00:36:55,486
SPEAKER_1:  always having a keyboard.

00:36:56,354 --> 00:36:56,734
SPEAKER_1:  Thank you.

00:36:56,962 --> 00:37:02,961
SPEAKER_0:  So this, well, except for that little tablet that you're using, so we're note taking right now, right? You're going.

00:37:02,961 --> 00:37:06,718
SPEAKER_1:  So it's very inefficient note taking, but I'm not. I'm just looking stuff up.

00:37:07,298 --> 00:37:11,390
SPEAKER_1:  But in most cases I would be actually using the keyboard here.

00:37:12,002 --> 00:37:12,798
SPEAKER_1:  right now.

00:37:13,026 --> 00:37:15,422
SPEAKER_1:  I just don't anticipate, you have to calculate how much.

00:37:15,682 --> 00:37:19,006
SPEAKER_1:  typing do you anticipate? If I anticipate quite a bit then I'll just

00:37:19,426 --> 00:37:20,926
SPEAKER_1:  I have a keyboard. extent, vote with me.

00:37:21,314 --> 00:37:23,006
SPEAKER_1:  And same with the Hameen.

00:37:23,906 --> 00:37:24,958
SPEAKER_1:  The embarrassing...

00:37:25,826 --> 00:37:28,318
SPEAKER_1:  I've accepted being the weirder that I am.

00:37:28,898 --> 00:37:29,278
SPEAKER_1:  What?

00:37:29,826 --> 00:37:30,366
SPEAKER_1:  You know.

00:37:30,626 --> 00:37:34,942
SPEAKER_1:  when I go on an airplane and I anticipate to do programming or a lot of typing.

00:37:35,458 --> 00:37:36,798
SPEAKER_1:  I will have a laptop.

00:37:37,058 --> 00:37:39,422
SPEAKER_1:  I will pull out a Kinesis keyboard.

00:37:39,810 --> 00:37:41,278
SPEAKER_1:  in addition to the laptop.

00:37:41,666 --> 00:37:43,454
SPEAKER_1:  and it's just who I am, you have to...

00:37:43,714 --> 00:37:45,118
SPEAKER_1:  You have to accept who you are.

00:37:45,410 --> 00:37:46,398
SPEAKER_1:  But also

00:37:46,658 --> 00:37:48,734
SPEAKER_1:  It's a, you know, for a lot of people.

00:37:49,410 --> 00:37:51,582
SPEAKER_1:  For me, certainly, there's a comfort space.

00:37:52,162 --> 00:37:56,510
SPEAKER_1:  wait, there's a certain kind of setups that are maximized productivity.

00:37:57,250 --> 00:37:57,790
SPEAKER_1:  and

00:37:58,018 --> 00:37:58,430
SPEAKER_1:  Um...

00:37:59,042 --> 00:38:00,510
SPEAKER_1:  It's like some people have a warm.

00:38:00,802 --> 00:38:01,918
SPEAKER_1:  blanket that they like.

00:38:02,562 --> 00:38:03,902
SPEAKER_1:  when they watch a movie.

00:38:04,226 --> 00:38:06,526
SPEAKER_1:  I like the Kinesis keyboard, it takes me to a...

00:38:07,010 --> 00:38:09,406
SPEAKER_1:  a place of focus and I still mostly.

00:38:09,986 --> 00:38:12,414
SPEAKER_1:  I am trying to make sure I use.

00:38:12,674 --> 00:38:15,134
SPEAKER_1:  the state of the art ID's for everything but.

00:38:15,810 --> 00:38:19,326
SPEAKER_1:  My comfort place, just like the Kinesis keyboard, is still E-Max.

00:38:21,346 --> 00:38:24,254
SPEAKER_1:  So I still use it.

00:38:24,642 --> 00:38:25,694
SPEAKER_1:  I still, I mean...

00:38:25,986 --> 00:38:28,606
SPEAKER_1:  That's some of the debates I have with myself.

00:38:28,962 --> 00:38:31,550
SPEAKER_1:  about everything from a technology perspective.

00:38:32,514 --> 00:38:35,518
SPEAKER_1:  is how much to hold on to the tools you're comfortable with.

00:38:36,162 --> 00:38:37,726
SPEAKER_1:  versus how much to invest.

00:38:38,370 --> 00:38:39,966
SPEAKER_1:  and using modern tools.

00:38:40,322 --> 00:38:42,846
SPEAKER_1:  and the signal that the communities provide you with.

00:38:43,330 --> 00:38:47,998
SPEAKER_1:  Is the noisy one because a lot of people year to year get excited about new tools.

00:38:48,354 --> 00:38:49,630
SPEAKER_1:  and you have to make a prediction.

00:38:50,146 --> 00:38:51,230
SPEAKER_1:  are these tools.

00:38:51,778 --> 00:38:55,262
SPEAKER_1:  defining a new generation of something that will transform programming.

00:38:55,554 --> 00:38:57,502
SPEAKER_1:  Or is this just a fad that will pass?

00:38:58,178 --> 00:39:01,022
SPEAKER_1:  certainly with JavaScript frameworks and.

00:39:01,634 --> 00:39:03,806
SPEAKER_1:  uh... front and back end of the web

00:39:04,194 --> 00:39:06,686
SPEAKER_1:  There's a lot of different styles that came and went.

00:39:07,970 --> 00:39:09,182
SPEAKER_1:  I remember learning...

00:39:09,986 --> 00:39:11,102
SPEAKER_1:  What was it called? What was it called?

00:39:11,458 --> 00:39:12,830
SPEAKER_1:  Remember for flash.

00:39:13,698 --> 00:39:16,158
SPEAKER_1:  um, you know, learning how to program in flash.

00:39:16,770 --> 00:39:21,086
SPEAKER_1:  learning how to design, do graphic animation, all that kind of stuff with Flash.

00:39:21,410 --> 00:39:25,054
SPEAKER_1:  Same with Java applets. I remember creating quite a lot of Java applets.

00:39:25,378 --> 00:39:28,062
SPEAKER_1:  thinking that this potentially defines the future of the web.

00:39:28,578 --> 00:39:29,214
SPEAKER_1:  and did not.

00:39:29,378 --> 00:39:30,302
SPEAKER_0:  Well, you know...

00:39:30,530 --> 00:39:32,222
SPEAKER_0:  In most cases like that.

00:39:32,578 --> 00:39:34,750
SPEAKER_0:  the particular technology.

00:39:35,362 --> 00:39:37,118
SPEAKER_0:  eventually gets replaced.

00:39:38,210 --> 00:39:38,654
SPEAKER_0:  But.

00:39:40,002 --> 00:39:46,942
SPEAKER_0:  many of the concepts that the technology introduced are made accessible first.

00:39:48,354 --> 00:39:49,342
SPEAKER_0:  are preserved.

00:39:50,818 --> 00:39:56,926
SPEAKER_0:  because yeah, we're not using Java applets anymore, but the notion of reactive web pages.

00:39:58,050 --> 00:40:00,734
SPEAKER_0:  that sort of contain little bits of code.

00:40:01,474 --> 00:40:03,742
SPEAKER_0:  that respond directly to

00:40:04,930 --> 00:40:08,766
SPEAKER_0:  Something you do like pressing a button or a link or hovering even.

00:40:09,538 --> 00:40:11,934
SPEAKER_0:  Uh, it has certainly not gone away.

00:40:12,578 --> 00:40:15,166
SPEAKER_0:  and that those animations that were.

00:40:16,066 --> 00:40:17,438
SPEAKER_0:  made painfully.

00:40:18,434 --> 00:40:20,126
SPEAKER_0:  complicated with flash.

00:40:20,930 --> 00:40:21,406
SPEAKER_0:  I mean...

00:40:22,114 --> 00:40:24,670
SPEAKER_0:  Flash was an innovation when it first came up.

00:40:25,410 --> 00:40:29,630
SPEAKER_0:  and when it was replaced by JavaScript equivalents.

00:40:30,146 --> 00:40:30,654
SPEAKER_0:  stuff.

00:40:31,650 --> 00:40:33,758
SPEAKER_0:  It was a somewhat better way.

00:40:34,114 --> 00:40:37,182
SPEAKER_0:  to do animations, but those animations are still there.

00:40:37,730 --> 00:40:38,686
SPEAKER_0:  Not all of them?

00:40:39,426 --> 00:40:40,062
SPEAKER_0:  But, but...

00:40:40,514 --> 00:40:41,054
SPEAKER_0:  Sort of.

00:40:42,082 --> 00:40:46,590
SPEAKER_0:  Again, there is an evolution and often, so often with technology.

00:40:47,522 --> 00:40:52,254
SPEAKER_0:  that the sort of the technology that was eventually thrown away or replaced.

00:40:52,994 --> 00:40:53,822
SPEAKER_0:  was still.

00:40:54,050 --> 00:40:55,358
SPEAKER_0:  essential to.

00:40:55,682 --> 00:40:56,414
SPEAKER_0:  to sort of.

00:40:57,346 --> 00:41:01,150
SPEAKER_0:  get started there wouldn't be jet planes without propeller planes.

00:41:01,890 --> 00:41:02,462
SPEAKER_0:  I betcha.

00:41:03,266 --> 00:41:04,030
SPEAKER_1:  But...

00:41:04,482 --> 00:41:07,326
SPEAKER_1:  From a user perspective, yes. From the feature set, yes.

00:41:07,778 --> 00:41:08,478
SPEAKER_1:  But I...

00:41:08,898 --> 00:41:10,526
SPEAKER_1:  from a programmer perspective.

00:41:11,170 --> 00:41:12,478
SPEAKER_1:  It feels like...

00:41:13,282 --> 00:41:15,038
SPEAKER_1:  all the time I've spent.

00:41:16,098 --> 00:41:17,278
SPEAKER_1:  with ActionScript.

00:41:17,570 --> 00:41:18,750
SPEAKER_1:  all the time I spent with.

00:41:19,170 --> 00:41:24,734
SPEAKER_1:  Java on the applet side for the GUI development. Well, no, Java I have to push back. That was useful.

00:41:25,570 --> 00:41:31,038
SPEAKER_1:  because it transfers, but the flash doesn't transfer. So some things you learn and invest time in.

00:41:31,298 --> 00:41:37,438
SPEAKER_0:  Yeah, what you learned, the skill you picked up learning ActionScript.

00:41:38,498 --> 00:41:40,254
SPEAKER_0:  What sort of it was.

00:41:41,026 --> 00:41:41,822
SPEAKER_0:  Perhaps?

00:41:42,690 --> 00:41:45,854
SPEAKER_0:  a super valuable skill at the time you picked it up.

00:41:46,338 --> 00:41:47,198
SPEAKER_0:  If you.

00:41:47,746 --> 00:41:49,310
SPEAKER_0:  if you learned ActionScript.

00:41:49,730 --> 00:41:50,590
SPEAKER_0:  Early enough?

00:41:52,290 --> 00:41:52,734
SPEAKER_0:  But.

00:41:53,826 --> 00:41:55,678
SPEAKER_0:  That skill is no longer.

00:41:56,610 --> 00:41:57,735
SPEAKER_0:  in demand.

00:41:57,735 --> 00:42:02,462
SPEAKER_1:  That's the calculation you have to make when you're learning new things. Like today people start learning programming.

00:42:02,690 --> 00:42:03,422
SPEAKER_1:  Today I'm...

00:42:03,874 --> 00:42:04,478
SPEAKER_1:  trying to.

00:42:04,834 --> 00:42:06,046
SPEAKER_1:  to see what are the new.

00:42:06,498 --> 00:42:09,726
SPEAKER_1:  languages to try what are the new systems to try that.

00:42:10,274 --> 00:42:13,649
SPEAKER_1:  What are the new ideas to try to keep improving?

00:42:13,649 --> 00:42:16,638
SPEAKER_0:  That's why we start when we're young, right?

00:42:17,410 --> 00:42:19,134
SPEAKER_0:  When were... but...

00:42:19,522 --> 00:42:24,574
SPEAKER_0:  That seems very true to me, that when you're young, you have your whole life ahead of you and you're-

00:42:25,410 --> 00:42:27,998
SPEAKER_0:  you're allowed to make mistakes. In fact,

00:42:28,290 --> 00:42:32,894
SPEAKER_0:  You should feel encouraged to do a bit of stupid stuff.

00:42:33,506 --> 00:42:37,054
SPEAKER_0:  Try not to get yourself killed or seriously maimed, but...

00:42:37,730 --> 00:42:39,070
SPEAKER_0:  Try stuff that's-

00:42:40,002 --> 00:42:43,102
SPEAKER_0:  deviates from what everybody else is doing.

00:42:44,258 --> 00:42:45,374
SPEAKER_0:  and like.

00:42:45,666 --> 00:42:50,270
SPEAKER_0:  Nine out of ten times you'll just learn why everybody else is not doing that.

00:42:50,690 --> 00:42:53,406
SPEAKER_0:  why everybody else is doing it so moderately.

00:42:53,666 --> 00:42:56,254
SPEAKER_0:  And one out of ten times you sort of...

00:42:57,794 --> 00:43:04,766
SPEAKER_0:  You discover something that's better or that somehow works. I mean, there are all sorts of crazy things that were invented.

00:43:05,922 --> 00:43:07,390
SPEAKER_0:  by accident.

00:43:07,874 --> 00:43:08,990
SPEAKER_0:  by people trying.

00:43:09,250 --> 00:43:10,526
SPEAKER_0:  trying stuff together.

00:43:11,266 --> 00:43:13,891
SPEAKER_1:  That's great advice to try random stuff, make a lot of

00:43:13,891 --> 00:43:23,358
SPEAKER_0:  of mistakes.

00:43:23,842 --> 00:43:27,262
SPEAKER_0:  some time where you were experimenting with crazy shit.

00:43:27,778 --> 00:43:28,903
SPEAKER_0:  I like how I'm marriage-ing.

00:43:28,903 --> 00:43:31,582
SPEAKER_1:  kids solidifies your choice of programming language.

00:43:31,938 --> 00:43:35,710
SPEAKER_1:  How does that, the Robert Frost poem with the road less taken.

00:43:36,290 --> 00:43:42,046
SPEAKER_1:  which I think is misinterpreted by most people. But anyway, I feel like the choices you make early on.

00:43:42,946 --> 00:43:44,350
SPEAKER_1:  especially if you go all in.

00:43:44,674 --> 00:43:48,190
SPEAKER_1:  they're gonna define the rest of your life's trajectory in a way that

00:43:49,442 --> 00:43:52,350
SPEAKER_1:  like you basically are picking a camp. So, um.

00:43:53,090 --> 00:43:59,486
SPEAKER_1:  You know, there's if you invest a lot in PHP, if you invest a lot in dot net, if you invest a lot in JavaScript.

00:44:00,674 --> 00:44:01,799
SPEAKER_1:  You're going to s-

00:44:01,799 --> 00:44:02,238
SPEAKER_0:  THICC.

00:44:02,722 --> 00:44:03,390
SPEAKER_1:  There.

00:44:04,546 --> 00:44:06,590
SPEAKER_1:  That's your life journey.

00:44:07,074 --> 00:44:10,558
SPEAKER_0:  It's very hard to tell. Only as far as depth.

00:44:11,074 --> 00:44:13,694
SPEAKER_0:  technology remains relevant.

00:44:13,954 --> 00:44:17,374
SPEAKER_0:  Yes, yes. I mean, if at age 16...

00:44:18,082 --> 00:44:19,678
SPEAKER_0:  You'll learn coding in C.

00:44:20,642 --> 00:44:21,150
SPEAKER_0:  and

00:44:21,826 --> 00:44:25,694
SPEAKER_0:  By the time you're 26, C is like a dead language.

00:44:28,450 --> 00:44:28,990
SPEAKER_0:  then...

00:44:29,538 --> 00:44:31,006
SPEAKER_0:  there's still time to switch.

00:44:31,842 --> 00:44:38,782
SPEAKER_0:  There's probably some kind of survivor bias or whatever it's called in sort of your observation that

00:44:39,266 --> 00:44:41,758
SPEAKER_0:  that you pick a camp because there are many...

00:44:42,338 --> 00:44:45,118
SPEAKER_0:  different camps to pick and if you picked.NET

00:44:45,922 --> 00:44:46,430
SPEAKER_0:  then...

00:44:47,714 --> 00:44:54,238
SPEAKER_0:  then you can coast for the rest of your life because that technology is now so ubiquitous, of course, that it's

00:44:54,658 --> 00:44:55,550
SPEAKER_0:  even if it's

00:44:55,906 --> 00:44:58,526
SPEAKER_0:  If it's bound to die, it's going to take a very long time.

00:44:59,618 --> 00:45:00,638
SPEAKER_1:  For me personally.

00:45:01,922 --> 00:45:03,230
SPEAKER_1:  I had a very...

00:45:03,554 --> 00:45:05,214
SPEAKER_1:  difficult and in my own head.

00:45:05,570 --> 00:45:07,230
SPEAKER_1:  brave leap that I had to take.

00:45:07,522 --> 00:45:08,798
SPEAKER_1:  relevant to our discussion.

00:45:09,282 --> 00:45:12,126
SPEAKER_1:  which is most of my life I programmed in C and C++.

00:45:12,962 --> 00:45:13,662
SPEAKER_1:  And so...

00:45:14,114 --> 00:45:14,558
SPEAKER_1:  Uh...

00:45:15,586 --> 00:45:18,046
SPEAKER_1:  having that hammer everything look like a nail.

00:45:18,722 --> 00:45:21,342
SPEAKER_1:  So I would literally even do scripting in C++.

00:45:21,922 --> 00:45:24,446
SPEAKER_1:  Like how great programs that do script like things.

00:45:24,994 --> 00:45:25,982
SPEAKER_1:  and uh

00:45:26,242 --> 00:45:30,590
SPEAKER_1:  when I first came to Google and before then it became already.

00:45:30,882 --> 00:45:33,822
SPEAKER_1:  Before TensorFlow, before all of that, there was a growing...

00:45:34,242 --> 00:45:38,142
SPEAKER_1:  Realization that C++ is not the right tool for machine learning.

00:45:38,530 --> 00:45:42,014
SPEAKER_1:  We could talk about why that is. It's unclear why that is. A lot of things.

00:45:42,978 --> 00:45:43,742
SPEAKER_1:  has to do with...

00:45:44,002 --> 00:45:47,166
SPEAKER_1:  community and culture and how it emerges and stuff like that, but

00:45:47,906 --> 00:45:50,174
SPEAKER_1:  For me, they decided to take the leap to Python.

00:45:50,658 --> 00:45:51,454
SPEAKER_1:  like all out.

00:45:51,682 --> 00:45:53,886
SPEAKER_1:  basically switched completely from C++.

00:45:54,114 --> 00:45:55,486
SPEAKER_1:  except for.

00:45:56,354 --> 00:45:59,454
SPEAKER_1:  highly performant robotics applications. was still

00:46:00,482 --> 00:46:03,582
SPEAKER_1:  there's still a culture of C++ in the space of robotics.

00:46:04,482 --> 00:46:05,662
SPEAKER_1:  That was a big leap.

00:46:06,914 --> 00:46:08,158
SPEAKER_1:  Like I had to, you know, like.

00:46:08,642 --> 00:46:10,430
SPEAKER_1:  like people have like existential.

00:46:11,042 --> 00:46:13,086
SPEAKER_1:  crises or midlife crises or whatever.

00:46:13,410 --> 00:46:14,270
SPEAKER_1:  Get to realize.

00:46:14,722 --> 00:46:17,534
SPEAKER_1:  almost like walking away from a person you love.

00:46:18,530 --> 00:46:18,878
SPEAKER_1:  Uh...

00:46:19,330 --> 00:46:22,526
SPEAKER_1:  Because I was sure that C++ would have to be a lifelong companion.

00:46:23,138 --> 00:46:26,046
SPEAKER_1:  For a lot of problems I would want to solve C++ would be there.

00:46:26,274 --> 00:46:27,774
SPEAKER_1:  And it was a question to say, well.

00:46:28,226 --> 00:46:33,598
SPEAKER_1:  That might not be the case, because C++ is still one of the most popular languages in the world, one of the most used.

00:46:33,954 --> 00:46:35,829
SPEAKER_1:  one of the most depended on. It's also.

00:46:35,829 --> 00:46:36,222
SPEAKER_0:  So.

00:46:36,514 --> 00:46:37,726
SPEAKER_0:  still evolving.

00:46:37,986 --> 00:46:39,422
SPEAKER_0:  white a bit I mean.

00:46:40,770 --> 00:46:43,422
SPEAKER_0:  That is not sort of...

00:46:44,098 --> 00:46:45,854
SPEAKER_0:  fossilizing community.

00:46:46,306 --> 00:46:49,406
SPEAKER_0:  Yes, they are doing great innovative work actually.

00:46:49,698 --> 00:46:56,350
SPEAKER_0:  But their innovations are hard to follow if you're not already a hardcore C++ user.

00:46:57,026 --> 00:47:00,670
SPEAKER_1:  This was the thing. It pulls you in. It's a rabbit hole. I was a hardcore.

00:47:00,898 --> 00:47:03,358
SPEAKER_1:  the all meta programming template programming like.

00:47:03,650 --> 00:47:05,534
SPEAKER_1:  I would start using the modern.

00:47:05,858 --> 00:47:07,294
SPEAKER_1:  C++ as it developed.

00:47:07,778 --> 00:47:09,086
SPEAKER_1:  Right, not just the...

00:47:09,474 --> 00:47:15,262
SPEAKER_1:  not just the shared pointer and the garbage collection that makes it easier for you to work with some of the flaws.

00:47:15,650 --> 00:47:19,230
SPEAKER_1:  but the detail like the meta programming, the crazy stuff that's.

00:47:19,490 --> 00:47:20,542
SPEAKER_1:  that's coming out there.

00:47:20,802 --> 00:47:23,198
SPEAKER_1:  But then you have to just empirically look.

00:47:23,458 --> 00:47:24,126
SPEAKER_1:  and step back.

00:47:24,738 --> 00:47:28,542
SPEAKER_1:  and say, what language am I more productive in?

00:47:29,954 --> 00:47:34,014
SPEAKER_1:  Sorry to say, what language do I enjoy my life with more?

00:47:34,946 --> 00:47:40,830
SPEAKER_1:  and readability and able to think through and all that kind of stuff. Those questions are harder to ask.

00:47:41,186 --> 00:47:42,206
SPEAKER_1:  when you already have.

00:47:43,266 --> 00:47:44,062
SPEAKER_1:  A loved one.

00:47:44,354 --> 00:47:45,886
SPEAKER_1:  which in my case was C++.

00:47:46,498 --> 00:47:47,966
SPEAKER_1:  and then there's Python.

00:47:48,482 --> 00:47:55,038
SPEAKER_1:  uh... like that mean was is that the the grass greener than the other side in my just infatuated with a new fad

00:47:55,394 --> 00:47:56,318
SPEAKER_1:  New cool thing.

00:47:56,866 --> 00:48:01,534
SPEAKER_1:  or is this actually going to make my life better? And I think a lot of people face that kind of decision.

00:48:01,922 --> 00:48:03,454
SPEAKER_1:  It was a difficult decision for me.

00:48:04,130 --> 00:48:04,702
SPEAKER_1:  Um...

00:48:05,378 --> 00:48:09,278
SPEAKER_1:  When I made it at this time, it's an obvious switch if you're into machine learning

00:48:09,666 --> 00:48:12,766
SPEAKER_1:  but at that time it wasn't quite yet so obvious.

00:48:13,506 --> 00:48:16,798
SPEAKER_1:  So it was a risk and you know, you have the same kind of stuff with them.

00:48:17,634 --> 00:48:20,062
SPEAKER_1:  I still, because of my connection to WordPress.

00:48:21,026 --> 00:48:24,158
SPEAKER_1:  I still do a lot of back-end programming in PHP.

00:48:25,346 --> 00:48:25,886
SPEAKER_1:  Oh.

00:48:26,722 --> 00:48:32,510
SPEAKER_1:  And the question is, you know, no JS Python. Do you switch to do you switch back into any of those?

00:48:33,346 --> 00:48:35,998
SPEAKER_1:  Programming is it there's the case for no JS for me

00:48:36,354 --> 00:48:36,670
SPEAKER_1:  Well...

00:48:36,898 --> 00:48:40,510
SPEAKER_1:  More and more and more of the front end it runs in JavaScript

00:48:42,018 --> 00:48:44,958
SPEAKER_1:  and fascinating cool stuff is on his JavaScript.

00:48:45,506 --> 00:48:48,062
SPEAKER_1:  Maybe use the same programming language for the back end as well.

00:48:48,898 --> 00:48:52,670
SPEAKER_1:  The case for Python for the back end is, well, you're doing so much.

00:48:52,898 --> 00:48:53,662
SPEAKER_1:  programming.

00:48:54,370 --> 00:48:56,094
SPEAKER_1:  outside of the web in Python.

00:48:56,578 --> 00:48:58,270
SPEAKER_1:  So maybe use Python for the backend.

00:48:58,818 --> 00:49:00,926
SPEAKER_1:  And then the case for PHB, well...

00:49:01,506 --> 00:49:03,294
SPEAKER_1:  Most of the web still runs in PHP.

00:49:04,194 --> 00:49:06,046
SPEAKER_1:  You have a lot of experience with PHP.

00:49:07,170 --> 00:49:09,726
SPEAKER_1:  Why fix something that's not broken?

00:49:10,082 --> 00:49:14,398
SPEAKER_1:  Those are my own personal struggles, but I think they reflect the struggles of a lot of people.

00:49:14,882 --> 00:49:18,078
SPEAKER_1:  with different programming languages different problems are trying to solve

00:49:18,626 --> 00:49:19,422
SPEAKER_1:  That's a weird one.

00:49:19,714 --> 00:49:22,590
SPEAKER_0:  And there's not a single answer, right? Because...

00:49:23,202 --> 00:49:26,462
SPEAKER_0:  depending on how much time you have to learn new stuff.

00:49:27,394 --> 00:49:28,894
SPEAKER_0:  where you are in your life.

00:49:29,762 --> 00:49:34,462
SPEAKER_0:  what you're currently working on who you want to work with what communities you like.

00:49:35,394 --> 00:49:37,214
SPEAKER_0:  There's not one right choice.

00:49:37,826 --> 00:49:39,486
SPEAKER_0:  Maybe if you, if you sort of.

00:49:40,674 --> 00:49:46,942
SPEAKER_0:  If you can look back 20 years, you can say, well, that whole detour through action script was a waste of time.

00:49:47,906 --> 00:49:48,286
SPEAKER_0:  But.

00:49:49,506 --> 00:49:50,590
SPEAKER_0:  Nobody could know that.

00:49:51,746 --> 00:49:54,782
SPEAKER_0:  So you can't beat yourself up over that.

00:49:55,906 --> 00:49:56,510
SPEAKER_0:  Uhhh

00:49:56,770 --> 00:49:59,998
SPEAKER_0:  You just need to accept that not every choice you make.

00:50:00,866 --> 00:50:03,582
SPEAKER_0:  is going to be perfect, maybe sort of.

00:50:04,322 --> 00:50:06,974
SPEAKER_0:  Keep plan B in the back of your mind.

00:50:08,098 --> 00:50:10,878
SPEAKER_0:  But don't don't overthink it.

00:50:11,714 --> 00:50:13,822
SPEAKER_0:  Don't try to sort of don't.

00:50:14,946 --> 00:50:17,406
SPEAKER_0:  Don't create a spreadsheet with like...

00:50:18,370 --> 00:50:20,926
SPEAKER_0:  We're trying to estimate well if I...

00:50:21,410 --> 00:50:23,934
SPEAKER_0:  Learn this language I expect to make.

00:50:24,162 --> 00:50:27,710
SPEAKER_0:  X million dollars in a lifetime and if I learn that language...

00:50:28,162 --> 00:50:31,550
SPEAKER_0:  I expect to make $1 million in a lifetime.

00:50:31,842 --> 00:50:37,150
SPEAKER_0:  and which is higher and which has more risk and where is the chance that

00:50:37,506 --> 00:50:39,454
SPEAKER_0:  It's like picking a stock.

00:50:42,402 --> 00:50:43,134
SPEAKER_0:  Kind of.

00:50:43,458 --> 00:50:45,310
SPEAKER_1:  Kind of, but...

00:50:46,466 --> 00:50:48,478
SPEAKER_1:  I think with stocks you can do.

00:50:49,090 --> 00:50:51,070
SPEAKER_1:  Diversifying your investment is good.

00:50:51,746 --> 00:50:53,310
SPEAKER_1:  with productivity in life.

00:50:54,466 --> 00:50:55,966
SPEAKER_1:  Boy, that spreadsheet.

00:50:56,322 --> 00:50:57,726
SPEAKER_1:  is possible to construct.

00:50:59,170 --> 00:51:05,022
SPEAKER_1:  Like if you actually carefully analyze what your interests in life are, where you think you can maximally...

00:51:05,250 --> 00:51:06,206
SPEAKER_1:  impact the world.

00:51:06,818 --> 00:51:13,630
SPEAKER_1:  There really is better and worse choices for programming language. They're not just about the syntax, but about the community.

00:51:14,114 --> 00:51:16,222
SPEAKER_1:  about where you predict the communities headed.

00:51:16,834 --> 00:51:19,459
SPEAKER_1:  what large systems are programmed in the...

00:51:19,459 --> 00:51:22,878
SPEAKER_0:  But can you create that spreadsheet because that sort of

00:51:23,298 --> 00:51:31,006
SPEAKER_0:  You're mentioning a whole bunch of inputs that go into that spreadsheet where you have to estimate things that are very hard to measure and...

00:51:31,490 --> 00:51:34,398
SPEAKER_0:  even harder. I mean they're hard to measure.

00:51:35,106 --> 00:51:38,334
SPEAKER_0:  retroactively and they're even harder to predict.

00:51:38,882 --> 00:51:40,478
SPEAKER_0:  What is the better community?

00:51:41,250 --> 00:51:41,598
SPEAKER_0:  Well...

00:51:41,954 --> 00:51:43,582
SPEAKER_0:  Better is one of those.

00:51:44,482 --> 00:51:49,357
SPEAKER_0:  incredibly difficult words. What's better for you is not better for someone else.

00:51:49,357 --> 00:51:52,190
SPEAKER_1:  but we're not doing a public speech about what's better. We're doing.

00:51:52,962 --> 00:51:54,558
SPEAKER_1:  personal spiritual journey.

00:51:54,882 --> 00:51:57,150
SPEAKER_1:  I can determine a circle of friends.

00:51:58,434 --> 00:52:03,454
SPEAKER_1:  Circle one and circle two and I can have a bunch of parties with one and a bunch of parties with two.

00:52:03,746 --> 00:52:04,190
SPEAKER_1:  And then.

00:52:04,450 --> 00:52:05,278
SPEAKER_1:  Write down.

00:52:05,570 --> 00:52:08,158
SPEAKER_1:  or to take a mental note of what made me happier.

00:52:08,674 --> 00:52:08,990
SPEAKER_1:  Right?

00:52:09,218 --> 00:52:09,630
SPEAKER_1:  and that.

00:52:09,954 --> 00:52:10,558
SPEAKER_1:  You know, you have.

00:52:11,042 --> 00:52:13,470
SPEAKER_1:  If you're a machine learning person, you want to say, okay.

00:52:13,858 --> 00:52:17,054
SPEAKER_1:  I want to build a large company that does, that is.

00:52:17,314 --> 00:52:18,878
SPEAKER_1:  grounded in machine learning.

00:52:19,138 --> 00:52:23,070
SPEAKER_1:  but also has a sexy interface that has a large impact in the world.

00:52:23,362 --> 00:52:24,702
SPEAKER_1:  What languages do I use?

00:52:25,314 --> 00:52:27,966
SPEAKER_1:  You look at what Facebook is using, you look at what Twitter is using.

00:52:28,450 --> 00:52:29,982
SPEAKER_1:  Then you look at performance.

00:52:30,306 --> 00:52:32,478
SPEAKER_1:  more newer languages like rust.

00:52:32,866 --> 00:52:35,550
SPEAKER_1:  or you look at languages that have taken.

00:52:36,002 --> 00:52:39,038
SPEAKER_1:  that most of the community uses in the machine learning space that's Python.

00:52:39,650 --> 00:52:51,166
SPEAKER_1:  And you can like think through, you can hang out and think through it. And it's always an invest. And the level of activity of the community is also really interesting. Like you said, C++ and Python are super active.

00:52:51,778 --> 00:52:53,886
SPEAKER_1:  in terms of the development of the language itself.

00:52:54,626 --> 00:52:56,798
SPEAKER_0:  But do you think that you can make?

00:52:57,666 --> 00:52:59,358
SPEAKER_0:  Objective choices there?

00:52:59,554 --> 00:53:00,638
SPEAKER_1:  No, no, no.

00:53:00,994 --> 00:53:05,187
SPEAKER_1:  but there's a gut you build up. Like don't you believe in that gut feeling?

00:53:05,187 --> 00:53:15,582
SPEAKER_0:  Everything is very subjective and yes, you most certainly can have a gut feeling and your gut can also be wrong. That's why there are billions of people because they're not all right.

00:53:16,098 --> 00:53:16,670
SPEAKER_0:  I mean...

00:53:17,090 --> 00:53:21,406
SPEAKER_0:  Clearly there are more people living in the Bay Area who have plans to...

00:53:21,986 --> 00:53:24,606
SPEAKER_0:  sort of create a Google sized company.

00:53:25,122 --> 00:53:27,934
SPEAKER_0:  then there's room in the world for Google sized companies.

00:53:28,546 --> 00:53:30,942
SPEAKER_0:  and they're gonna have to duke it out in the market.

00:53:31,490 --> 00:53:32,798
SPEAKER_0:  the space.

00:53:33,186 --> 00:53:33,694
SPEAKER_1:  And there's.

00:53:34,050 --> 00:53:36,734
SPEAKER_1:  many more choices than just the programming language.

00:53:37,186 --> 00:53:39,550
SPEAKER_1:  Speaking of which, let's go back to the boat.

00:53:40,130 --> 00:53:52,798
SPEAKER_1:  with the, with the fisherman who's tuned out long ago, the programmer, let's jump around and go back to see Python that we tried to define as the reference implementation. And one of the big things that's coming out in.

00:53:53,058 --> 00:53:54,183
SPEAKER_1:  3.11.

00:53:54,183 --> 00:53:57,694
SPEAKER_0:  We tend to say 3.11 because it really was like...

00:53:58,210 --> 00:54:04,510
SPEAKER_0:  We went 3.8, 3.9, 3.10, 3.11, and they're planning to go up to 3.99.

00:54:05,122 --> 00:54:05,790
SPEAKER_1:  99

00:54:06,178 --> 00:54:07,230
SPEAKER_1:  What happens after 99?

00:54:07,586 --> 00:54:10,398
SPEAKER_0:  Probably just 3.100 if I make it there.

00:54:11,874 --> 00:54:17,022
SPEAKER_1:  and go all the way to 420. I got it. Forever Python V3. We'll talk about 4, but.

00:54:17,378 --> 00:54:18,142
SPEAKER_1:  More for fun.

00:54:20,258 --> 00:54:20,670
SPEAKER_1:  So.

00:54:20,962 --> 00:54:26,366
SPEAKER_1:  3.11 is coming out. One of the big sexy things in it is it'll be much faster. So how

00:54:27,042 --> 00:54:31,294
SPEAKER_1:  Did you, beyond hiring a great team or working with a great team?

00:54:31,714 --> 00:54:33,566
SPEAKER_1:  Make it faster. What are some ideas?

00:54:34,274 --> 00:54:36,062
SPEAKER_1:  that makes it faster.

00:54:37,250 --> 00:54:38,526
SPEAKER_0:  It has to do with...

00:54:38,882 --> 00:54:42,238
SPEAKER_0:  simplicity of software versus performance.

00:54:43,138 --> 00:54:48,094
SPEAKER_0:  And so even though C is known to be a low level language, which is

00:54:48,866 --> 00:54:50,974
SPEAKER_0:  great for writing sort of.

00:54:51,714 --> 00:54:53,854
SPEAKER_0:  a high-performance language interpreter.

00:54:55,138 --> 00:54:57,310
SPEAKER_0:  When I originally started.

00:54:57,890 --> 00:54:59,390
SPEAKER_0:  Python or CPython.

00:55:00,258 --> 00:55:00,766
SPEAKER_0:  I-

00:55:01,634 --> 00:55:03,166
SPEAKER_0:  didn't expect there would be.

00:55:04,770 --> 00:55:05,278
SPEAKER_0:  Great.

00:55:05,858 --> 00:55:07,934
SPEAKER_0:  success and fame in my future.

00:55:09,122 --> 00:55:10,590
SPEAKER_0:  Uh, so I-

00:55:11,810 --> 00:55:13,342
SPEAKER_0:  I tried to get something.

00:55:13,794 --> 00:55:14,622
SPEAKER_0:  working.

00:55:15,330 --> 00:55:16,286
SPEAKER_0:  and useful.

00:55:18,018 --> 00:55:20,190
SPEAKER_0:  in about three months.

00:55:21,378 --> 00:55:24,062
SPEAKER_0:  And so I sort of, I cut corners.

00:55:25,698 --> 00:55:26,142
SPEAKER_0:  I-

00:55:26,818 --> 00:55:32,062
SPEAKER_0:  borrowed ideas left and right when it comes to language design as well as implementation.

00:55:32,962 --> 00:55:37,630
SPEAKER_0:  I also wrote much of the code as simple as it could be.

00:55:38,690 --> 00:55:39,134
SPEAKER_0:  and

00:55:40,706 --> 00:55:41,822
SPEAKER_0:  They're like.

00:55:42,722 --> 00:55:45,086
SPEAKER_0:  There are many things that you can code.

00:55:45,698 --> 00:55:48,926
SPEAKER_0:  more efficiently by adding more code.

00:55:49,986 --> 00:55:52,414
SPEAKER_0:  It's a bit of a sort of a time space.

00:55:53,314 --> 00:55:54,078
SPEAKER_0:  straight off.

00:55:55,426 --> 00:55:58,206
SPEAKER_0:  where you can compute a certain thing.

00:55:59,106 --> 00:56:01,086
SPEAKER_0:  from a small number of inputs.

00:56:02,178 --> 00:56:05,790
SPEAKER_0:  and every time you get presented with new input.

00:56:06,594 --> 00:56:09,182
SPEAKER_0:  you do the whole computation from the top.

00:56:10,434 --> 00:56:22,238
SPEAKER_0:  That can be simple looking code, it's easy to understand, it's easy to reason about that you can tell quickly that it's correct, at least in the sort of mathematical sense of correct.

00:56:24,130 --> 00:56:24,670
SPEAKER_0:  Uhhh

00:56:24,962 --> 00:56:28,062
SPEAKER_0:  Because it's implemented in C, maybe it performs.

00:56:28,290 --> 00:56:29,470
SPEAKER_0:  relatively well.

00:56:30,786 --> 00:56:32,734
SPEAKER_0:  but over time as-

00:56:32,962 --> 00:56:33,566
SPEAKER_0:  Sort of.

00:56:35,170 --> 00:56:39,582
SPEAKER_0:  as the requirements for that code and the need for performance.

00:56:40,546 --> 00:56:41,342
SPEAKER_0:  Go up.

00:56:42,146 --> 00:56:45,374
SPEAKER_0:  you might be able to rewrite that same algorithm.

00:56:46,178 --> 00:56:46,942
SPEAKER_0:  using

00:56:47,330 --> 00:56:48,350
SPEAKER_0:  More memory.

00:56:48,866 --> 00:56:51,390
SPEAKER_0:  Maybe remember previous results.

00:56:52,066 --> 00:56:55,326
SPEAKER_0:  so you don't have to recompute everything from scratch like the

00:56:55,810 --> 00:56:58,846
SPEAKER_0:  The classic example is computing prime numbers.

00:56:59,426 --> 00:56:59,870
SPEAKER_0:  like

00:57:00,834 --> 00:57:02,302
SPEAKER_0:  is 10 a prime number.

00:57:03,426 --> 00:57:03,870
SPEAKER_0:  Well.

00:57:04,258 --> 00:57:09,214
SPEAKER_0:  You sort of, is it divisible by two? Is it divisible by three? Is it divisible by four?

00:57:09,666 --> 00:57:12,606
SPEAKER_0:  and we go all the way to is a divisible by nine.

00:57:13,602 --> 00:57:18,782
SPEAKER_0:  And it is not well, actually 10 is divisible by two. So there we stop at say 11.

00:57:19,266 --> 00:57:20,510
SPEAKER_0:  is divisible by 10.

00:57:20,770 --> 00:57:25,630
SPEAKER_0:  The answer is 9, is no, 10 times in a row, so now we know 11 is a prime number.

00:57:26,882 --> 00:57:31,806
SPEAKER_0:  On the other hand, if we already know that 2, 3, 5 and 7 are prime numbers.

00:57:32,290 --> 00:57:34,846
SPEAKER_0:  and you know a little bit about the mathematics of...

00:57:35,490 --> 00:57:36,734
SPEAKER_0:  how prime numbers work.

00:57:37,378 --> 00:57:41,566
SPEAKER_0:  You know that if you have a rough estimate for the square root of 11,

00:57:42,242 --> 00:57:45,790
SPEAKER_0:  You don't actually have to check is it divisible by four.

00:57:46,242 --> 00:57:52,638
SPEAKER_0:  or is it divisible by 5? All you have to check in the case of 11 is is it divisible by 2, or is it divisible by 3?

00:57:53,730 --> 00:57:54,846
SPEAKER_0:  Because take 12.

00:57:56,066 --> 00:57:57,790
SPEAKER_0:  If it's divisible by four.

00:57:58,114 --> 00:58:00,478
SPEAKER_0:  Well 12 divided by 4 is 3 so you...

00:58:00,866 --> 00:58:04,702
SPEAKER_0:  you should have come across the question, is it a fizzle by three first?

00:58:05,858 --> 00:58:06,622
SPEAKER_0:  So if you know...

00:58:06,978 --> 00:58:11,326
SPEAKER_0:  basically nothing about prime numbers except the definition maybe you go

00:58:11,970 --> 00:58:13,534
SPEAKER_0:  for X from two.

00:58:14,402 --> 00:58:16,094
SPEAKER_0:  through n-1.

00:58:16,610 --> 00:58:18,462
SPEAKER_0:  is indivisible by x.

00:58:19,362 --> 00:58:22,494
SPEAKER_0:  And then at the end, if you got a...

00:58:22,978 --> 00:58:23,806
SPEAKER_0:  all knows.

00:58:24,162 --> 00:58:26,878
SPEAKER_0:  for every single one of those questions.

00:58:27,490 --> 00:58:31,614
SPEAKER_0:  you know, oh, it must be a prime number. Well, the first thing is you can stop.

00:58:32,098 --> 00:58:34,302
SPEAKER_0:  iterating when you find a yes answer.

00:58:35,106 --> 00:58:39,166
SPEAKER_0:  And the second is you can also stop iterating when you have reached.

00:58:40,162 --> 00:58:41,246
SPEAKER_0:  the square root.

00:58:41,666 --> 00:58:42,334
SPEAKER_0:  of n.

00:58:42,850 --> 00:58:50,526
SPEAKER_0:  Because you know that if it has a divisor larger than the square root, it must also have a divisor smaller than the square root.

00:58:51,650 --> 00:59:01,374
SPEAKER_0:  Then you say, oh, except for two, we don't need to bother with checking for even numbers because all even numbers are divisible by two. So if it's divisible by four.

00:59:02,370 --> 00:59:07,038
SPEAKER_0:  We would already have come across the question, is it divisible by two? And so now you go.

00:59:07,426 --> 00:59:12,638
SPEAKER_0:  Special case, check is it divisible by two, and then you just check three, five, seven, eleven.

00:59:13,538 --> 00:59:21,630
SPEAKER_0:  And so now you've sort of reduced your search space by 50% again by skipping all the even numbers it kept for two.

00:59:22,562 --> 00:59:24,414
SPEAKER_0:  if you think a bit more about it.

00:59:24,962 --> 00:59:25,502
SPEAKER_0:  or you just.

00:59:26,434 --> 00:59:28,766
SPEAKER_0:  read in your book about the history of math.

00:59:29,282 --> 00:59:32,254
SPEAKER_0:  one of the first algorithms ever written down.

00:59:32,994 --> 00:59:34,622
SPEAKER_0:  All you have to do is check.

00:59:34,882 --> 00:59:40,190
SPEAKER_0:  Is it divisible by any of the previous prime numbers that are smaller than the square root?

00:59:41,730 --> 00:59:44,510
SPEAKER_0:  before you get to a better algorithm.

00:59:44,866 --> 00:59:45,374
SPEAKER_0:  that.

00:59:46,786 --> 00:59:47,614
SPEAKER_0:  you have

00:59:48,194 --> 00:59:50,494
SPEAKER_0:  to have several PhDs in.

00:59:50,914 --> 00:59:52,062
SPEAKER_0:  indiscreet math.

00:59:52,578 --> 00:59:53,886
SPEAKER_0:  So that's as much as I know.

00:59:54,274 --> 00:59:59,646
SPEAKER_1:  So of course that same story applies to a lot of other algorithms. String matching is a good example.

01:00:00,194 --> 01:00:04,190
SPEAKER_1:  of how to come up with an innovation algorithm. And sometimes... yep.

01:00:04,738 --> 01:00:08,478
SPEAKER_1:  The more efficient algorithm is not so much more complex than the inefficient one.

01:00:08,834 --> 01:00:09,790
SPEAKER_1:  but that's an art.

01:00:10,018 --> 01:00:10,718
SPEAKER_1:  It is not.

01:00:11,458 --> 01:00:14,078
SPEAKER_1:  always the case in the general cases.

01:00:14,466 --> 01:00:16,126
SPEAKER_1:  the more performant the algorithm.

01:00:16,834 --> 01:00:18,462
SPEAKER_1:  the more complex it's gonna be.

01:00:18,690 --> 01:00:20,318
SPEAKER_1:  There's a kind of trade-off.

01:00:20,738 --> 01:00:24,670
SPEAKER_0:  The simpler algorithms are also the ones that people...

01:00:24,898 --> 01:00:26,046
SPEAKER_0:  Invent first.

01:00:26,818 --> 01:00:29,022
SPEAKER_0:  Because when you're looking for a solution...

01:00:29,826 --> 01:00:32,510
SPEAKER_0:  you look at the simplest way to get there first.

01:00:33,346 --> 01:00:35,262
SPEAKER_0:  And so if there is a simple.

01:00:35,810 --> 01:00:36,574
SPEAKER_0:  Solution.

01:00:37,218 --> 01:00:43,102
SPEAKER_0:  Even if it's not the best solution, not the fastest or the most memory efficient or whatever.

01:00:44,098 --> 01:00:44,574
SPEAKER_0:  Uh...

01:00:45,282 --> 01:00:47,934
SPEAKER_0:  A simple solution and simple is...

01:00:48,386 --> 01:00:56,638
SPEAKER_0:  Fairly subjective, but mathematicians have also thought about what is a good definition for simple in the case of algorithms.

01:00:57,826 --> 01:01:00,734
SPEAKER_0:  But the simpler solutions...

01:01:01,314 --> 01:01:02,206
SPEAKER_0:  tend to be...

01:01:03,074 --> 01:01:04,830
SPEAKER_0:  easier to follow for.

01:01:05,154 --> 01:01:06,558
SPEAKER_0:  other programmers who...

01:01:07,106 --> 01:01:11,934
SPEAKER_0:  haven't made a study of a particular field. And when I started with Python, I...

01:01:12,514 --> 01:01:18,430
SPEAKER_0:  I was a good programmer in general, I knew sort of basic data structures, I knew the C language pretty well.

01:01:19,330 --> 01:01:20,190
SPEAKER_0:  but there were...

01:01:20,450 --> 01:01:22,462
SPEAKER_0:  many areas where I was.

01:01:24,130 --> 01:01:24,798
SPEAKER_0:  Only.

01:01:25,474 --> 01:01:28,350
SPEAKER_0:  somewhat familiar with the state of the art.

01:01:30,178 --> 01:01:31,966
SPEAKER_0:  And so I picked...

01:01:33,122 --> 01:01:41,598
SPEAKER_0:  in many cases, the simplest way I could solve a particular sub problem, because when you're designing and implementing a language, you have to like...

01:01:42,466 --> 01:01:45,118
SPEAKER_0:  You have many hundreds of little problems to solve.

01:01:45,986 --> 01:01:46,494
SPEAKER_0:  and...

01:01:47,010 --> 01:01:49,438
SPEAKER_0:  You have to have solutions for every one of them.

01:01:50,178 --> 01:01:51,198
SPEAKER_0:  before you can.

01:01:51,490 --> 01:01:54,110
SPEAKER_0:  can sort of say, I've invented the programming.

01:01:56,514 --> 01:01:58,270
SPEAKER_1:  First of all, so CPython.

01:01:58,914 --> 01:02:00,510
SPEAKER_1:  What kind of things does it do?

01:02:01,026 --> 01:02:01,982
SPEAKER_1:  It's an interpreter.

01:02:02,466 --> 01:02:06,430
SPEAKER_1:  it takes in this readable language that we talked about that is Python.

01:02:07,042 --> 01:02:08,062
SPEAKER_1:  What is this supposed to do?

01:02:08,162 --> 01:02:12,766
SPEAKER_0:  The interpreter basically, it's sort of a recipe for...

01:02:13,602 --> 01:02:15,390
SPEAKER_0:  understanding recipes.

01:02:16,802 --> 01:02:17,470
SPEAKER_0:  So.

01:02:17,954 --> 01:02:19,838
SPEAKER_0:  instead of a recipe that says

01:02:20,130 --> 01:02:22,462
SPEAKER_0:  Bake me a cake, we have a recipe for...

01:02:23,554 --> 01:02:24,670
SPEAKER_0:  Well, given.

01:02:25,538 --> 01:02:27,486
SPEAKER_0:  the text of a program.

01:02:29,026 --> 01:02:34,046
SPEAKER_0:  how do we run that program and that is sort of the recipe for building a computer.

01:02:34,594 --> 01:02:36,702
SPEAKER_1:  The recipe for the baker and the chef. Yeah

01:02:37,218 --> 01:02:38,046
SPEAKER_1:  What are the-

01:02:38,786 --> 01:02:41,918
SPEAKER_1:  algorithmically tricky things that...

01:02:42,498 --> 01:02:44,126
SPEAKER_1:  happen to be law-hanging fruit.

01:02:44,578 --> 01:02:45,630
SPEAKER_1:  that could be improved on.

01:02:45,954 --> 01:02:48,606
SPEAKER_1:  Maybe throughout the history of Python, but also now.

01:02:48,962 --> 01:02:52,350
SPEAKER_1:  How is it possible that 3.11 in year 2022

01:02:52,738 --> 01:02:55,198
SPEAKER_1:  it's possible to get such a big performance improvement.

01:02:57,090 --> 01:02:58,302
SPEAKER_0:  We focused.

01:03:00,994 --> 01:03:03,038
SPEAKER_0:  on a few areas.

01:03:03,266 --> 01:03:06,654
SPEAKER_0:  where we still felt there was low-hanging fruit.

01:03:07,746 --> 01:03:10,910
SPEAKER_0:  The biggest one is actually the interpreter itself.

01:03:11,714 --> 01:03:16,542
SPEAKER_0:  And this has to do with details of how Python is defined. So.

01:03:17,154 --> 01:03:24,638
SPEAKER_0:  I don't know if the fisherman is going to follow this story. He already jumped off the boat. He's, he's, he's, he's, he's this.

01:03:24,866 --> 01:03:29,502
SPEAKER_0:  I'm bored. Yeah. This is stupid. Is actually even though it's always.

01:03:29,794 --> 01:03:31,806
SPEAKER_0:  called an interpreted language, it's...

01:03:32,066 --> 01:03:37,310
SPEAKER_0:  There's also a compiler in there. It just doesn't compile to machine code. It compiles to...

01:03:38,050 --> 01:03:39,422
SPEAKER_0:  bytecode which is

01:03:40,194 --> 01:03:40,670
SPEAKER_0:  Certificate.

01:03:40,930 --> 01:03:43,230
SPEAKER_0:  code for an imaginary computer.

01:03:43,714 --> 01:03:45,342
SPEAKER_0:  that is called the Python interpreter.

01:03:45,634 --> 01:03:51,057
SPEAKER_1:  So it's compiling code that is more easily digestible by the interpreter or is digestible.

01:03:51,057 --> 01:04:00,702
SPEAKER_0:  It is the code that is digested by the interpreter. That's the compiler. We tweaked very minor bits of the compiler. Almost all the work was done in the interpreter.

01:04:01,826 --> 01:04:02,526
SPEAKER_0:  because

01:04:03,842 --> 01:04:05,182
SPEAKER_0:  when you have a program.

01:04:05,666 --> 01:04:09,694
SPEAKER_0:  You compile it once and then you run the code a whole bunch of times.

01:04:10,498 --> 01:04:14,174
SPEAKER_0:  or maybe there's one function in the code that gets run.

01:04:14,786 --> 01:04:15,806
SPEAKER_0:  many times.

01:04:16,930 --> 01:04:19,806
SPEAKER_0:  Now I know that that sort of people who...

01:04:20,290 --> 01:04:24,318
SPEAKER_0:  who know this field are expecting me to at some point say...

01:04:24,674 --> 01:04:27,550
SPEAKER_0:  We built a just-in-time compiler. Actually, we didn't.

01:04:27,906 --> 01:04:31,454
SPEAKER_0:  We just made the interpreter a little more efficient.

01:04:31,970 --> 01:04:33,758
SPEAKER_1:  What's a just in time comm-

01:04:33,858 --> 01:04:40,158
SPEAKER_0:  That is a thing from the Java world, although it's now applied to almost all.

01:04:40,450 --> 01:04:40,990
SPEAKER_0:  Uh...

01:04:41,410 --> 01:04:44,222
SPEAKER_0:  programming languages, especially interpreted ones.

01:04:44,610 --> 01:04:48,126
SPEAKER_1:  So you see the compile inside Python, not like it just in time.

01:04:48,578 --> 01:04:51,870
SPEAKER_1:  compiler but is a compiler that creates by code that is then

01:04:52,770 --> 01:04:53,886
SPEAKER_1:  fed to the interpreter.

01:04:54,594 --> 01:04:55,742
SPEAKER_1:  and the compiler.

01:04:56,706 --> 01:05:00,894
SPEAKER_1:  Was there something interesting to say about the compiler? It's interesting that you haven't changed that, tweet that at all.

01:05:01,154 --> 01:05:01,758
SPEAKER_1:  or much.

01:05:02,050 --> 01:05:03,454
SPEAKER_0:  We changed some.

01:05:03,906 --> 01:05:05,406
SPEAKER_0:  parts of the bytecode.

01:05:06,242 --> 01:05:07,550
SPEAKER_0:  but not very much.

01:05:08,162 --> 01:05:11,902
SPEAKER_0:  And so we only had to change the parts of the compiler where we...

01:05:12,130 --> 01:05:18,110
SPEAKER_0:  decided that the breakdown of a Python program in bytecode instructions had to be slightly different.

01:05:19,330 --> 01:05:20,382
SPEAKER_0:  But...

01:05:22,018 --> 01:05:24,318
SPEAKER_0:  That didn't gain us.

01:05:24,994 --> 01:05:26,750
SPEAKER_0:  the performance.

01:05:27,170 --> 01:05:30,270
SPEAKER_0:  improvements that performance improvements were.

01:05:30,818 --> 01:05:34,334
SPEAKER_0:  like making the interpreter faster in part by

01:05:35,010 --> 01:05:35,518
SPEAKER_0:  Sort of.

01:05:36,802 --> 01:05:42,046
SPEAKER_0:  removing the fat from some internal data structures used by the interpreter but

01:05:43,234 --> 01:05:44,190
SPEAKER_0:  Uhhh, duck.

01:05:44,642 --> 01:05:48,894
SPEAKER_0:  The key idea is an adaptive specializing interpreter.

01:05:49,858 --> 01:05:51,774
SPEAKER_1:  Let's go. What is adaptive about it?

01:05:52,226 --> 01:05:54,101
SPEAKER_1:  What is specialized about it? Well

01:05:54,101 --> 01:05:59,294
SPEAKER_0:  Let me first talk about the specializing part because the adaptive part is the sort of...

01:06:00,482 --> 01:06:03,134
SPEAKER_0:  the second order effect, but they're both important.

01:06:03,650 --> 01:06:04,734
SPEAKER_0:  So bytecode.

01:06:05,474 --> 01:06:06,782
SPEAKER_0:  is a bunch of

01:06:07,106 --> 01:06:10,238
SPEAKER_0:  machine instructions but it's an imaginary machine

01:06:10,818 --> 01:06:12,734
SPEAKER_0:  But the machine can do things like...

01:06:13,218 --> 01:06:14,142
SPEAKER_0:  Call of function.

01:06:15,010 --> 01:06:16,158
SPEAKER_0:  Add two numbers.

01:06:17,090 --> 01:06:17,886
SPEAKER_0:  print value.

01:06:19,010 --> 01:06:21,406
SPEAKER_0:  Those are sort of typical instructions in Python.

01:06:22,626 --> 01:06:23,166
SPEAKER_0:  Uh...

01:06:23,778 --> 01:06:28,062
SPEAKER_0:  And if we take the example of adding two numbers.

01:06:28,930 --> 01:06:34,846
SPEAKER_0:  Actually in Python the language, there's no such thing as adding two numbers. There's just an...

01:06:35,394 --> 01:06:36,670
SPEAKER_0:  The compiler...

01:06:37,154 --> 01:06:37,694
SPEAKER_0:  Uh...

01:06:37,954 --> 01:06:43,006
SPEAKER_0:  doesn't know that you're adding two numbers. You might as well be adding two strings or two lists.

01:06:43,970 --> 01:06:50,910
SPEAKER_0:  or two instances of some user defined class that happen to implement this operator called

01:06:51,138 --> 01:06:51,614
SPEAKER_0:  add

01:06:52,546 --> 01:06:53,310
SPEAKER_0:  That's a very-

01:06:53,570 --> 01:06:57,182
SPEAKER_0:  interesting and fairly powerful mathematical concept.

01:06:57,698 --> 01:07:01,086
SPEAKER_0:  It's mostly a user interface trick because it means that

01:07:02,722 --> 01:07:04,734
SPEAKER_0:  a certain category of functions.

01:07:05,634 --> 01:07:09,534
SPEAKER_0:  can be written using a single symbol the plus sign.

01:07:10,498 --> 01:07:11,006
SPEAKER_0:  and

01:07:11,362 --> 01:07:16,286
SPEAKER_0:  Sort of a bunch of other functions can be written using another single symbol, the multiply sign.

01:07:17,826 --> 01:07:19,006
SPEAKER_0:  So if we take...

01:07:19,554 --> 01:07:20,894
SPEAKER_0:  Addition the way

01:07:21,474 --> 01:07:26,014
SPEAKER_0:  traditionally in python that add bytecode was executed is.

01:07:28,642 --> 01:07:30,814
SPEAKER_0:  Pointers, pointers, and more pointers.

01:07:31,650 --> 01:07:40,478
SPEAKER_0:  So first we have two objects. An object is basically a pointer to a bunch of memory that contains more pointers. It points all the way down.

01:07:41,090 --> 01:07:44,190
SPEAKER_0:  Well, not quite, but there are a lot of them, so...

01:07:45,154 --> 01:07:47,902
SPEAKER_0:  To simplify a bit, we look up.

01:07:48,322 --> 01:07:49,854
SPEAKER_0:  in one of the objects.

01:07:51,394 --> 01:07:54,910
SPEAKER_0:  What is the type of that object and does that object...

01:07:55,202 --> 01:07:57,726
SPEAKER_0:  type to find an add operation.

01:07:58,786 --> 01:08:01,630
SPEAKER_0:  And so you can imagine that there is a

01:08:02,402 --> 01:08:06,974
SPEAKER_0:  sort of a type integer that knows how to add itself to another integer.

01:08:07,586 --> 01:08:11,230
SPEAKER_0:  and there is a type floating point number that knows how to add itself.

01:08:11,938 --> 01:08:13,310
SPEAKER_0:  to another floating point number.

01:08:14,210 --> 01:08:14,622
SPEAKER_0:  and

01:08:15,874 --> 01:08:17,374
SPEAKER_0:  integers and floating point.

01:08:17,698 --> 01:08:19,902
SPEAKER_0:  numbers are sort of important.

01:08:20,226 --> 01:08:23,774
SPEAKER_0:  I think mostly historically because in the first computers...

01:08:24,898 --> 01:08:25,502
SPEAKER_0:  Uhhh

01:08:25,858 --> 01:08:26,462
SPEAKER_0:  You used-

01:08:26,882 --> 01:08:27,518
SPEAKER_0:  This sort of.

01:08:27,842 --> 01:08:34,526
SPEAKER_0:  The same bit pattern, when interpreted as a floating point number, had a very different value than when interpreted as an integer.

01:08:34,978 --> 01:08:39,486
SPEAKER_1:  Can I ask a dumb question here? Please do. Given the basics of int and float and add.

01:08:40,098 --> 01:08:43,582
SPEAKER_1:  Who carries the knowledge of how to add two integers?

01:08:44,066 --> 01:08:45,246
SPEAKER_1:  Is it the answer, Jerk?

01:08:45,698 --> 01:08:46,823
SPEAKER_1:  It's the type integer.

01:08:46,823 --> 01:08:49,823
SPEAKER_0:  versus it's the type integer and the type flow.

01:08:49,823 --> 01:08:52,510
SPEAKER_1:  What about the operator is the operator?

01:08:53,794 --> 01:08:56,190
SPEAKER_1:  just exist as a platonic form.

01:08:56,514 --> 01:08:57,342
SPEAKER_1:  possessed by...

01:08:57,954 --> 01:08:59,230
SPEAKER_0:  of

01:08:59,618 --> 01:09:01,726
SPEAKER_0:  The operator is more...

01:09:02,114 --> 01:09:02,718
SPEAKER_0:  like

01:09:04,642 --> 01:09:08,606
SPEAKER_0:  It's an index in a list of functions.

01:09:08,994 --> 01:09:11,070
SPEAKER_0:  that the integer type defines.

01:09:12,034 --> 01:09:13,790
SPEAKER_0:  And so the integer type.

01:09:15,682 --> 01:09:27,006
SPEAKER_0:  is really a collection of functions and there is an add function and there's a multiply function and there are like 30 other functions for other operations. There's a power function for example.

01:09:28,034 --> 01:09:28,638
SPEAKER_0:  and

01:09:29,378 --> 01:09:30,846
SPEAKER_0:  You can imagine that...

01:09:31,682 --> 01:09:43,454
SPEAKER_0:  In memory, there is a distinct slot for the add operations. Let's say the add operation is the first operation of a type and the multiply is the second operation of a type.

01:09:44,322 --> 01:09:47,646
SPEAKER_0:  So now we take the integer type and we take the floating point type.

01:09:49,026 --> 01:09:49,502
SPEAKER_0:  Uh...

01:09:49,762 --> 01:09:51,326
SPEAKER_0:  in both cases.

01:09:51,778 --> 01:09:55,774
SPEAKER_0:  The add operation is the first slot and multiplies the second slot.

01:09:56,578 --> 01:09:56,958
SPEAKER_0:  but.

01:09:58,178 --> 01:10:01,982
SPEAKER_0:  Each slot contains a function and the functions are different.

01:10:02,562 --> 01:10:03,294
SPEAKER_0:  because the

01:10:04,706 --> 01:10:06,430
SPEAKER_0:  add to integers function.

01:10:07,042 --> 01:10:11,070
SPEAKER_0:  interprets the bit patterns as integers that add to float.

01:10:12,290 --> 01:10:12,862
SPEAKER_0:  function.

01:10:13,378 --> 01:10:14,206
SPEAKER_0:  interprets the

01:10:14,434 --> 01:10:15,550
SPEAKER_0:  the same bit pattern.

01:10:16,354 --> 01:10:17,022
SPEAKER_0:  as

01:10:17,858 --> 01:10:20,510
SPEAKER_0:  as a floating point number. And then there is the string.

01:10:21,474 --> 01:10:24,606
SPEAKER_0:  data type, which again, interprets the

01:10:25,154 --> 01:10:25,566
SPEAKER_0:  The bit.

01:10:26,082 --> 01:10:27,742
SPEAKER_0:  pattern as a

01:10:28,642 --> 01:10:31,390
SPEAKER_0:  the address of a sequence of characters.

01:10:31,842 --> 01:10:34,142
SPEAKER_0:  There are lots of lies in that story, but that's...

01:10:34,914 --> 01:10:36,766
SPEAKER_0:  That's sort of a basic idea.

01:10:37,122 --> 01:10:37,854
SPEAKER_0:  I can tell.

01:10:38,210 --> 01:10:41,950
SPEAKER_1:  I could tell the fake news and the fabrication going on here at the table.

01:10:42,242 --> 01:10:46,367
SPEAKER_1:  But where's the optimization? Is it on the operator? Is it a different?

01:10:46,367 --> 01:10:49,598
SPEAKER_0:  So the optimization is.

01:10:49,826 --> 01:10:51,774
SPEAKER_0:  the observation that

01:10:53,410 --> 01:10:56,030
SPEAKER_0:  in a particular line of code.

01:10:57,314 --> 01:11:00,254
SPEAKER_0:  So now you write your little Python program.

01:11:01,250 --> 01:11:06,462
SPEAKER_0:  and you write a function and that function sort of takes a bunch of inputs and at some point

01:11:07,074 --> 01:11:09,054
SPEAKER_0:  It adds two of the inputs together.

01:11:10,530 --> 01:11:14,302
SPEAKER_0:  Now I bet you even if you call your function a thousand times

01:11:15,138 --> 01:11:15,518
SPEAKER_0:  that.

01:11:15,938 --> 01:11:20,574
SPEAKER_0:  All those calls are likely all going to be about integers.

01:11:21,186 --> 01:11:23,838
SPEAKER_0:  because maybe your program is all about integers.

01:11:24,290 --> 01:11:25,182
SPEAKER_0:  Or maybe.

01:11:26,594 --> 01:11:30,462
SPEAKER_0:  on that particular line of code where there's that plus operator.

01:11:32,066 --> 01:11:34,622
SPEAKER_0:  every time the program hits that line.

01:11:35,362 --> 01:11:39,806
SPEAKER_0:  The variables a and b that are being added together happen to be strings.

01:11:41,026 --> 01:11:46,494
SPEAKER_0:  And so what we do is instead of having this single byte code that says

01:11:46,818 --> 01:11:51,710
SPEAKER_0:  Here's an add operation and the implementation of add is fully generic. It looks at the...

01:11:52,066 --> 01:11:54,430
SPEAKER_0:  object from the object it looks at the type.

01:11:54,914 --> 01:11:58,622
SPEAKER_0:  then it takes the type and it looks up the function pointer.

01:11:59,042 --> 01:12:00,382
SPEAKER_0:  then it calls the function.

01:12:00,770 --> 01:12:07,230
SPEAKER_0:  Now the function has to look at the other argument and has to double check that the other argument has the right type.

01:12:07,970 --> 01:12:11,486
SPEAKER_0:  And then there's a bunch of error checking before it can actually.

01:12:12,482 --> 01:12:15,998
SPEAKER_0:  just go ahead and add the two bit patterns in the right way.

01:12:16,962 --> 01:12:18,334
SPEAKER_0:  What we do is...

01:12:20,002 --> 01:12:23,870
SPEAKER_0:  every time we execute an add instruction like that.

01:12:25,122 --> 01:12:25,630
SPEAKER_0:  We.

01:12:26,146 --> 01:12:28,190
SPEAKER_0:  We keep a little note of

01:12:29,922 --> 01:12:31,326
SPEAKER_0:  In the end, after-

01:12:32,098 --> 01:12:35,070
SPEAKER_0:  after we hit the code that did the addition.

01:12:35,842 --> 01:12:37,214
SPEAKER_0:  for a particular type.

01:12:37,634 --> 01:12:38,558
SPEAKER_0:  What type was it?

01:12:40,194 --> 01:12:42,942
SPEAKER_0:  and then after a few times...

01:12:43,298 --> 01:12:47,710
SPEAKER_0:  through that code if it's the same type all the time.

01:12:49,314 --> 01:12:49,822
SPEAKER_0:  Uh...

01:12:50,402 --> 01:12:51,134
SPEAKER_0:  We say.

01:12:51,746 --> 01:12:52,190
SPEAKER_0:  Oh.

01:12:52,546 --> 01:12:57,214
SPEAKER_0:  So this add operation, even though it's the generic add operation...

01:12:57,474 --> 01:13:00,446
SPEAKER_0:  It might as well be the add integer operation.

01:13:01,154 --> 01:13:06,462
SPEAKER_0:  And add integer operation is much more efficient because it just says.

01:13:07,330 --> 01:13:10,046
SPEAKER_0:  Assume that a and b are integers.

01:13:10,466 --> 01:13:13,278
SPEAKER_0:  Do the addition operation, do it right there inline.

01:13:13,954 --> 01:13:14,270
SPEAKER_0:  and

01:13:14,690 --> 01:13:15,870
SPEAKER_0:  produce the result.

01:13:17,666 --> 01:13:18,270
SPEAKER_0:  and

01:13:18,690 --> 01:13:21,950
SPEAKER_0:  The big lie here is that in Python, even if...

01:13:22,498 --> 01:13:23,102
SPEAKER_0:  you have.

01:13:23,330 --> 01:13:27,710
SPEAKER_0:  great evidence that in the past it was always two integers that you were adding.

01:13:28,450 --> 01:13:35,518
SPEAKER_0:  At some point in the future, that same line of code could still be hit with two floating points or two strings, or maybe a string and an integer.

01:13:36,034 --> 01:13:38,558
SPEAKER_1:  It's not a great lie, that's just the fact of life.

01:13:39,298 --> 01:13:43,422
SPEAKER_0:  I didn't account for what should happen in that case.

01:13:43,778 --> 01:13:46,069
SPEAKER_0:  in the way I told the story.

01:13:46,069 --> 01:13:47,569
SPEAKER_1:  There is some accounting.

01:13:47,569 --> 01:13:49,086
SPEAKER_0:  And so...

01:13:49,634 --> 01:13:51,902
SPEAKER_0:  What we actually have to do is...

01:13:52,354 --> 01:13:54,718
SPEAKER_0:  when we have the add integer operation.

01:13:55,778 --> 01:13:57,278
SPEAKER_0:  We still have to check.

01:13:58,178 --> 01:14:01,150
SPEAKER_0:  Are the two arguments in fact integers?

01:14:01,666 --> 01:14:02,494
SPEAKER_0:  Weep.

01:14:02,850 --> 01:14:05,630
SPEAKER_0:  applied some tricks to make those checks efficient.

01:14:06,274 --> 01:14:13,822
SPEAKER_0:  And we know statistically that the outcome is almost always, yes, they are both integers.

01:14:14,946 --> 01:14:24,286
SPEAKER_0:  And so we quickly make that check and then we proceed with the sort of add integer operation and then there is a fallback mechanism where we say

01:14:25,186 --> 01:14:26,910
SPEAKER_0:  Oops, one of them wasn't an integer.

01:14:27,906 --> 01:14:32,062
SPEAKER_0:  Now we're going to pretend that it was just the fully generic add operation.

01:14:32,514 --> 01:14:34,270
SPEAKER_0:  We wasted a few cycles.

01:14:34,786 --> 01:14:35,966
SPEAKER_0:  believing it was

01:14:36,546 --> 01:14:40,222
SPEAKER_0:  was going to be two integers, and then we had to back up.

01:14:40,834 --> 01:14:44,670
SPEAKER_0:  But we didn't waste that much time and statistically.

01:14:44,994 --> 01:14:46,014
SPEAKER_0:  most of the time.

01:14:47,138 --> 01:14:48,990
SPEAKER_0:  Basically, we're sort of...

01:14:50,050 --> 01:14:53,118
SPEAKER_0:  hoping that most of the time we guess right, because if we...

01:14:53,666 --> 01:14:55,614
SPEAKER_0:  if it turns out that we guessed wrong.

01:14:56,034 --> 01:14:57,054
SPEAKER_0:  too often.

01:14:57,922 --> 01:15:00,062
SPEAKER_0:  or we didn't have a good guess at all.

01:15:00,418 --> 01:15:00,894
SPEAKER_0:  Uh...

01:15:01,346 --> 01:15:03,966
SPEAKER_0:  things might actually end up running a little slower.

01:15:04,962 --> 01:15:06,494
SPEAKER_0:  So someone with.

01:15:06,722 --> 01:15:08,126
SPEAKER_0:  Armed with this knowledge.

01:15:08,834 --> 01:15:14,622
SPEAKER_0:  and a copy of the implementation. Someone could easily construct a counter example where they say,

01:15:15,010 --> 01:15:21,214
SPEAKER_0:  Oh, I have a program and now it runs five times as slow in Python 3.11 than it did in Python 3.10.

01:15:22,370 --> 01:15:25,630
SPEAKER_0:  But that's a very unrealistic program. That's just like...

01:15:26,146 --> 01:15:28,158
SPEAKER_0:  an extreme fluke.

01:15:29,250 --> 01:15:30,375
SPEAKER_0:  It's a fun reverse engine.

01:15:30,375 --> 01:15:31,294
SPEAKER_1:  engineering task though.

01:15:31,618 --> 01:15:34,462
SPEAKER_1:  Oh yeah. So there's a.

01:15:35,042 --> 01:15:35,934
SPEAKER_1:  uh... people

01:15:36,354 --> 01:15:37,534
SPEAKER_1:  Like fun, yes.

01:15:38,114 --> 01:15:39,102
SPEAKER_1:  So there's some...

01:15:39,778 --> 01:15:41,342
SPEAKER_1:  Presumably heuristic.

01:15:42,146 --> 01:15:43,838
SPEAKER_1:  of what defines a momentum.

01:15:44,642 --> 01:15:50,206
SPEAKER_1:  of saying you know you seem to be working adding two integers not two generic types.

01:15:50,722 --> 01:15:51,358
SPEAKER_1:  So

01:15:51,842 --> 01:15:53,598
SPEAKER_1:  How do you figure out that heuristic?

01:15:54,242 --> 01:15:56,702
SPEAKER_0:  I think that the heuristic is actually...

01:15:57,282 --> 01:16:01,086
SPEAKER_0:  we assume that the weather tomorrow is going to be the same as the weather today.

01:16:01,378 --> 01:16:02,942
SPEAKER_1:  So you don't need two days of the weather?

01:16:03,682 --> 01:16:04,318
SPEAKER_1:  I've got the

01:16:04,994 --> 01:16:07,134
SPEAKER_0:  That is already so much better than...

01:16:07,714 --> 01:16:11,089
SPEAKER_0:  than than guessing randomly that. So how do you

01:16:11,089 --> 01:16:12,830
SPEAKER_1:  find this idea.

01:16:13,986 --> 01:16:17,438
SPEAKER_1:  Hey, I wonder if instead of adding to generic...

01:16:17,794 --> 01:16:18,334
SPEAKER_1:  types.

01:16:18,978 --> 01:16:23,710
SPEAKER_1:  we start assuming that the weather tomorrow is the same as the weather today

01:16:24,546 --> 01:16:26,654
SPEAKER_1:  Where do you find the idea for that?

01:16:27,138 --> 01:16:28,574
SPEAKER_1:  because that ultimately...

01:16:29,474 --> 01:16:34,206
SPEAKER_1:  For you to do that, you have to kind of understand how people are using the language, right?

01:16:34,754 --> 01:16:37,854
SPEAKER_0:  Python is not the first language to do a thing like this.

01:16:38,274 --> 01:16:41,278
SPEAKER_0:  This is a fairly well known trick, especially from...

01:16:42,338 --> 01:16:46,526
SPEAKER_0:  other interpreted languages that had reason to be sped up.

01:16:47,170 --> 01:16:52,030
SPEAKER_0:  We occasionally look at papers about HHVM, which is for Facebook's...

01:16:54,210 --> 01:16:56,958
SPEAKER_0:  efficient compiler for PHP.

01:16:57,570 --> 01:17:00,606
SPEAKER_0:  There are tweaks known from the JVM and...

01:17:01,666 --> 01:17:03,774
SPEAKER_0:  Sometimes it just comes from academia.

01:17:04,034 --> 01:17:06,654
SPEAKER_1:  So the trick here is that the type itself doesn't

01:17:07,074 --> 01:17:08,990
SPEAKER_1:  The variable doesn't know what type it is.

01:17:10,274 --> 01:17:12,926
SPEAKER_1:  So this is not a statically typed language where you can.

01:17:13,666 --> 01:17:17,662
SPEAKER_1:  You can get support to have a shortcut to saying it's in.

01:17:17,922 --> 01:17:21,598
SPEAKER_0:  This is a trick that is especially important for...

01:17:21,922 --> 01:17:25,310
SPEAKER_0:  for interpreted languages with dynamic typing because

01:17:26,242 --> 01:17:26,590
SPEAKER_0:  If.

01:17:27,618 --> 01:17:30,174
SPEAKER_0:  If the compiler could read in the source.

01:17:31,202 --> 01:17:38,238
SPEAKER_0:  these x and y that we're adding are integers, the compiler can just insert a single add machine code.

01:17:39,394 --> 01:17:41,790
SPEAKER_0:  hardware machine instruction that exists.

01:17:42,722 --> 01:17:43,838
SPEAKER_0:  on every CPU.

01:17:44,290 --> 01:17:46,366
SPEAKER_0:  Uh, and ditto for floats.

01:17:47,298 --> 01:17:49,918
SPEAKER_0:  But because in Python you don't

01:17:50,594 --> 01:17:53,886
SPEAKER_0:  generally declare the types of your variables.

01:17:54,754 --> 01:18:00,222
SPEAKER_0:  don't even declare the existence of your variables. They just spring into existence when you first assign them.

01:18:01,250 --> 01:18:01,662
SPEAKER_0:  which.

01:18:02,338 --> 01:18:07,518
SPEAKER_0:  is really cool and sort of helps those beginners because there is less bookkeeping they have to

01:18:07,906 --> 01:18:10,334
SPEAKER_0:  Learn how to do before they can start.

01:18:10,658 --> 01:18:11,838
SPEAKER_0:  playing around with code.

01:18:12,450 --> 01:18:13,502
SPEAKER_0:  but it makes the...

01:18:13,730 --> 01:18:14,110
SPEAKER_0:  day in.

01:18:14,658 --> 01:18:16,222
SPEAKER_0:  interpretation of the code.

01:18:16,706 --> 01:18:19,102
SPEAKER_0:  less efficient and so we're sort of

01:18:20,546 --> 01:18:21,438
SPEAKER_0:  trying to.

01:18:22,562 --> 01:18:24,190
SPEAKER_0:  to make the interpretation.

01:18:24,706 --> 01:18:29,918
SPEAKER_0:  more efficient without losing the super dynamic nature of the language.

01:18:30,562 --> 01:18:31,742
SPEAKER_0:  That's always the challenge.

01:18:32,034 --> 01:18:32,926
SPEAKER_1:  3.5.

01:18:33,282 --> 01:18:34,078
SPEAKER_1:  Got the pep.

01:18:34,338 --> 01:18:35,902
SPEAKER_1:  type hints.

01:18:36,706 --> 01:18:37,950
SPEAKER_1:  What is type hinting?

01:18:38,274 --> 01:18:38,910
SPEAKER_1:  and

01:18:39,554 --> 01:18:40,702
SPEAKER_1:  Is it used?

01:18:41,090 --> 01:18:42,526
SPEAKER_1:  by the interpreter, the hints.

01:18:42,882 --> 01:18:44,007
SPEAKER_1:  Or is it just syntactic?

01:18:44,007 --> 01:18:48,222
SPEAKER_0:  sugar.

01:18:48,674 --> 01:18:53,214
SPEAKER_0:  that people can use and it's especially popular with sort of.

01:18:53,986 --> 01:18:58,366
SPEAKER_0:  larger companies that have very large code bases written in Python.

01:18:58,754 --> 01:19:02,129
SPEAKER_1:  Do you think of it as almost like documentation saying these two variables are the same?

01:19:02,129 --> 01:19:05,502
SPEAKER_0:  at this time. More than documentation. I mean, so it's

01:19:07,778 --> 01:19:10,430
SPEAKER_0:  It is a sub-language of Python where...

01:19:10,850 --> 01:19:15,678
SPEAKER_0:  where you can express the types of variables. So here is a variable and it's an integer.

01:19:16,226 --> 01:19:22,601
SPEAKER_0:  And here's an argument to this function and it's a string. And here is a function that returns a list of strings.

01:19:22,601 --> 01:19:24,101
SPEAKER_1:  but that's not checked when you run the

01:19:24,101 --> 01:19:24,638
SPEAKER_0:  But

01:19:25,410 --> 01:19:30,718
SPEAKER_0:  Exactly. There is a separate piece of software called a static type checker.

01:19:31,010 --> 01:19:37,246
SPEAKER_0:  that reads all your source code without executing it and thinks long and hard about

01:19:38,530 --> 01:19:43,230
SPEAKER_0:  what it looks from just reading the code that code might be doing.

01:19:44,034 --> 01:19:44,574
SPEAKER_0:  and

01:19:44,866 --> 01:19:45,758
SPEAKER_0:  double checks.

01:19:46,178 --> 01:19:49,182
SPEAKER_0:  if that makes sense if you take the types.

01:19:49,634 --> 01:19:51,454
SPEAKER_0:  as annotated into a count.

01:19:51,650 --> 01:19:54,275
SPEAKER_1:  So this is something you're supposed to run as you develop.

01:19:54,275 --> 01:19:55,230
SPEAKER_0:  It's like a linter.

01:19:55,458 --> 01:20:03,710
SPEAKER_0:  Yeah, that's definitely a development tool, but the type annotations currently are not used for.

01:20:04,098 --> 01:20:06,270
SPEAKER_0:  speeding up the interpreter and

01:20:06,498 --> 01:20:08,734
SPEAKER_0:  There are a number of reasons...

01:20:09,314 --> 01:20:11,070
SPEAKER_0:  Many people don't use them.

01:20:11,842 --> 01:20:13,758
SPEAKER_0:  even when they do use them.

01:20:14,242 --> 01:20:17,118
SPEAKER_0:  They sometimes contain lies.

01:20:17,346 --> 01:20:17,790
SPEAKER_0:  Where?

01:20:18,338 --> 01:20:19,646
SPEAKER_0:  The Static Type Checker.

01:20:20,098 --> 01:20:21,694
SPEAKER_0:  says everything's fine.

01:20:22,722 --> 01:20:28,734
SPEAKER_0:  I cannot prove that this integer is ever not an integer, but at runtime somehow someone

01:20:29,314 --> 01:20:30,302
SPEAKER_0:  manages to.

01:20:30,530 --> 01:20:32,254
SPEAKER_0:  violate that assumption.

01:20:33,058 --> 01:20:34,142
SPEAKER_0:  And the interpreter...

01:20:35,330 --> 01:20:37,182
SPEAKER_0:  ends up doing just fine if we

01:20:37,698 --> 01:20:40,798
SPEAKER_0:  started enforcing type annotations in Python.

01:20:41,538 --> 01:20:44,222
SPEAKER_0:  Many Python programs would no longer work.

01:20:45,218 --> 01:20:49,246
SPEAKER_0:  And some Python programs wouldn't even be possible because they're too dynamic.

01:20:50,178 --> 01:20:52,542
SPEAKER_0:  So we made a choice of not.

01:20:53,058 --> 01:20:57,758
SPEAKER_0:  using the annotations. There is a possible future where eventually

01:20:59,074 --> 01:21:00,286
SPEAKER_0:  3, 4...

01:21:00,898 --> 01:21:01,598
SPEAKER_0:  Five.

01:21:01,954 --> 01:21:06,814
SPEAKER_0:  releases in the future, we could start using those annotations to sort of...

01:21:07,874 --> 01:21:09,054
SPEAKER_0:  provide hints?

01:21:09,442 --> 01:21:12,094
SPEAKER_0:  because we can still say...

01:21:12,706 --> 01:21:13,214
SPEAKER_0:  Well...

01:21:13,730 --> 01:21:22,302
SPEAKER_0:  The source code leads us to believe that these x and y are both integers, and so we can generate an add integer instruction.

01:21:23,330 --> 01:21:26,206
SPEAKER_0:  but we can still have a fallback that says...

01:21:26,882 --> 01:21:29,182
SPEAKER_0:  Oh, if somehow the code.

01:21:29,762 --> 01:21:30,974
SPEAKER_0:  encoded runtime.

01:21:31,618 --> 01:21:35,134
SPEAKER_0:  provided something else maybe it provided two decimal numbers

01:21:36,034 --> 01:21:39,230
SPEAKER_0:  we can still use that generic add operation.

01:21:39,522 --> 01:21:40,286
SPEAKER_0:  as a fallback.

01:21:40,610 --> 01:21:41,502
SPEAKER_0:  But we're not there.

01:21:41,794 --> 01:21:43,326
SPEAKER_1:  Is there currently a mechanism?

01:21:43,810 --> 01:21:45,790
SPEAKER_1:  or do you see something like that?

01:21:46,370 --> 01:21:48,286
SPEAKER_1:  where you can almost add like an assert.

01:21:49,666 --> 01:21:51,582
SPEAKER_1:  inside a function that says

01:21:52,034 --> 01:21:54,270
SPEAKER_1:  Please check that my type hints.

01:21:54,786 --> 01:21:56,702
SPEAKER_1:  are actually mapping to reality.

01:21:57,090 --> 01:21:58,366
SPEAKER_1:  sort of like insert.

01:21:58,722 --> 01:22:00,382
SPEAKER_1:  Manual static typing.

01:22:00,578 --> 01:22:03,646
SPEAKER_0:  There are third party libraries that...

01:22:04,130 --> 01:22:05,255
SPEAKER_0:  are in that business.

01:22:05,255 --> 01:22:10,398
SPEAKER_1:  It's possible to do that kind of thing. It's possible for a third party library to take a hint.

01:22:11,330 --> 01:22:13,205
SPEAKER_1:  and enforce it.

01:22:13,205 --> 01:22:19,422
SPEAKER_0:  Yes, well what we actually do is, and I think this is a fairly unique feature in Python.

01:22:20,130 --> 01:22:21,374
SPEAKER_0:  The type hints.

01:22:22,018 --> 01:22:23,998
SPEAKER_0:  can be introspected at runtime.

01:22:24,898 --> 01:22:27,262
SPEAKER_0:  So while the program is running...

01:22:28,802 --> 01:22:31,806
SPEAKER_0:  They mean Python is a very introspectable language.

01:22:32,290 --> 01:22:36,414
SPEAKER_0:  You can look at the variable and ask yourself, what is the type of this?

01:22:36,866 --> 01:22:40,286
SPEAKER_0:  this variable and if that variable happens to

01:22:40,770 --> 01:22:42,846
SPEAKER_0:  refer to a function, you can ask.

01:22:43,330 --> 01:22:45,086
SPEAKER_0:  What are the arguments to the function?

01:22:45,794 --> 01:22:46,302
SPEAKER_0:  and

01:22:46,594 --> 01:22:50,558
SPEAKER_0:  Nowadays you can also ask what are the type annotations for the function.

01:22:50,946 --> 01:22:54,398
SPEAKER_1:  So the type annotations are there inside the variable local visits.

01:22:54,690 --> 01:22:55,390
SPEAKER_1:  at runtime.

01:22:55,746 --> 01:23:01,502
SPEAKER_0:  They're mostly associated with the function object, not with each individual variable, but...

01:23:01,858 --> 01:23:03,710
SPEAKER_0:  Right. You can sort of map from.

01:23:03,938 --> 01:23:05,813
SPEAKER_0:  from the arguments to the variable.

01:23:05,813 --> 01:23:07,313
SPEAKER_1:  And that's what a third party li-

01:23:07,313 --> 01:23:12,862
SPEAKER_0:  Exactly. And the problem with that is that all that extra runtime type checking...

01:23:13,730 --> 01:23:14,206
SPEAKER_0:  Uh...

01:23:14,466 --> 01:23:17,438
SPEAKER_0:  is going to slow your code down instead of speed it up.

01:23:17,698 --> 01:23:19,934
SPEAKER_1:  I think to reference this.

01:23:20,642 --> 01:23:22,942
SPEAKER_1:  a sales pitchy blog post.

01:23:23,554 --> 01:23:26,878
SPEAKER_1:  that says 75% of developers' time is spent on debugging.

01:23:27,202 --> 01:23:29,470
SPEAKER_1:  I would say that in some cases that might be okay.

01:23:29,922 --> 01:23:32,222
SPEAKER_1:  It might be okay to pay the cost of performance.

01:23:33,058 --> 01:23:35,422
SPEAKER_1:  for the catching of the types, the type errors.

01:23:36,162 --> 01:23:38,078
SPEAKER_0:  And in most cases...

01:23:38,562 --> 01:23:39,326
SPEAKER_0:  doing it.

01:23:40,386 --> 01:23:44,094
SPEAKER_0:  statically before you ship your code to production.

01:23:45,090 --> 01:23:48,734
SPEAKER_0:  is more efficient than doing it at runtime piecemeal.

01:23:50,178 --> 01:23:51,166
SPEAKER_1:  Can you tell me about...

01:23:52,482 --> 01:23:55,550
SPEAKER_1:  Mypy project.

01:23:55,778 --> 01:23:56,158
SPEAKER_1:  Mm-hmm.

01:23:56,546 --> 01:23:57,246
SPEAKER_1:  What is it?

01:23:57,602 --> 01:23:58,654
SPEAKER_1:  What's the mission?

01:23:59,298 --> 01:24:03,198
SPEAKER_1:  And in general, what is the future of static typing in Python?

01:24:04,066 --> 01:24:08,094
SPEAKER_0:  Well, so MyPy was started by a Finnish.

01:24:08,450 --> 01:24:10,974
SPEAKER_0:  Developer, you can let us know.

01:24:11,746 --> 01:24:13,182
SPEAKER_1:  So many cool things out of Finland.

01:24:13,538 --> 01:24:14,206
SPEAKER_1:  i guess it

01:24:14,498 --> 01:24:15,582
SPEAKER_1:  Just that part of the world.

01:24:15,714 --> 01:24:19,614
SPEAKER_0:  I guess people have nothing better to do in those long cold winters.

01:24:19,874 --> 01:24:25,822
SPEAKER_0:  I don't know, I think Yuka lived in England when he invented that stuff actually.

01:24:26,466 --> 01:24:27,486
SPEAKER_0:  My pie.

01:24:27,714 --> 01:24:36,158
SPEAKER_0:  is the original static type checker for Python and the type annotations that were introduced with PEP 484.

01:24:37,026 --> 01:24:38,558
SPEAKER_0:  were sort of developed.

01:24:39,298 --> 01:24:40,190
SPEAKER_0:  together.

01:24:40,930 --> 01:24:42,942
SPEAKER_0:  with the static type checker.

01:24:43,618 --> 01:24:49,758
SPEAKER_0:  And in fact, Yuka had first invented a different syntax that wasn't quite compatible with Python.

01:24:50,658 --> 01:24:55,582
SPEAKER_0:  and Yuka and I sort of met at the Python conference.

01:24:56,066 --> 01:24:58,014
SPEAKER_0:  in I think in 2013.

01:24:59,234 --> 01:25:00,446
SPEAKER_0:  And we.

01:25:01,026 --> 01:25:01,758
SPEAKER_0:  We sort of.

01:25:02,306 --> 01:25:04,606
SPEAKER_0:  came up with a compromise syntax.

01:25:05,826 --> 01:25:06,206
SPEAKER_0:  That's it.

01:25:06,434 --> 01:25:09,022
SPEAKER_0:  would not require any changes to Python.

01:25:09,922 --> 01:25:11,102
SPEAKER_0:  and that would let

01:25:11,362 --> 01:25:15,646
SPEAKER_0:  MyPy sort of be an add-on static type checker for Python.

01:25:15,938 --> 01:25:20,926
SPEAKER_1:  Just out of curiosity, was it like double colon or something? What was he proposing that would break python?

01:25:21,378 --> 01:25:23,710
SPEAKER_0:  I think he was using angular brackets.

01:25:24,002 --> 01:25:28,638
SPEAKER_0:  for types like in C++ or Java generics.

01:25:29,026 --> 01:25:32,862
SPEAKER_1:  Yeah, you can't use angular brackets in Python. That would be too tricky.

01:25:33,922 --> 01:25:35,486
SPEAKER_0:  Well, we...

01:25:35,810 --> 01:25:38,302
SPEAKER_0:  The key thing is that we already had.

01:25:38,594 --> 01:25:44,382
SPEAKER_0:  uh no, a syntax for annotations we just didn't know what to use them for yet.

01:25:45,346 --> 01:25:47,966
SPEAKER_0:  So type annotations were just the sort of...

01:25:48,322 --> 01:25:49,438
SPEAKER_0:  most logical.

01:25:49,890 --> 01:25:53,310
SPEAKER_0:  thing to use that existing dummy syntax for.

01:25:54,370 --> 01:25:58,142
SPEAKER_0:  So there was no there was no syntax for.

01:25:58,690 --> 01:26:00,510
SPEAKER_0:  defining generics.

01:26:01,282 --> 01:26:03,774
SPEAKER_0:  directly syntactically in the language.

01:26:04,482 --> 01:26:07,806
SPEAKER_0:  MyPy literally meant my version of Python.

01:26:08,194 --> 01:26:09,886
SPEAKER_0:  where mine refers to Yucca.

01:26:11,042 --> 01:26:11,998
SPEAKER_0:  He had a-

01:26:12,354 --> 01:26:16,062
SPEAKER_0:  parser that translated mypy into python.

01:26:16,930 --> 01:26:17,406
SPEAKER_0:  Bye.

01:26:17,922 --> 01:26:19,614
SPEAKER_0:  like doing the type checks.

01:26:20,546 --> 01:26:21,278
SPEAKER_0:  and then

01:26:21,666 --> 01:26:29,150
SPEAKER_0:  removing the annotations and all the angular brackets from the positions where he was using them.

01:26:30,274 --> 01:26:37,406
SPEAKER_0:  But a preprocessor model doesn't work very well with the typical workflow of Python development projects.

01:26:38,018 --> 01:26:42,526
SPEAKER_1:  That's funny. I mean, that could have been another major split if it became successful.

01:26:43,042 --> 01:26:44,510
SPEAKER_1:  Like if you watch...

01:26:44,994 --> 01:26:46,590
SPEAKER_1:  TypeScript versus JavaScript.

01:26:47,842 --> 01:26:52,990
SPEAKER_1:  is like a split in the community over types, right? That seems to be stabilizing now.

01:26:53,186 --> 01:26:57,374
SPEAKER_0:  It's not necessarily a split, there's certainly plenty of people who...

01:26:57,954 --> 01:26:59,998
SPEAKER_0:  Don't use TypeScript, but...

01:27:01,282 --> 01:27:03,422
SPEAKER_0:  just use the original JavaScript.

01:27:03,746 --> 01:27:10,814
SPEAKER_0:  notation just like there are many people in the Python world who don't use type annotations and don't use static type checkers.

01:27:11,266 --> 01:27:15,806
SPEAKER_1:  No, you know, but there is a bit of a split between TypeScript and JavaScript, old school JavaScript.

01:27:16,034 --> 01:27:17,054
SPEAKER_1:  Yes, whatever.

01:27:17,410 --> 01:27:28,318
SPEAKER_0:  Well, in the JavaScript world, transpilers are sort of the standard way of working anyway, which is why TypeScript being a transpiler itself is not a big deal.

01:27:29,026 --> 01:27:34,142
SPEAKER_1:  And transpires for people who don't know. It's, it's exactly the thing you said with my price. It's the code.

01:27:34,690 --> 01:27:36,158
SPEAKER_1:  I guess you call it preprocessing.

01:27:36,674 --> 01:27:40,542
SPEAKER_1:  code that translates from one language to the other. And that's part of the culture, part of the-

01:27:41,058 --> 01:27:43,614
SPEAKER_1:  workflow of the JavaScript community. So.

01:27:43,874 --> 01:27:45,630
SPEAKER_0:  That's right. At the same time.

01:27:46,370 --> 01:27:52,222
SPEAKER_0:  An interesting development in the JavaScript slash TypeScript world at the moment is that

01:27:53,058 --> 01:27:57,502
SPEAKER_0:  There is a proposal under consideration. It's only a Stage 1 proposal.

01:27:58,338 --> 01:28:03,326
SPEAKER_0:  that proposes to add a feature to JavaScript where, just like Python,

01:28:03,938 --> 01:28:04,478
SPEAKER_0:  It will.

01:28:05,090 --> 01:28:07,038
SPEAKER_0:  Ignore certain syntax.

01:28:08,098 --> 01:28:08,702
SPEAKER_0:  when

01:28:09,186 --> 01:28:11,486
SPEAKER_0:  running the JavaScript code.

01:28:12,162 --> 01:28:15,070
SPEAKER_0:  and what it ignores is more or less.

01:28:15,362 --> 01:28:19,262
SPEAKER_0:  a superset of the TypeScript annotation syntax.

01:28:20,834 --> 01:28:21,662
SPEAKER_0:  And so.

01:28:22,306 --> 01:28:25,406
SPEAKER_0:  That would mean that eventually, if you wanted to...

01:28:25,954 --> 01:28:27,454
SPEAKER_0:  You could take TypeScript.

01:28:28,674 --> 01:28:35,102
SPEAKER_0:  and you could shove it directly into a JavaScript interpreter without translation.

01:28:36,130 --> 01:28:39,966
SPEAKER_0:  The interesting thing in the JavaScript world, at least the web browser world...

01:28:40,674 --> 01:28:45,278
SPEAKER_0:  The web browsers have changed how they deploy and they.

01:28:45,634 --> 01:28:48,542
SPEAKER_0:  they sort of update their JavaScript engines.

01:28:49,186 --> 01:28:55,806
SPEAKER_0:  much more quickly than they used to in the early days and so there's much less of a need for.

01:28:56,642 --> 01:28:59,262
SPEAKER_0:  translation in JavaScript itself.

01:28:59,746 --> 01:29:02,462
SPEAKER_0:  because most browsers just support the...

01:29:02,914 --> 01:29:04,830
SPEAKER_0:  most recent version of ECMAScript.

01:29:05,570 --> 01:29:13,246
SPEAKER_1:  just in a tangent of a tangent, do you see if you would recommend somebody use a thing, would you recommend TypeScript or JavaScript?

01:29:14,306 --> 01:29:16,606
SPEAKER_0:  I would recommend TypeScript.

01:29:16,994 --> 01:29:19,038
SPEAKER_1:  just because of the strictness of the typing.

01:29:19,458 --> 01:29:19,870
SPEAKER_0:  It's.

01:29:20,514 --> 01:29:24,798
SPEAKER_0:  an enormously helpful extra tool that helps you sort of.

01:29:27,074 --> 01:29:28,638
SPEAKER_0:  Keep your head straight about.

01:29:29,282 --> 01:29:30,910
SPEAKER_0:  what your code is actually doing.

01:29:32,098 --> 01:29:33,118
SPEAKER_0:  I mean it's it's it.

01:29:33,794 --> 01:29:34,814
SPEAKER_0:  It helps with...

01:29:35,234 --> 01:29:39,294
SPEAKER_0:  Editing your code, it helps with ensuring that your code.

01:29:40,386 --> 01:29:41,758
SPEAKER_0:  is not too incorrect.

01:29:42,722 --> 01:29:44,094
SPEAKER_0:  and it's actually...

01:29:45,410 --> 01:29:48,958
SPEAKER_0:  Quite compatible with JavaScript, nevermind this syntactic.

01:29:49,378 --> 01:29:49,950
SPEAKER_0:  Sort of.

01:29:50,338 --> 01:29:52,254
SPEAKER_0:  hack that is still years in the future.

01:29:53,058 --> 01:29:53,438
SPEAKER_0:  But.

01:29:54,146 --> 01:29:59,582
SPEAKER_0:  Any library that is written in pure JavaScript can still be used from TypeScript programs.

01:30:00,130 --> 01:30:02,590
SPEAKER_0:  and also the other way around. You can write.

01:30:02,946 --> 01:30:04,510
SPEAKER_0:  a library in TypeScript.

01:30:05,090 --> 01:30:10,078
SPEAKER_0:  and then export it in a form that is totally consumable by JavaScript.

01:30:10,626 --> 01:30:11,262
SPEAKER_0:  That's sort of.

01:30:11,682 --> 01:30:16,702
SPEAKER_0:  compatibility is sort of the key to the success of TypeScript.

01:30:17,474 --> 01:30:24,158
SPEAKER_1:  Yeah, just to look at it as almost like a biological system that's evolving. It's fascinating to see JavaScript evolve the way it does.

01:30:24,610 --> 01:30:30,718
SPEAKER_0:  Well, maybe we should consider that biological systems are just engineering systems too, right? Yes.

01:30:31,138 --> 01:30:32,222
SPEAKER_0:  just very advanced.

01:30:32,866 --> 01:30:34,718
SPEAKER_0:  With more history.

01:30:35,458 --> 01:30:35,774
SPEAKER_1:  but...

01:30:36,098 --> 01:30:38,366
SPEAKER_1:  It's almost like the most visceral.

01:30:38,594 --> 01:30:40,478
SPEAKER_1:  in the JavaScript world because

01:30:40,834 --> 01:30:43,966
SPEAKER_1:  There's just so much code written in JavaScript.

01:30:44,738 --> 01:30:46,814
SPEAKER_1:  that for its history was.

01:30:47,554 --> 01:30:51,646
SPEAKER_1:  messy. If you talk about bugs per line of code, I just feel like JavaScript.

01:30:52,962 --> 01:30:58,174
SPEAKER_1:  eats the cake or whatever the terminology is. It beats Python by a lot in terms of number of bugs.

01:30:58,434 --> 01:31:01,502
SPEAKER_1:  meaning like way more bugs in JavaScript.

01:31:01,826 --> 01:31:03,422
SPEAKER_1:  And then the...

01:31:03,970 --> 01:31:09,566
SPEAKER_1:  Obviously the browsers are developing. Just there's so much active development. It feels a lot more like evolution.

01:31:10,146 --> 01:31:13,790
SPEAKER_1:  where a bunch of stuff is born and dies and there's experimentation.

01:31:14,402 --> 01:31:17,182
SPEAKER_1:  Debates versus python is more.

01:31:17,634 --> 01:31:17,950
SPEAKER_1:  Um.

01:31:18,306 --> 01:31:19,582
SPEAKER_1:  All that stuff is happening.

01:31:20,002 --> 01:31:23,166
SPEAKER_1:  but there's just a longer history of stable working.

01:31:23,426 --> 01:31:25,726
SPEAKER_1:  giant software systems written in Python.

01:31:26,146 --> 01:31:28,414
SPEAKER_1:  versus JavaScript is just a giant.

01:31:28,898 --> 01:31:30,590
SPEAKER_1:  beautiful I would say mess.

01:31:30,946 --> 01:31:33,854
SPEAKER_0:  of code. Very different culture and-

01:31:34,594 --> 01:31:41,662
SPEAKER_0:  To some extent differences in culture are random but to some extent the differences have to do with the environment.

01:31:42,722 --> 01:31:43,998
SPEAKER_0:  Uh, and...

01:31:44,354 --> 01:31:47,038
SPEAKER_0:  The fact that JavaScript is primarily...

01:31:48,738 --> 01:31:51,422
SPEAKER_0:  the language for developing.

01:31:52,002 --> 01:31:55,038
SPEAKER_0:  web applications, especially the client side.

01:31:55,778 --> 01:31:57,150
SPEAKER_0:  and the fact that it's...

01:31:57,538 --> 01:32:01,470
SPEAKER_0:  basically the only language for developing web applications.

01:32:02,338 --> 01:32:04,926
SPEAKER_0:  makes that community sort of just have.

01:32:05,346 --> 01:32:08,798
SPEAKER_0:  a different nature than the community of other languages.

01:32:10,722 --> 01:32:12,446
SPEAKER_1:  Plus the graphical component.

01:32:13,026 --> 01:32:13,630
SPEAKER_1:  Um...

01:32:14,082 --> 01:32:15,870
SPEAKER_1:  and the fact that they're deploying it.

01:32:16,322 --> 01:32:21,278
SPEAKER_1:  on all kinds of shapes of screens and devices and all that kind of stuff. justpticsmoke

01:32:21,890 --> 01:32:22,622
SPEAKER_1:  beautiful chaos.

01:32:22,850 --> 01:32:23,966
SPEAKER_1:  Anyway, back to my pipe.

01:32:24,674 --> 01:32:27,198
SPEAKER_1:  So what? Okay. You met you talked about

01:32:27,522 --> 01:32:28,862
SPEAKER_1:  syntax that could work.

01:32:29,602 --> 01:32:30,910
SPEAKER_1:  Where does it currently stand?

01:32:31,714 --> 01:32:33,790
SPEAKER_1:  What's the future of static typing in Python?

01:32:35,042 --> 01:32:42,430
SPEAKER_0:  It is still controversial, but it is much more accepted than when MyPy and PEP484 were young.

01:32:43,458 --> 01:32:47,966
SPEAKER_1:  What's the connection between a pet 44 type hints and my pie?

01:32:48,386 --> 01:32:49,470
SPEAKER_0:  My pie.

01:32:50,210 --> 01:32:56,862
SPEAKER_0:  was the original static type checker. So it, MyPy quickly evolved from Yucca's

01:32:57,410 --> 01:32:59,838
SPEAKER_0:  own variant of Python 2.

01:33:00,418 --> 01:33:06,334
SPEAKER_0:  a static type checker for Python and sort of PEP 484 that was it like.

01:33:07,778 --> 01:33:15,102
SPEAKER_0:  A very productive year where like many hundreds of messages were exchanged debating the merits.

01:33:15,810 --> 01:33:18,238
SPEAKER_0:  of every aspect of that pep.

01:33:19,362 --> 01:33:26,142
SPEAKER_0:  And so myPy is a static type checker for Python. It is itself written in Python.

01:33:27,138 --> 01:33:27,934
SPEAKER_0:  most.

01:33:28,578 --> 01:33:29,662
SPEAKER_0:  Additional

01:33:30,210 --> 01:33:35,326
SPEAKER_0:  static typing features that we introduced in the time since 3.6.

01:33:36,322 --> 01:33:38,526
SPEAKER_0:  i were also prototype.

01:33:39,202 --> 01:33:40,158
SPEAKER_0:  through MyPy.

01:33:41,314 --> 01:33:46,750
SPEAKER_0:  MyPy being an open source project with a very small number of maintainers.

01:33:47,778 --> 01:33:49,214
SPEAKER_0:  was successful enough.

01:33:49,666 --> 01:33:56,382
SPEAKER_0:  that people said this static type checking stuff for Python is actually worth an investment for our company.

01:33:57,890 --> 01:33:58,366
SPEAKER_0:  But...

01:33:59,010 --> 01:34:02,078
SPEAKER_0:  Somehow they chose not to support.

01:34:04,034 --> 01:34:07,006
SPEAKER_0:  making my pie faster say or.

01:34:07,682 --> 01:34:09,950
SPEAKER_0:  adding new features to myPy, but...

01:34:10,594 --> 01:34:13,982
SPEAKER_0:  both Google and Facebook and later Microsoft.

01:34:14,594 --> 01:34:16,830
SPEAKER_0:  developed their own static type checker.

01:34:17,122 --> 01:34:19,646
SPEAKER_0:  I think Facebook was one of the first.

01:34:20,354 --> 01:34:20,926
SPEAKER_0:  date.

01:34:21,474 --> 01:34:24,606
SPEAKER_0:  decided that they wanted to use the same technology.

01:34:25,186 --> 01:34:28,798
SPEAKER_0:  that they had successfully used for HHVM.

01:34:31,010 --> 01:34:32,510
SPEAKER_0:  because they sort of.

01:34:33,186 --> 01:34:38,302
SPEAKER_0:  They had a bunch of compiler writers and static type checking experts.

01:34:38,818 --> 01:34:39,774
SPEAKER_0:  who had written.

01:34:40,290 --> 01:34:44,382
SPEAKER_0:  the HHVM compiler and it was a big success within the company.

01:34:45,026 --> 01:34:47,390
SPEAKER_0:  and they had done it in a certain way, sort of.

01:34:49,026 --> 01:34:49,598
SPEAKER_0:  They wrote a-

01:34:49,826 --> 01:34:50,430
SPEAKER_0:  BIG.

01:34:51,106 --> 01:34:55,614
SPEAKER_0:  highly parallel application in an obscure language named OCaml.

01:34:56,418 --> 01:35:00,254
SPEAKER_0:  which is apparently mostly very good for writing static type checkers.

01:35:01,122 --> 01:35:01,790
SPEAKER_1:  Interesting.

01:35:02,210 --> 01:35:06,398
SPEAKER_1:  I have a lot of questions about how to write a static type checker.

01:35:06,946 --> 01:35:08,071
SPEAKER_1:  That's very confusing.

01:35:08,071 --> 01:35:08,958
SPEAKER_0:  Facebook wrote.

01:35:09,250 --> 01:35:16,606
SPEAKER_0:  their version and they worked on it in secret for about a year and then they came clean and went open source.

01:35:17,442 --> 01:35:23,166
SPEAKER_0:  Google in the meantime was developing something called PyType which was mostly

01:35:25,186 --> 01:35:26,686
SPEAKER_0:  interesting because it

01:35:27,010 --> 01:35:28,382
SPEAKER_0:  as you may have heard, they-

01:35:28,642 --> 01:35:30,942
SPEAKER_0:  have one gigantic monorepo.

01:35:32,194 --> 01:35:35,230
SPEAKER_0:  So all the code is checked into a single repository.

01:35:35,874 --> 01:35:38,942
SPEAKER_0:  Facebook has a different approach, so Facebook developed Pyre.

01:35:39,426 --> 01:35:39,870
SPEAKER_0:  Which

01:35:40,162 --> 01:35:41,694
SPEAKER_0:  which was written in OCaml.

01:35:42,242 --> 01:35:44,030
SPEAKER_0:  which worked well with Facebook's.

01:35:44,322 --> 01:35:46,142
SPEAKER_0:  development workflow.

01:35:47,458 --> 01:35:50,654
SPEAKER_0:  And Google developed something they called PyType.

01:35:51,106 --> 01:35:53,278
SPEAKER_0:  which was actually itself written in Python.

01:35:54,306 --> 01:35:54,878
SPEAKER_0:  Uh...

01:35:55,458 --> 01:35:58,622
SPEAKER_0:  and it was meant to sort of fit well in.

01:35:59,714 --> 01:36:02,334
SPEAKER_0:  their static type checking needs in.

01:36:02,722 --> 01:36:05,054
SPEAKER_0:  Google's gigantic monorepo.

01:36:05,346 --> 01:36:06,471
SPEAKER_0:  So Google has the money.

01:36:06,471 --> 01:36:07,614
SPEAKER_1:  giant got it.

01:36:07,906 --> 01:36:08,382
SPEAKER_1:  So.

01:36:09,122 --> 01:36:12,286
SPEAKER_1:  Just to clarify, this static type checker...

01:36:13,218 --> 01:36:16,830
SPEAKER_1:  philosophically is a thing that's supposed to exist outside of the language itself.

01:36:17,282 --> 01:36:24,254
SPEAKER_1:  and it's just a workflow like a debugger for the program. It's a linter. For people who don't know, a linter, maybe you can correct me.

01:36:24,578 --> 01:36:28,030
SPEAKER_1:  but it's a thing that runs through the code continuously.

01:36:28,482 --> 01:36:31,006
SPEAKER_1:  preprocessing to find issues.

01:36:31,586 --> 01:36:32,798
SPEAKER_1:  based on style.

01:36:33,346 --> 01:36:37,182
SPEAKER_1:  documentation and there's all kinds of linters right you can check that.

01:36:37,922 --> 01:36:40,254
SPEAKER_1:  What usual things does a linter do? Maybe!

01:36:40,514 --> 01:36:41,630
SPEAKER_1:  Check that you haven't.

01:36:42,498 --> 01:36:43,294
SPEAKER_1:  too many.

01:36:43,554 --> 01:36:45,182
SPEAKER_1:  characters in a single line.

01:36:45,762 --> 01:36:53,534
SPEAKER_0:  Linters often do static analysis where they try to point out things that are likely mistakes, but not

01:36:53,922 --> 01:36:56,926
SPEAKER_0:  incorrect according to the language specification.

01:36:57,314 --> 01:36:57,758
SPEAKER_0:  like.

01:36:58,178 --> 01:37:00,958
SPEAKER_0:  Maybe you have a variable that you never use.

01:37:01,666 --> 01:37:02,654
SPEAKER_0:  for the compiler.

01:37:03,330 --> 01:37:04,862
SPEAKER_0:  That is valid. You might be able to keep up with me in more details about the

01:37:05,442 --> 01:37:15,806
SPEAKER_0:  Sort of, you might be planning to use it in future version of the code, and the compiler might just optimize it out, but the compiler's not going to tell you, hey, you're never using this variable.

01:37:16,514 --> 01:37:17,278
SPEAKER_0:  A linter.

01:37:17,570 --> 01:37:18,334
SPEAKER_0:  We'll tell you.

01:37:18,754 --> 01:37:20,830
SPEAKER_0:  That variable is not used, maybe.

01:37:21,442 --> 01:37:27,518
SPEAKER_0:  There's a typo somewhere else where you meant to use it, but you accidentally used something else, or there are a number of...

01:37:27,842 --> 01:37:28,254
SPEAKER_0:  Sort of.

01:37:28,706 --> 01:37:31,486
SPEAKER_0:  common scenarios and a linter is often

01:37:33,794 --> 01:37:36,638
SPEAKER_0:  a big collection of little heuristics.

01:37:37,378 --> 01:37:43,582
SPEAKER_0:  where by looking at the combination of how your code is laid out, maybe how it's indented, maybe...

01:37:43,810 --> 01:37:44,926
SPEAKER_0:  Chart pavement structure.

01:37:45,634 --> 01:37:47,774
SPEAKER_0:  and but also just

01:37:49,154 --> 01:37:49,886
SPEAKER_0:  things like...

01:37:50,498 --> 01:37:52,638
SPEAKER_0:  Definition of names, use of names.

01:37:53,250 --> 01:37:58,622
SPEAKER_0:  It'll tell you likely things that are wrong. And in some cases, linters are.

01:37:59,234 --> 01:38:00,766
SPEAKER_0:  I release style checkers.

01:38:01,506 --> 01:38:05,182
SPEAKER_0:  For Python, there are a number of linters that check things like...

01:38:06,114 --> 01:38:08,542
SPEAKER_0:  Do you use the PEP8?

01:38:09,122 --> 01:38:14,174
SPEAKER_0:  recommended naming scheme for your functions and classes and variables.

01:38:14,402 --> 01:38:18,558
SPEAKER_0:  Because classes start with an uppercase and the rest starts with a lowercase.

01:38:19,714 --> 01:38:20,382
SPEAKER_0:  There's like...

01:38:20,610 --> 01:38:25,406
SPEAKER_0:  differences there and so the linter can tell you hey you have a class that uh who's

01:38:25,826 --> 01:38:27,134
SPEAKER_0:  First letter is not.

01:38:27,970 --> 01:38:40,158
SPEAKER_0:  an uppercase letter and that's just, I just find it annoying if I wanted that to be an uppercase letter. I would have typed an uppercase letter, but other people find it very comforting that if the linter is an uppercase letter, then I would have typed an uppercase letter.

01:38:40,866 --> 01:38:44,991
SPEAKER_0:  is no longer complaining about their code that they have followed all this time.

01:38:44,991 --> 01:38:45,662
SPEAKER_1:  rules.

01:38:46,050 --> 01:38:50,175
SPEAKER_1:  Maybe it's a fast way for a new developer joining a team to learn the style rules, right?

01:38:50,175 --> 01:38:54,718
SPEAKER_0:  Yeah, there's definitely that, but the best use of a linter is probably...

01:38:55,586 --> 01:38:57,726
SPEAKER_0:  not so much to sort of...

01:38:58,722 --> 01:39:03,646
SPEAKER_0:  and force team uniformity, but to actually help developers.

01:39:04,642 --> 01:39:09,086
SPEAKER_0:  catch bugs that the compilers, for whatever reason, don't catch.

01:39:09,698 --> 01:39:11,486
SPEAKER_0:  And there is lots of that in Python.

01:39:12,130 --> 01:39:14,718
SPEAKER_0:  And so, but the Aesthetic Type Checker.

01:39:15,490 --> 01:39:16,798
SPEAKER_0:  focuses on.

01:39:17,218 --> 01:39:20,382
SPEAKER_0:  a particular aspect of the linting, which

01:39:21,282 --> 01:39:21,726
SPEAKER_0:  I mean it.

01:39:21,986 --> 01:39:25,278
SPEAKER_0:  MyPy doesn't care how you name your classes and variables.

01:39:26,210 --> 01:39:26,686
SPEAKER_0:  Uh...

01:39:27,618 --> 01:39:29,726
SPEAKER_0:  but it is meticulous about...

01:39:29,986 --> 01:39:32,254
SPEAKER_0:  When you say that there was an integer here...

01:39:32,738 --> 01:39:34,526
SPEAKER_0:  and you're passing a string there.

01:39:34,786 --> 01:39:39,134
SPEAKER_0:  it will tell you, hey, that string is not an integer. So something's wrong either.

01:39:39,490 --> 01:39:40,254
SPEAKER_0:  Either you were.

01:39:40,706 --> 01:39:45,438
SPEAKER_0:  incorrect when you said it was an integer or you're incorrect when you're passing into string.

01:39:45,794 --> 01:39:47,198
SPEAKER_1:  If this is a race.

01:39:47,458 --> 01:39:53,278
SPEAKER_1:  Static type checkers is somebody winning. As you said, it's interesting that the companies didn't choose to invest in.

01:39:53,858 --> 01:39:56,638
SPEAKER_1:  this centralized development.

01:39:57,282 --> 01:39:58,174
SPEAKER_1:  of my pie.

01:39:58,530 --> 01:40:00,990
SPEAKER_1:  Is there a future for my pie?

01:40:01,954 --> 01:40:06,526
SPEAKER_1:  What do you see as the, will one of the companies win out and everybody uses?

01:40:06,946 --> 01:40:08,094
SPEAKER_1:  Like, uh...

01:40:08,450 --> 01:40:10,718
SPEAKER_1:  type or whatever Google's is called.

01:40:11,042 --> 01:40:18,174
SPEAKER_0:  Well, Microsoft is hoping that Microsoft's horse in that race called Pyrite is going to win.

01:40:18,786 --> 01:40:19,911
SPEAKER_0:  Pyrite, right.

01:40:19,911 --> 01:40:21,790
SPEAKER_1:  like R-I-G-H-T.

01:40:22,210 --> 01:40:22,750
SPEAKER_0:  Correct.

01:40:23,042 --> 01:40:26,910
SPEAKER_0:  Yeah, all my word processors tend to...

01:40:27,362 --> 01:40:30,558
SPEAKER_0:  typo corrected as pyrite, the name of the...

01:40:30,818 --> 01:40:31,806
SPEAKER_0:  I don't know what it is.

01:40:32,866 --> 01:40:34,846
SPEAKER_0:  some kind of semi-precious metal.

01:40:35,490 --> 01:40:36,615
SPEAKER_0:  Oh, right.

01:40:36,615 --> 01:40:37,086
SPEAKER_1:  Thanks for watching.

01:40:37,602 --> 01:40:38,622
SPEAKER_1:  I love it. Okay.

01:40:38,914 --> 01:40:41,502
SPEAKER_1:  So, okay, that's the Microsoft hope, but.

01:40:41,730 --> 01:40:44,158
SPEAKER_1:  Okay, so let me ask the question a different way.

01:40:44,610 --> 01:40:49,758
SPEAKER_1:  Is there going to be ever a future where the static type checker gets integrated into the language?

01:40:53,186 --> 01:40:56,510
SPEAKER_0:  Nobody is currently excited about.

01:40:57,410 --> 01:41:02,014
SPEAKER_0:  doing any work towards that. That doesn't mean that 5 or 10 years from now...

01:41:02,946 --> 01:41:04,382
SPEAKER_0:  the situation isn't.

01:41:05,346 --> 01:41:06,046
SPEAKER_0:  different.

01:41:06,722 --> 01:41:07,230
SPEAKER_0:  Uh...

01:41:08,162 --> 01:41:09,182
SPEAKER_0:  At the moment...

01:41:10,530 --> 01:41:12,286
SPEAKER_0:  Old aesthetic type checkers.

01:41:13,378 --> 01:41:14,814
SPEAKER_0:  uh... still

01:41:15,394 --> 01:41:22,366
SPEAKER_0:  evolve at a much higher speed than Python and its annotation syntax evolve.

01:41:22,978 --> 01:41:25,118
SPEAKER_0:  you get a new release of Python.

01:41:25,538 --> 01:41:26,366
SPEAKER_0:  once a year.

01:41:26,594 --> 01:41:29,694
SPEAKER_0:  Those are the only times that you can introduce new

01:41:30,082 --> 01:41:31,742
SPEAKER_0:  annotation syntax.

01:41:32,258 --> 01:41:34,878
SPEAKER_0:  And there are always people who invent new.

01:41:35,170 --> 01:41:37,822
SPEAKER_0:  new annotation syntax that they're trying to push.

01:41:38,754 --> 01:41:39,198
SPEAKER_0:  Uh...

01:41:39,874 --> 01:41:40,990
SPEAKER_0:  and worse.

01:41:41,826 --> 01:41:47,678
SPEAKER_0:  once we've all agreed that we are going to put some new syntax in, we can never take it back.

01:41:48,674 --> 01:41:49,630
SPEAKER_0:  at least a sort of

01:41:50,050 --> 01:41:53,758
SPEAKER_0:  Deprecating an existing feature takes many releases because

01:41:54,114 --> 01:41:57,694
SPEAKER_0:  You have to assume that people started using it as soon as we announced it.

01:41:58,626 --> 01:42:02,494
SPEAKER_0:  and then you can't take it away from them right away. You have to start.

01:42:02,914 --> 01:42:05,886
SPEAKER_0:  telling them, well, this will go away, but we're not.

01:42:06,338 --> 01:42:07,102
SPEAKER_0:  gonna commit.

01:42:07,586 --> 01:42:15,070
SPEAKER_0:  tell you that it's an error yet and then later it's going to be a warning and then eventually three releases in the future maybe we remove it

01:42:16,450 --> 01:42:19,390
SPEAKER_0:  On the other hand, the typical static type checker.

01:42:20,802 --> 01:42:22,750
SPEAKER_0:  still has a release like

01:42:25,154 --> 01:42:25,982
SPEAKER_0:  every month.

01:42:26,338 --> 01:42:27,358
SPEAKER_0:  every two months.

01:42:27,714 --> 01:42:29,438
SPEAKER_0:  certainly many times a year.

01:42:30,274 --> 01:42:34,750
SPEAKER_0:  Some type checkers also include a bunch of.

01:42:35,426 --> 01:42:38,942
SPEAKER_0:  experimental ideas that aren't official standard.

01:42:39,330 --> 01:42:40,958
SPEAKER_0:  Python syntax yet.

01:42:41,698 --> 01:42:45,086
SPEAKER_0:  And the static type checkers also just get the same.

01:42:45,506 --> 01:42:47,006
SPEAKER_0:  better at discovering.

01:42:47,682 --> 01:42:48,446
SPEAKER_0:  things that.

01:42:49,026 --> 01:42:54,430
SPEAKER_0:  that are unspecified by the language, but that could make sense.

01:42:54,658 --> 01:42:57,086
SPEAKER_0:  Each static type checker actually has

01:42:57,602 --> 01:42:59,582
SPEAKER_0:  it's sort of strong and weak points.

01:43:00,162 --> 01:43:04,862
SPEAKER_1:  So it's cool. It's like a laboratory of experiments. Yeah. Microsoft Google and all and you get to see.

01:43:05,090 --> 01:43:10,398
SPEAKER_0:  And you see that everywhere, right? Because there is not one single JavaScript in...

01:43:10,914 --> 01:43:15,742
SPEAKER_0:  engine either there is one in chrome there is one in safari there's one in firefox

01:43:17,250 --> 01:43:19,646
SPEAKER_1:  But that said, you said there's not interest, I think.

01:43:20,226 --> 01:43:23,390
SPEAKER_1:  There is a lot of interest in type hinting, right?

01:43:24,130 --> 01:43:25,566
SPEAKER_1:  in the PEP 484.

01:43:26,050 --> 01:43:28,766
SPEAKER_1:  XC they come in people use that give a sense

01:43:29,346 --> 01:43:32,318
SPEAKER_1:  How many people use, because it's optional, it's a sugar.

01:43:32,962 --> 01:43:33,726
SPEAKER_0:  I can't

01:43:33,986 --> 01:43:36,030
SPEAKER_0:  put a number on it but...

01:43:36,834 --> 01:43:43,870
SPEAKER_0:  from the number of packages that do interesting things with it at runtime and the fact that there are like

01:43:44,706 --> 01:43:48,094
SPEAKER_0:  Now feel for very mature type checkers.

01:43:49,218 --> 01:43:50,398
SPEAKER_0:  that each have their own.

01:43:50,626 --> 01:43:59,742
SPEAKER_0:  their segment of the market and then there is PyCharm which has a more heuristic based type checker that also supports the same syntax.

01:44:00,610 --> 01:44:02,270
SPEAKER_0:  My assumption is that

01:44:03,394 --> 01:44:07,838
SPEAKER_0:  many many people developing python software professionally.

01:44:08,802 --> 01:44:09,950
SPEAKER_0:  for some kind of...

01:44:10,690 --> 01:44:12,382
SPEAKER_0:  production situation.

01:44:12,610 --> 01:44:14,366
SPEAKER_0:  are using a static type checker.

01:44:15,138 --> 01:44:19,678
SPEAKER_0:  especially anybody who has a continuous integration cycle.

01:44:20,418 --> 01:44:21,854
SPEAKER_0:  probably has a

01:44:23,362 --> 01:44:25,214
SPEAKER_0:  one of the steps in there.

01:44:25,826 --> 01:44:29,182
SPEAKER_0:  their testing routine that happens for basically every.

01:44:29,442 --> 01:44:30,270
SPEAKER_0:  every commit.

01:44:31,138 --> 01:44:33,598
SPEAKER_0:  is run a static type checker.

01:44:34,370 --> 01:44:37,086
SPEAKER_0:  And in most cases, that will be my pie.

01:44:39,746 --> 01:44:41,630
SPEAKER_0:  So I think it's a pretty popular topic.

01:44:42,978 --> 01:44:44,382
SPEAKER_1:  according to this webpage.

01:44:45,730 --> 01:44:50,366
SPEAKER_1:  20 to 30% of Python 3 code bases are using type hints.

01:44:51,330 --> 01:44:51,646
SPEAKER_1:  Wow.

01:44:51,938 --> 01:44:54,910
SPEAKER_0:  I wonder how they measured that. Did they just scan all of GitHub?

01:44:55,682 --> 01:45:01,246
SPEAKER_1:  Yeah, that's what it looks like. Yeah. They did a quick set, not all of, but like a random sampling.

01:45:03,138 --> 01:45:04,318
SPEAKER_1:  So you mentioned PyCharm.

01:45:04,962 --> 01:45:07,550
SPEAKER_1:  Let me ask you the big subjective question.

01:45:09,442 --> 01:45:10,686
SPEAKER_1:  What's the best?

01:45:11,298 --> 01:45:12,798
SPEAKER_1:  IDE for Python.

01:45:13,282 --> 01:45:16,158
SPEAKER_1:  and you're extremely biased now that you're with Microsoft.

01:45:16,930 --> 01:45:20,510
SPEAKER_1:  Is it PyCharm VS code Vim or Emacs?

01:45:21,378 --> 01:45:26,270
SPEAKER_0:  Historically, I actually started out with using Vim.

01:45:26,786 --> 01:45:28,382
SPEAKER_0:  when it was still called VI.

01:45:29,442 --> 01:45:32,798
SPEAKER_0:  uh... for very long time i think from the

01:45:33,698 --> 01:45:35,774
SPEAKER_0:  early 80s to...

01:45:36,834 --> 01:45:37,758
SPEAKER_0:  I'd say...

01:45:37,986 --> 01:45:39,038
SPEAKER_0:  Two years ago...

01:45:40,034 --> 01:45:41,374
SPEAKER_0:  I was Emacs user?

01:45:41,986 --> 01:45:42,526
SPEAKER_1:  Nice.

01:45:42,850 --> 01:45:47,710
SPEAKER_0:  between I'd say 2013 and 2018.

01:45:49,858 --> 01:45:51,422
SPEAKER_0:  dabbled with pie charm?

01:45:52,226 --> 01:45:54,526
SPEAKER_0:  Mostly because it had...

01:45:55,554 --> 01:45:57,118
SPEAKER_0:  had a couple of features, I mean.

01:45:58,210 --> 01:45:59,102
SPEAKER_0:  Bye charm.

01:46:00,066 --> 01:46:00,382
SPEAKER_0:  is.

01:46:00,738 --> 01:46:01,118
SPEAKER_0:  like

01:46:01,346 --> 01:46:05,278
SPEAKER_0:  It's deriving an 18-wheeler truck, whereas E-MAX is more...

01:46:07,266 --> 01:46:07,646
SPEAKER_0:  like.

01:46:08,226 --> 01:46:11,454
SPEAKER_0:  driving your comfortable Toyota car.

01:46:12,418 --> 01:46:13,086
SPEAKER_0:  That's that's.

01:46:13,474 --> 01:46:18,590
SPEAKER_0:  that you've had for a hundred thousand miles and you know what every little rattle of the car means.

01:46:19,330 --> 01:46:24,766
SPEAKER_0:  I was very comfortable in Emacs, but there were certain things it couldn't do. It wasn't very good at...

01:46:25,186 --> 01:46:25,918
SPEAKER_0:  That's sort of.

01:46:26,402 --> 01:46:26,974
SPEAKER_0:  At least.

01:46:27,266 --> 01:46:29,054
SPEAKER_0:  the way I had configured it.

01:46:30,946 --> 01:46:35,326
SPEAKER_0:  I didn't have very good tooling in Emacs for finding the definition of a function.

01:46:36,738 --> 01:46:37,054
SPEAKER_0:  Got it.

01:46:37,538 --> 01:46:39,070
SPEAKER_0:  when I was at Dropbox.

01:46:39,586 --> 01:46:41,982
SPEAKER_0:  Exploring a 5 million line.

01:46:42,370 --> 01:46:43,646
SPEAKER_0:  Python code base.

01:46:44,578 --> 01:46:45,118
SPEAKER_0:  Uh.

01:46:45,922 --> 01:46:50,174
SPEAKER_0:  just grabbing all that code for where is there a class foobar.

01:46:50,658 --> 01:46:53,982
SPEAKER_0:  Well, turns out that if you grab all five million lines of code...

01:46:54,530 --> 01:46:56,702
SPEAKER_0:  There are many classes with the same name.

01:46:58,018 --> 01:47:00,158
SPEAKER_0:  And so PyCharm sort of...

01:47:00,386 --> 01:47:00,830
SPEAKER_0:  once.

01:47:01,090 --> 01:47:04,062
SPEAKER_0:  once you fired it up and once it's indexed.

01:47:04,290 --> 01:47:05,470
SPEAKER_0:  your repository.

01:47:06,114 --> 01:47:07,710
SPEAKER_0:  It was very helpful.

01:47:08,226 --> 01:47:10,366
SPEAKER_0:  But as soon as I had to edit code...

01:47:11,522 --> 01:47:17,662
SPEAKER_0:  jump back to Emacs and do all my editing there because I could type much faster and switch between files.

01:47:18,338 --> 01:47:23,550
SPEAKER_0:  when I knew which file I wanted much quicker. I never really got used to that.

01:47:24,194 --> 01:47:26,366
SPEAKER_0:  the whole PyCharm user interface.

01:47:26,914 --> 01:47:29,886
SPEAKER_1:  Yeah, I feel torn in that same kind of way, because I've used...

01:47:30,178 --> 01:47:32,990
SPEAKER_1:  PyCharm off and on exactly in that same way.

01:47:33,602 --> 01:47:35,070
SPEAKER_1:  and I feel like I'm just being a-

01:47:35,746 --> 01:47:36,958
SPEAKER_1:  an old grumpy man.

01:47:37,826 --> 01:47:43,774
SPEAKER_1:  for not learning how to quickly switch between files and all that kind of stuff. I feel like that has to do with shortcuts, has to do with...

01:47:44,258 --> 01:47:46,883
SPEAKER_1:  I mean, you just have to get accustomed, just like with touch typing.

01:47:46,883 --> 01:47:50,718
SPEAKER_0:  Yeah, you have to just want to learn that. I mean, if you don't need it much.

01:47:51,170 --> 01:47:52,830
SPEAKER_1:  You don't need touch typing either.

01:47:53,378 --> 01:47:57,918
SPEAKER_1:  You can type with two fingers just fine in the short term, but in the long term your life will...

01:47:58,242 --> 01:47:58,814
SPEAKER_1:  become.

01:47:59,042 --> 01:47:59,486
SPEAKER_1:  better.

01:47:59,874 --> 01:48:03,646
SPEAKER_1:  psychologically and productivity wise if you learn how to type with 10 fingers.

01:48:04,002 --> 01:48:06,366
SPEAKER_0:  if you do a lot of keyboard input.

01:48:06,882 --> 01:48:10,494
SPEAKER_1:  but for everyone emails and stuff, right? Like you look at the.

01:48:10,818 --> 01:48:11,358
SPEAKER_1:  The next.

01:48:11,650 --> 01:48:15,358
SPEAKER_1:  20, 30 years of your life, you have to anticipate where technology is going.

01:48:16,162 --> 01:48:16,734
SPEAKER_1:  Um

01:48:17,378 --> 01:48:19,550
SPEAKER_1:  Do you want to invest in handwriting notes?

01:48:19,938 --> 01:48:20,638
SPEAKER_1:  Probably not.

01:48:20,898 --> 01:48:23,358
SPEAKER_1:  more and more people are doing typing versus.

01:48:23,586 --> 01:48:24,414
SPEAKER_1:  handwriting notes.

01:48:24,770 --> 01:48:25,918
SPEAKER_1:  So you can anticipate that.

01:48:26,530 --> 01:48:30,494
SPEAKER_1:  So there's no reason to actually practice handwriting. There's more reason to practice typing.

01:48:31,618 --> 01:48:35,006
SPEAKER_1:  you can actually estimate back to the spreadsheet the number of

01:48:35,682 --> 01:48:36,574
SPEAKER_1:  paragraphs.

01:48:36,994 --> 01:48:38,494
SPEAKER_1:  sentences or words you write.

01:48:39,170 --> 01:48:40,254
SPEAKER_1:  for the rest of your life.

01:48:41,218 --> 01:48:42,302
SPEAKER_1:  You best-

01:48:42,434 --> 01:48:46,174
SPEAKER_0:  Here we go again with the spreadsheet of my life, huh?

01:48:46,690 --> 01:48:51,294
SPEAKER_1:  I mean, all of that is not actual like converted to a spreadsheet, but the gut feeling.

01:48:51,746 --> 01:48:54,142
SPEAKER_1:  Like I have the same kind of gut feeling about books.

01:48:54,626 --> 01:48:58,206
SPEAKER_1:  I've almost exclusively switched to Kindle now for ebook readers.

01:48:59,298 --> 01:49:00,766
SPEAKER_1:  even though I still love.

01:49:01,410 --> 01:49:04,830
SPEAKER_1:  and probably always will, the smell, the feel of a physical book.

01:49:05,858 --> 01:49:06,398
SPEAKER_1:  and

01:49:07,394 --> 01:49:11,614
SPEAKER_1:  You, the reason I switched to Kindle is like, all right, well, this is really paving.

01:49:12,066 --> 01:49:13,822
SPEAKER_1:  the future is going to be.

01:49:14,626 --> 01:49:16,286
SPEAKER_1:  digital in terms of consuming.

01:49:17,026 --> 01:49:22,942
SPEAKER_1:  books and content of that nature. So you should get, you know, you should let your brain get accustomed to that experience.

01:49:23,714 --> 01:49:24,702
SPEAKER_1:  And that same way...

01:49:25,026 --> 01:49:28,222
SPEAKER_1:  It feels like pie charm or VS code. I think by charmers.

01:49:29,154 --> 01:49:32,446
SPEAKER_1:  the most sophisticated, featureful.

01:49:33,090 --> 01:49:33,502
SPEAKER_1:  Uh...

01:49:33,794 --> 01:49:34,814
SPEAKER_1:  Python ID.

01:49:35,074 --> 01:49:35,838
SPEAKER_1:  It feels like.

01:49:36,130 --> 01:49:38,558
SPEAKER_1:  I should probably at some point very soon.

01:49:39,010 --> 01:49:42,782
SPEAKER_1:  switch entire like I'm not allowed to use anything else for Python.

01:49:43,234 --> 01:49:44,222
SPEAKER_1:  than this ID.

01:49:44,546 --> 01:49:48,766
SPEAKER_1:  or VS code, it doesn't matter, but walk away from Emacs for this particular application.

01:49:49,218 --> 01:49:50,654
SPEAKER_1:  I think I'm limiting myself.

01:49:51,202 --> 01:49:54,430
SPEAKER_1:  in the same way that using two fingers for typing is limiting myself.

01:49:55,394 --> 01:49:58,942
SPEAKER_1:  This is a therapy session. This isn't maybe

01:50:00,162 --> 01:50:03,998
SPEAKER_0:  But I'm sure a lot of people are thinking of this one, right? I can't stop you, I-

01:50:04,770 --> 01:50:06,238
SPEAKER_0:  I think that that sort of.

01:50:06,690 --> 01:50:08,926
SPEAKER_0:  Everybody has to decide for themselves.

01:50:09,154 --> 01:50:12,222
SPEAKER_0:  which one they want to to invest more time in.

01:50:13,666 --> 01:50:14,622
SPEAKER_0:  I actually...

01:50:15,682 --> 01:50:19,710
SPEAKER_0:  ended up giving VS Code a very tentative try.

01:50:20,258 --> 01:50:23,486
SPEAKER_0:  when I started out at Microsoft and really liking it.

01:50:24,578 --> 01:50:25,150
SPEAKER_0:  and

01:50:25,538 --> 01:50:26,526
SPEAKER_0:  It sort of, it.

01:50:26,946 --> 01:50:30,206
SPEAKER_0:  Took me a while before I realized why that was.

01:50:31,010 --> 01:50:31,358
SPEAKER_0:  but.

01:50:31,586 --> 01:50:37,726
SPEAKER_0:  And I think that actually the founders of VS code may not necessarily agree with me on this.

01:50:38,722 --> 01:50:39,134
SPEAKER_0:  but.

01:50:39,458 --> 01:50:40,158
SPEAKER_0:  to me.

01:50:40,514 --> 01:50:45,470
SPEAKER_0:  VS Code is in a sense the spiritual successor of Emacs.

01:50:46,818 --> 01:50:47,742
SPEAKER_0:  because...

01:50:48,610 --> 01:50:51,134
SPEAKER_0:  As you probably know as an old Emacs hack.

01:50:52,290 --> 01:50:57,662
SPEAKER_0:  The key part of Emacs is that it's mostly written in Lisp.

01:50:58,786 --> 01:51:00,414
SPEAKER_0:  And that sort of...

01:51:00,898 --> 01:51:03,486
SPEAKER_0:  New features of Emacs usually.

01:51:04,034 --> 01:51:05,982
SPEAKER_0:  Update all the list packages.

01:51:06,434 --> 01:51:08,286
SPEAKER_0:  and add new list packages.

01:51:08,738 --> 01:51:10,782
SPEAKER_0:  And oh yeah, there's also...

01:51:11,490 --> 01:51:15,614
SPEAKER_0:  some very obscure thing improved in the part that's not in Lisp.

01:51:17,026 --> 01:51:20,446
SPEAKER_0:  That's usually not why you would upgrade to a new version of Emacs.

01:51:21,346 --> 01:51:21,758
SPEAKER_0:  There's a.

01:51:21,986 --> 01:51:23,774
SPEAKER_0:  Core implementation.

01:51:24,610 --> 01:51:25,630
SPEAKER_0:  That's sort of.

01:51:26,466 --> 01:51:30,462
SPEAKER_0:  can read a file and it can put bits on the screen and it can.

01:51:31,106 --> 01:51:33,310
SPEAKER_0:  sort of manage memory and buffers.

01:51:33,730 --> 01:51:35,166
SPEAKER_0:  and then what makes it

01:51:35,778 --> 01:51:39,358
SPEAKER_0:  An editor full of features is all the list packages.

01:51:39,810 --> 01:51:43,902
SPEAKER_0:  And of course the design of how the list packages interact with

01:51:44,194 --> 01:51:47,646
SPEAKER_0:  each other and with that sort of the base layer.

01:51:48,514 --> 01:51:56,030
SPEAKER_0:  of the core immutable engine. But almost everything in that core engine in Emacs case can still be.

01:51:56,674 --> 01:51:58,590
SPEAKER_0:  overridden or replaced.

01:51:59,426 --> 01:52:00,062
SPEAKER_0:  And so.

01:52:02,978 --> 01:52:07,294
SPEAKER_0:  VS code has a similar architecture where there is like.

01:52:09,922 --> 01:52:11,038
SPEAKER_0:  Bass Engine.

01:52:11,618 --> 01:52:13,502
SPEAKER_0:  that you have no control over.

01:52:14,274 --> 01:52:16,190
SPEAKER_0:  I mean it's open source but nobody...

01:52:17,090 --> 01:52:20,062
SPEAKER_0:  except the people who work on that part.

01:52:21,666 --> 01:52:22,654
SPEAKER_0:  It changes it much.

01:52:23,490 --> 01:52:27,518
SPEAKER_0:  and it has a sort of a package manager.

01:52:28,290 --> 01:52:34,462
SPEAKER_0:  and a whole series of interfaces for packages and an additional series of

01:52:34,818 --> 01:52:39,710
SPEAKER_0:  conventions for how packages should interact with the lower layers and with each other.

01:52:40,706 --> 01:52:44,286
SPEAKER_0:  and powerful primitive operations that let you...

01:52:45,826 --> 01:52:51,966
SPEAKER_0:  move the cursor around or select pieces of text or delete pieces of text or

01:52:52,770 --> 01:52:56,862
SPEAKER_0:  interact with the keyboard and mouse and whatever peripherals you have.

01:52:58,082 --> 01:53:00,158
SPEAKER_0:  And so the sort of the.

01:53:00,866 --> 01:53:02,974
SPEAKER_0:  extreme extensibility.

01:53:03,458 --> 01:53:05,246
SPEAKER_0:  and the package ecosystem.

01:53:05,826 --> 01:53:11,070
SPEAKER_0:  that you see in VS code is a mirror of very similar.

01:53:11,426 --> 01:53:13,662
SPEAKER_0:  architectural features in Emacs.

01:53:14,370 --> 01:53:16,286
SPEAKER_1:  Well, I'll have to give it a serious try.

01:53:16,642 --> 01:53:17,246
SPEAKER_1:  Kazoo.

01:53:18,018 --> 01:53:23,870
SPEAKER_1:  As far as sort of the hype and the excitement in the general programming community VS code seems to dominate.

01:53:24,482 --> 01:53:25,502
SPEAKER_1:  interesting thing about

01:53:26,594 --> 01:53:27,710
SPEAKER_1:  Pie Charm and

01:53:28,546 --> 01:53:31,774
SPEAKER_1:  What is it? Which should be Storm, which are these jet brains?

01:53:32,162 --> 01:53:36,030
SPEAKER_1:  uh... specific ideas that design for one programming language

01:53:36,418 --> 01:53:37,598
SPEAKER_1:  It's interesting too.

01:53:38,818 --> 01:53:40,693
SPEAKER_1:  when an ID is specialized.

01:53:40,693 --> 01:53:42,270
SPEAKER_0:  They're usually...

01:53:42,818 --> 01:53:48,478
SPEAKER_0:  actually just specializations of IntelliJ because underneath it's all the same.

01:53:49,410 --> 01:53:50,878
SPEAKER_0:  editing engine with.

01:53:51,522 --> 01:53:52,286
SPEAKER_0:  different.

01:53:53,314 --> 01:53:54,462
SPEAKER_0:  veneer on top.

01:53:55,650 --> 01:53:57,502
SPEAKER_0:  where in VS Code

01:53:58,498 --> 01:53:59,998
SPEAKER_0:  many things you do.

01:54:00,994 --> 01:54:01,982
SPEAKER_0:  REQUIRE

01:54:02,466 --> 01:54:04,926
SPEAKER_0:  loading third party extensions.

01:54:05,826 --> 01:54:10,238
SPEAKER_0:  In PyCharm, it is possible to have third-party extensions.

01:54:10,850 --> 01:54:11,422
SPEAKER_0:  But it is.

01:54:11,810 --> 01:54:13,982
SPEAKER_0:  It is a struggle to create one.

01:54:14,594 --> 01:54:15,719
SPEAKER_0:  Yes, we.

01:54:15,719 --> 01:54:17,219
SPEAKER_1:  culture all that kind of stuff.

01:54:17,219 --> 01:54:19,678
SPEAKER_0:  Yeah, we that I remember that

01:54:20,194 --> 01:54:22,494
SPEAKER_0:  might have been five years ago or so we were.

01:54:22,850 --> 01:54:24,286
SPEAKER_0:  trying to get some.

01:54:24,578 --> 01:54:27,198
SPEAKER_0:  better MyPy integration into PyCharm.

01:54:27,714 --> 01:54:28,958
SPEAKER_0:  because my pie is sort of.

01:54:29,314 --> 01:54:31,166
SPEAKER_0:  Python tooling and PyCharm.

01:54:32,578 --> 01:54:33,886
SPEAKER_0:  had its own.

01:54:35,490 --> 01:54:45,342
SPEAKER_0:  type checking heuristic thing that we wanted to replace with something based on MyPy because that was what we were using in the company and it

01:54:45,858 --> 01:54:46,686
SPEAKER_0:  for the...

01:54:47,138 --> 01:54:48,958
SPEAKER_0:  guy who was writing that.

01:54:49,634 --> 01:54:53,566
SPEAKER_0:  by charm extension it was really a struggle to sort of

01:54:53,922 --> 01:54:55,838
SPEAKER_0:  find documentation and

01:54:56,802 --> 01:54:58,654
SPEAKER_0:  get the development workflow.

01:54:59,266 --> 01:55:05,278
SPEAKER_0:  going and debug his code and all that. So that was not a pleasant experience.

01:55:06,114 --> 01:55:07,102
SPEAKER_1:  Let me talk to you about.

01:55:07,362 --> 01:55:08,094
SPEAKER_1:  Prell-ism.

01:55:08,802 --> 01:55:12,830
SPEAKER_1:  in your post titled reasoning about async IO semaphore.

01:55:13,538 --> 01:55:19,518
SPEAKER_1:  You talk about a fast food restaurant in Silicon Valley that has only one table. Is this a real thing? I just wanted to ask you about that.

01:55:20,098 --> 01:55:23,614
SPEAKER_1:  Is that just like a metaphor you're using or is that an actual restaurant?

01:55:24,098 --> 01:55:25,223
SPEAKER_1:  and so it was.

01:55:25,223 --> 01:55:26,846
SPEAKER_0:  It was a metaphor, of course.

01:55:27,586 --> 01:55:29,214
SPEAKER_1:  I can imagine such a restaurant.

01:55:29,474 --> 01:55:30,622
SPEAKER_1:  So for people who don't...

01:55:31,042 --> 01:55:33,246
SPEAKER_1:  then read the thing you should.

01:55:33,762 --> 01:55:34,750
SPEAKER_1:  But it was a...

01:55:35,746 --> 01:55:39,806
SPEAKER_1:  idea of a restaurant where there's only one table and you show up.

01:55:40,130 --> 01:55:41,310
SPEAKER_1:  one at a time.

01:55:41,634 --> 01:55:42,782
SPEAKER_1:  and they are prepared.

01:55:43,298 --> 01:55:46,846
SPEAKER_1:  And I actually looked it up and there is restaurants like this throughout the world.

01:55:47,458 --> 01:55:52,894
SPEAKER_1:  And it just seems like a fascinating idea. You stand in line, you show up, there's one table.

01:55:53,794 --> 01:55:54,750
SPEAKER_1:  They are...

01:55:55,330 --> 01:55:57,630
SPEAKER_1:  They ask you all kinds of questions. They cook just for you.

01:55:58,082 --> 01:55:59,207
SPEAKER_1:  That's fascinating. Do you understand what I'm trying to explain?

01:55:59,207 --> 01:56:02,078
SPEAKER_0:  like you'd find places like that in Tokyo.

01:56:02,466 --> 01:56:10,302
SPEAKER_0:  It sounds like a very Japanese thing. Or in the Bay Area there are pop places that probably more or less work like that. I've never eaten at such a place.

01:56:10,530 --> 01:56:13,905
SPEAKER_1:  The fascinating thing is you propose as a fast food. This is off for a br-

01:56:13,905 --> 01:56:16,094
SPEAKER_0:  It was one of my rare

01:56:16,546 --> 01:56:17,182
SPEAKER_0:  Sort of.

01:56:17,794 --> 01:56:19,550
SPEAKER_0:  more literary or

01:56:19,906 --> 01:56:22,782
SPEAKER_0:  poetic moments where I thought I'll just...

01:56:23,010 --> 01:56:24,798
SPEAKER_0:  Open with a crazy example.

01:56:25,282 --> 01:56:25,598
SPEAKER_0:  too.

01:56:25,858 --> 01:56:29,726
SPEAKER_0:  catch your attention and the rest is very dry stuff about

01:56:30,210 --> 01:56:34,462
SPEAKER_0:  locks and semaphores and how a semaphore is a generalization of the lock.

01:56:35,138 --> 01:56:41,022
SPEAKER_1:  Well, it was very poetic and well delivered and it actually made me wonder if it's real or not because you don't make that explicit

01:56:41,314 --> 01:56:49,342
SPEAKER_1:  And it feels like it could be true. And in fact, I wouldn't be surprised if somebody like listens to this and knows exactly a restaurant like this in Silicon Valley.

01:56:49,826 --> 01:56:50,366
SPEAKER_1:  Anyway.

01:56:50,594 --> 01:56:51,710
SPEAKER_1:  Can we step back and...

01:56:52,258 --> 01:56:53,246
SPEAKER_1:  Can you just talk about...

01:56:53,762 --> 01:56:54,494
SPEAKER_1:  Parallelism.

01:56:54,722 --> 01:56:55,966
SPEAKER_1:  concurrency threading.

01:56:56,834 --> 01:56:59,006
SPEAKER_1:  asynchronous all these different terms.

01:56:59,586 --> 01:57:02,046
SPEAKER_1:  What is it? What is it?

01:57:02,370 --> 01:57:04,094
SPEAKER_1:  The fisherman is back on the boat.

01:57:04,738 --> 01:57:09,182
SPEAKER_0:  Well, the idea is if the fisherman has two fishing rods...

01:57:10,114 --> 01:57:14,686
SPEAKER_0:  Since fishing is mostly a matter of waiting for fish to nibble.

01:57:15,010 --> 01:57:18,078
SPEAKER_0:  Well, it depends on how you do it actually, but if you had two f-

01:57:18,306 --> 01:57:23,422
SPEAKER_0:  If you're doing the style of fishing where you sort of, you throw it out and then...

01:57:24,002 --> 01:57:26,910
SPEAKER_0:  You let it sit for a while until maybe you see a nibble.

01:57:27,458 --> 01:57:31,006
SPEAKER_0:  One fisherman can easily run two or three or four.

01:57:31,714 --> 01:57:32,638
SPEAKER_0:  fishing rods.

01:57:32,898 --> 01:57:34,302
SPEAKER_0:  And so as long as you can.

01:57:34,530 --> 01:57:38,174
SPEAKER_0:  Afford the equipment you can catch four times as many fish by

01:57:38,850 --> 01:57:39,262
SPEAKER_0:  Uh...

01:57:39,522 --> 01:57:43,550
SPEAKER_0:  Small investment in for fishing rods and so get since your time.

01:57:44,322 --> 01:57:47,006
SPEAKER_0:  You sort of say you have all Saturday to go fishing.

01:57:47,586 --> 01:57:49,822
SPEAKER_0:  if you can catch four times as much fish.

01:57:50,594 --> 01:57:52,542
SPEAKER_0:  you have a much higher productivity.

01:57:52,834 --> 01:57:58,622
SPEAKER_1:  And that's actually, I think, how deep sea fishing is done. You could just have a rod and you put in a hole so you can have many rods.

01:57:59,170 --> 01:57:59,678
SPEAKER_1:  Uh...

01:57:59,938 --> 01:58:02,526
SPEAKER_1:  What is there an interesting difference between

01:58:02,754 --> 01:58:04,318
SPEAKER_1:  Parallelism and concurrency?

01:58:05,058 --> 01:58:07,038
SPEAKER_1:  and asynchronous?...

01:58:07,458 --> 01:58:10,535
SPEAKER_1:  one is subset of the other to you. Like how do you think about these terms?

01:58:10,535 --> 01:58:13,086
SPEAKER_0:  In the computer world there is a

01:58:13,410 --> 01:58:14,590
SPEAKER_0:  Big difference.

01:58:14,914 --> 01:58:16,542
SPEAKER_0:  when people are talking about

01:58:17,090 --> 01:58:18,078
SPEAKER_0:  Parallelism.

01:58:18,402 --> 01:58:20,382
SPEAKER_0:  like a parallel computer.

01:58:21,954 --> 01:58:23,678
SPEAKER_0:  That's usually really...

01:58:24,514 --> 01:58:27,710
SPEAKER_0:  several complete CPUs that are

01:58:27,938 --> 01:58:28,382
SPEAKER_0:  Sort of.

01:58:28,738 --> 01:58:30,398
SPEAKER_0:  tied together and.

01:58:31,170 --> 01:58:34,942
SPEAKER_0:  share something like memory or an IO bus.

01:58:36,066 --> 01:58:37,950
SPEAKER_0:  Uh, concurrency.

01:58:38,242 --> 01:58:41,150
SPEAKER_0:  can be a much more abstract concept.

01:58:41,922 --> 01:58:42,558
SPEAKER_0:  where...

01:58:43,842 --> 01:58:46,366
SPEAKER_0:  You have the illusion that things happen.

01:58:47,426 --> 01:58:51,262
SPEAKER_0:  simultaneously but what the computer actually does is

01:58:51,938 --> 01:58:53,726
SPEAKER_0:  It spends a little time running.

01:58:53,986 --> 01:59:01,111
SPEAKER_0:  some this program for a while and then it spends some time running that program for a while and then spending some time for the third program.

01:59:01,111 --> 01:59:01,854
SPEAKER_1:  for a while.

01:59:02,690 --> 01:59:04,254
SPEAKER_1:  So parallelism is the...

01:59:04,994 --> 01:59:06,494
SPEAKER_1:  reality and concurrency.

01:59:07,042 --> 01:59:08,167
SPEAKER_1:  part reality part o-

01:59:08,167 --> 01:59:10,654
SPEAKER_0:  Yeah, parallelism typically...

01:59:11,042 --> 01:59:14,782
SPEAKER_0:  implies that there is multiple copies of the hardware.

01:59:15,778 --> 01:59:23,070
SPEAKER_1:  You write that implementing synchronization primitives is hard in that blog post. You talk about locks and semaphores.

01:59:23,650 --> 01:59:24,958
SPEAKER_1:  Why is it hard to implement?

01:59:25,378 --> 01:59:26,558
SPEAKER_1:  synchronization primitive.

01:59:27,074 --> 01:59:27,934
SPEAKER_0:  because

01:59:28,258 --> 01:59:32,094
SPEAKER_0:  At the conscious level our brains are not.

01:59:32,610 --> 01:59:36,958
SPEAKER_0:  trained to sort of keep track of multiple things.

01:59:37,922 --> 01:59:38,878
SPEAKER_0:  the same time.

01:59:39,426 --> 01:59:42,686
SPEAKER_0:  Like, obviously you can walk and chew gum at the same time.

01:59:43,554 --> 01:59:44,638
SPEAKER_0:  Because they're both.

01:59:45,282 --> 01:59:46,398
SPEAKER_0:  activities that.

01:59:46,914 --> 01:59:49,886
SPEAKER_0:  require only a little bit of your conscious

01:59:50,562 --> 01:59:53,182
SPEAKER_0:  activity but try balancing your checkbook.

01:59:53,762 --> 01:59:57,118
SPEAKER_0:  and watching a murder mystery on TV.

01:59:57,986 --> 02:00:03,038
SPEAKER_0:  you'll mix up the digits or you'll miss an essential clue in the TV show.

02:00:03,842 --> 02:00:06,206
SPEAKER_1:  So why does it matter that the programmer, the human...

02:00:07,298 --> 02:00:08,423
SPEAKER_1:  is bad.

02:00:08,423 --> 02:00:10,494
SPEAKER_0:  Because the programmer is...

02:00:10,722 --> 02:00:14,270
SPEAKER_0:  at least with the current state of the art, is responsible for...

02:00:15,106 --> 02:00:17,150
SPEAKER_0:  writing the code correctly.

02:00:17,538 --> 02:00:19,358
SPEAKER_0:  and it's hard enough.

02:00:20,290 --> 02:00:21,662
SPEAKER_0:  to keep track of.

02:00:22,370 --> 02:00:23,774
SPEAKER_0:  A recipe that you just

02:00:24,802 --> 02:00:26,686
SPEAKER_0:  Execute one step at a time.

02:00:28,066 --> 02:00:29,086
SPEAKER_0:  Chop the carrots.

02:00:29,602 --> 02:00:31,102
SPEAKER_0:  Then peel the potatoes.

02:00:31,906 --> 02:00:32,926
SPEAKER_0:  Mix the icing.

02:00:33,826 --> 02:00:35,422
SPEAKER_0:  You need your whole brain.

02:00:35,682 --> 02:00:38,494
SPEAKER_0:  when you're reading a piece of code.

02:00:39,650 --> 02:00:41,854
SPEAKER_0:  What is going on? Okay, we're...

02:00:42,498 --> 02:00:43,486
SPEAKER_0:  We're loading.

02:00:44,034 --> 02:00:51,838
SPEAKER_0:  The number of mermaids in variable A and the number of mermen in variable B, and now we take the average or whatever.

02:00:53,090 --> 02:00:55,733
SPEAKER_1:  I like how we're just jumping from metaphor to metaphor.

02:00:55,733 --> 02:00:56,766
SPEAKER_0:  I like it.

02:00:57,026 --> 02:01:00,414
SPEAKER_0:  You have to keep in your head what is in A, what is in B.

02:01:00,738 --> 02:01:01,790
SPEAKER_0:  What is NC?

02:01:02,242 --> 02:01:03,998
SPEAKER_0:  Hopefully you have better names.

02:01:05,154 --> 02:01:07,262
SPEAKER_0:  And that is challenging enough.

02:01:08,098 --> 02:01:09,502
SPEAKER_0:  If you have two.

02:01:09,858 --> 02:01:10,654
SPEAKER_0:  different

02:01:11,266 --> 02:01:13,150
SPEAKER_0:  pieces of code that are

02:01:13,666 --> 02:01:14,462
SPEAKER_0:  are sort of

02:01:14,818 --> 02:01:16,062
SPEAKER_0:  being executed.

02:01:17,250 --> 02:01:21,310
SPEAKER_0:  simultaneously, whether it's using the parallel or the concurrent.

02:01:22,050 --> 02:01:22,814
SPEAKER_0:  approach.

02:01:23,714 --> 02:01:24,606
SPEAKER_0:  if like...

02:01:26,018 --> 02:01:30,206
SPEAKER_0:  A is the number of fishermen and B is the number of programmers.

02:01:30,946 --> 02:01:35,838
SPEAKER_0:  But in another part of the code, A is the number of mermaids and B is the number of merman.

02:01:36,834 --> 02:01:37,918
SPEAKER_0:  and somehow...

02:01:38,754 --> 02:01:43,326
SPEAKER_0:  that's the same variable if you do it sequentially if first you do your mermaid

02:01:43,586 --> 02:01:48,094
SPEAKER_0:  More people computation and then you do your people in the boat computation.

02:01:48,386 --> 02:01:49,374
SPEAKER_0:  It doesn't matter that-

02:01:49,794 --> 02:01:57,310
SPEAKER_0:  the variables are called A and B and that is literally the same variable because you're done with one use of that variable but

02:01:57,570 --> 02:01:59,102
SPEAKER_0:  When you mix them together.

02:01:59,490 --> 02:02:00,158
SPEAKER_0:  Suddenly.

02:02:01,410 --> 02:02:06,046
SPEAKER_0:  The number of merpeople replaces the number of fishermen and your computation goes...

02:02:06,562 --> 02:02:07,582
SPEAKER_0:  dramatically wrong.

02:02:08,098 --> 02:02:10,014
SPEAKER_1:  and there's all kinds of ordering.

02:02:11,042 --> 02:02:16,667
SPEAKER_1:  operations that could result in the assignment of those variables and so you have to anticipate all possible orders

02:02:16,667 --> 02:02:20,574
SPEAKER_0:  And you think you're smart and you'll put a lock around it.

02:02:21,090 --> 02:02:21,694
SPEAKER_0:  and

02:02:22,114 --> 02:02:23,134
SPEAKER_0:  In practice.

02:02:23,554 --> 02:02:27,102
SPEAKER_0:  in terms of bugs per line of per thousand lines of code.

02:02:28,194 --> 02:02:30,622
SPEAKER_0:  This is an area where everything is worse.

02:02:30,882 --> 02:02:32,414
SPEAKER_1:  So a lock is a...

02:02:32,866 --> 02:02:34,206
SPEAKER_1:  mechanism by which

02:02:34,882 --> 02:02:36,638
SPEAKER_1:  You forbid only one.

02:02:37,506 --> 02:02:39,998
SPEAKER_1:  Chef can access the oven at a time.

02:02:41,026 --> 02:02:42,110
SPEAKER_1:  Something like that.

02:02:42,370 --> 02:02:46,142
SPEAKER_1:  And then semaphores allow you to do what? Multiple ovens?

02:02:46,402 --> 02:02:49,118
SPEAKER_0:  That's not a bad idea because if you're sort of...

02:02:49,890 --> 02:02:53,982
SPEAKER_0:  If you're preparing, if you're baking cakes and you have multiple people all...

02:02:54,242 --> 02:02:56,254
SPEAKER_0:  baking cakes but there's only one oven.

02:02:56,482 --> 02:03:05,758
SPEAKER_0:  then maybe you can tell that the oven is in use, but maybe it's preheating. And so you have to, maybe you make a sign that says oven in use.

02:03:06,722 --> 02:03:12,030
SPEAKER_0:  And you flip the sign over and it says often is free when you're done baking your cake.

02:03:12,866 --> 02:03:14,686
SPEAKER_0:  And that's a lock that sort of.

02:03:15,266 --> 02:03:16,606
SPEAKER_0:  and what do you do?

02:03:17,154 --> 02:03:17,662
SPEAKER_0:  when...

02:03:17,922 --> 02:03:20,510
SPEAKER_0:  You have two ovens, or maybe you have ten ovens.

02:03:21,058 --> 02:03:24,702
SPEAKER_0:  You can put a separate sign on each oven or maybe you can...

02:03:25,090 --> 02:03:28,446
SPEAKER_0:  sort of someone who comes in wants to see at a glance.

02:03:29,090 --> 02:03:34,366
SPEAKER_0:  and maybe there's an electronic sign that says there are still five ovens available.

02:03:35,362 --> 02:03:37,630
SPEAKER_0:  uh... or maybe they're already

02:03:38,690 --> 02:03:42,046
SPEAKER_0:  three people waiting for an oven so you can't...

02:03:43,170 --> 02:03:48,798
SPEAKER_0:  If you see an oven that's not in use, it's already reserved for someone else who got in line first.

02:03:49,474 --> 02:03:53,182
SPEAKER_0:  And that's sort of what the restaurant metaphor was trying to explain.

02:03:53,730 --> 02:03:58,590
SPEAKER_1:  Yeah. And so you're now tasks you sitting as a designer of Python.

02:03:59,234 --> 02:04:02,430
SPEAKER_1:  with a team of brilliant core developers have to try to figure out

02:04:03,138 --> 02:04:06,206
SPEAKER_1:  To what degree can any of these ideas be integrated and not?

02:04:06,914 --> 02:04:10,590
SPEAKER_1:  So maybe this is a good time to ask what is async IO?

02:04:11,266 --> 02:04:14,558
SPEAKER_1:  and how has it evolved since Python 3.4?

02:04:15,810 --> 02:04:20,318
SPEAKER_0:  Wow, yeah, so we had this really old library for

02:04:20,642 --> 02:04:21,950
SPEAKER_0:  for doing things.

02:04:23,618 --> 02:04:33,118
SPEAKER_0:  Concurrently, especially things that had to do with I.O. and networking I.O. was especially a sort of a popular topic.

02:04:34,338 --> 02:04:35,006
SPEAKER_0:  and

02:04:36,578 --> 02:04:40,094
SPEAKER_0:  In the Python standard library, we had a...

02:04:40,802 --> 02:04:41,438
SPEAKER_0:  someone breathe

02:04:42,146 --> 02:04:44,638
SPEAKER_0:  period where there was lots of development.

02:04:45,154 --> 02:04:50,174
SPEAKER_0:  And I think it was late 90s, maybe early 2000s and like...

02:04:51,650 --> 02:05:04,382
SPEAKER_0:  Two little modules were added that were the state of the art of doing asynchronous IO or sort of non-blocking IO, which means that you can keep multiple network connections open and sort of service them.

02:05:04,930 --> 02:05:07,678
SPEAKER_0:  all in parallel like a typical web server does.

02:05:08,098 --> 02:05:11,102
SPEAKER_1:  So I always input an output so you're writing either to.

02:05:11,330 --> 02:05:13,598
SPEAKER_1:  the network and re-establishment network connection.

02:05:13,858 --> 02:05:19,166
SPEAKER_1:  or reading and writing to a hard drive, storage. Also possible. And you can do.

02:05:19,682 --> 02:05:21,822
SPEAKER_1:  the ideas you could do to multiple

02:05:22,082 --> 02:05:23,998
SPEAKER_1:  while also doing computation.

02:05:24,994 --> 02:05:27,838
SPEAKER_1:  running some code that does some fancy stuff.

02:05:28,098 --> 02:05:30,270
SPEAKER_0:  Yeah, like when you're writing a web server.

02:05:30,946 --> 02:05:33,438
SPEAKER_0:  when a request comes in a user.

02:05:33,858 --> 02:05:34,366
SPEAKER_0:  Assertive.

02:05:34,690 --> 02:05:36,894
SPEAKER_0:  needs to see a particular webpage.

02:05:37,666 --> 02:05:43,998
SPEAKER_0:  You have to find that page maybe in the database and format it properly and send it back to the client.

02:05:45,346 --> 02:05:53,054
SPEAKER_0:  There's a lot of waiting, waiting for the database, waiting for the network. And so you can handle hundreds or thousands or millions of requests.

02:05:54,146 --> 02:05:56,414
SPEAKER_0:  concurrently on Lawn Machine anyway.

02:05:56,898 --> 02:06:01,470
SPEAKER_0:  Ways of doing that in Python were kind of stagnated and, uh...

02:06:02,530 --> 02:06:03,998
SPEAKER_0:  I forget they might have been around.

02:06:04,226 --> 02:06:04,798
SPEAKER_0:  20

02:06:05,090 --> 02:06:07,102
SPEAKER_0:  2012-2014.

02:06:08,034 --> 02:06:08,606
SPEAKER_0:  Uhhh

02:06:09,090 --> 02:06:12,094
SPEAKER_0:  when someone for the umpteenth time actually said

02:06:12,802 --> 02:06:14,526
SPEAKER_0:  these async chats.

02:06:14,818 --> 02:06:21,982
SPEAKER_0:  And async core modules that you have in a standard library are not quite enough to solve my particular problem.

02:06:22,850 --> 02:06:25,118
SPEAKER_0:  Can we add one tiny little feature?

02:06:25,698 --> 02:06:26,846
SPEAKER_0:  And everybody said...

02:06:27,266 --> 02:06:38,302
SPEAKER_0:  No, that stuff is not to be, you're not supposed to use that stuff. Write your own using a third party library. And then everybody started the debate about what the right third party library was.

02:06:39,074 --> 02:06:40,638
SPEAKER_0:  And somehow I-

02:06:40,962 --> 02:06:41,310
SPEAKER_0:  I-

02:06:42,242 --> 02:06:43,038
SPEAKER_0:  felt that.

02:06:43,938 --> 02:06:45,214
SPEAKER_0:  that was actually...

02:06:45,666 --> 02:06:48,318
SPEAKER_0:  a cue for well maybe we need a

02:06:48,610 --> 02:06:50,142
SPEAKER_0:  better state of the art.

02:06:51,298 --> 02:06:56,990
SPEAKER_0:  module in the standard library for multiplexing input output from different sources.

02:06:57,570 --> 02:07:02,846
SPEAKER_0:  You could say that it spiraled out of control a little bit. It was at the time it was the largest.

02:07:03,426 --> 02:07:06,270
SPEAKER_0:  Python enhancement proposal that was ever proposed.

02:07:07,042 --> 02:07:08,702
SPEAKER_1:  and you were deeply involved with that.

02:07:09,058 --> 02:07:13,534
SPEAKER_0:  At the time I was very much involved with that. I was like the lead architect.

02:07:14,402 --> 02:07:16,350
SPEAKER_0:  I ended up

02:07:17,218 --> 02:07:21,886
SPEAKER_0:  talking to people who had already developed serious third party

02:07:22,306 --> 02:07:27,102
SPEAKER_0:  libraries that did similar things and sort of taking ideas from them.

02:07:28,418 --> 02:07:32,318
SPEAKER_0:  getting their feedback on my design and eventually we...

02:07:32,802 --> 02:07:41,214
SPEAKER_0:  put it in the standard library and after a few years I got distracted. I think the big thing that distracted me was actually type annotations.

02:07:41,794 --> 02:07:48,254
SPEAKER_0:  But other people kept it alive and kicking and it's been quite successful actually.

02:07:49,122 --> 02:07:51,166
SPEAKER_0:  in the world of Python web clients.

02:07:51,362 --> 02:07:53,054
SPEAKER_1:  So initially, what are some of the...

02:07:53,506 --> 02:07:56,030
SPEAKER_1:  the sign challenges there in that debate for the pep.

02:07:56,578 --> 02:08:00,670
SPEAKER_1:  And what are some things that got rejected? What are some things that got accepted that stand out to you?

02:08:02,050 --> 02:08:04,414
SPEAKER_0:  There are a couple of different ways you can...

02:08:05,154 --> 02:08:12,670
SPEAKER_0:  handle parallel I O and this happened sort of at an architectural level in operating systems as well like windows

02:08:12,898 --> 02:08:16,894
SPEAKER_0:  prefers to do it one way and unix prefers to do it the other way.

02:08:17,538 --> 02:08:18,238
SPEAKER_0:  You sort of...

02:08:19,330 --> 02:08:22,750
SPEAKER_0:  You have an object that represents a network endpoint.

02:08:23,266 --> 02:08:26,526
SPEAKER_0:  say, a connection with a web browser that your client.

02:08:27,618 --> 02:08:28,286
SPEAKER_0:  and

02:08:28,930 --> 02:08:31,486
SPEAKER_0:  Say you're waiting for an incoming request.

02:08:32,066 --> 02:08:34,142
SPEAKER_0:  Two fundamental approaches are...

02:08:36,450 --> 02:08:39,934
SPEAKER_0:  Okay, I'm waiting for an incoming request. I'm doing something else.

02:08:40,482 --> 02:08:47,486
SPEAKER_0:  Come wake me up or come tell me when something interesting happened, like a packet came in on that network connection.

02:08:48,386 --> 02:08:49,022
SPEAKER_0:  and

02:08:49,282 --> 02:08:49,694
SPEAKER_0:  D.

02:08:49,954 --> 02:08:50,494
SPEAKER_0:  Other

02:08:50,754 --> 02:08:52,190
SPEAKER_0:  paradigm is

02:08:53,282 --> 02:08:55,454
SPEAKER_0:  We're on a team of a whole bunch of...

02:08:55,714 --> 02:09:02,526
SPEAKER_0:  people with maybe a little mind and we can only manage one web connection at a time.

02:09:04,194 --> 02:09:05,214
SPEAKER_0:  I'm just sitting.

02:09:07,298 --> 02:09:08,414
SPEAKER_0:  looking at this

02:09:08,738 --> 02:09:11,262
SPEAKER_0:  this web connection and I'm just blocked.

02:09:11,650 --> 02:09:12,318
SPEAKER_0:  until...

02:09:12,706 --> 02:09:15,070
SPEAKER_0:  something comes in and then.

02:09:15,618 --> 02:09:17,214
SPEAKER_0:  I'm already waiting for it.

02:09:18,754 --> 02:09:24,062
SPEAKER_0:  I get the data, I process the data, and then I go back to the top and say no.

02:09:24,610 --> 02:09:26,782
SPEAKER_0:  sort of, I'm waiting for the next packet.

02:09:27,490 --> 02:09:30,174
SPEAKER_0:  Those are about the two paradigms. The one is...

02:09:30,882 --> 02:09:41,214
SPEAKER_0:  a paradigm where there is sort of notionally a thread of control, whether it's an actual operating system thread or more an abstraction in async IO we call them tasks.

02:09:42,626 --> 02:09:49,086
SPEAKER_0:  But a task in async.io or a thread in other contexts is devoted to one thing.

02:09:49,602 --> 02:09:50,846
SPEAKER_0:  and it has logic.

02:09:51,394 --> 02:09:55,038
SPEAKER_0:  for all the stages, like when it's a web request, like.

02:09:55,906 --> 02:10:04,510
SPEAKER_0:  First wait for the first line of the web request, parse it because then you know if it's a get or a post or a put or whatever.

02:10:04,866 --> 02:10:05,566
SPEAKER_0:  or an error.

02:10:06,242 --> 02:10:13,022
SPEAKER_0:  Then wait until you have a bunch of lines until there's a blank line, then parse that as headers and then

02:10:13,730 --> 02:10:16,702
SPEAKER_0:  interpret that and then wait for the rest of the...

02:10:17,346 --> 02:10:22,782
SPEAKER_0:  data to come in if there is any more that you expect. That's sort of standard web.

02:10:23,426 --> 02:10:23,902
SPEAKER_0:  stuff.

02:10:24,546 --> 02:10:32,318
SPEAKER_0:  And the other thing is, and there's always endless debate about which approach is more efficient and which approach is more error prone.

02:10:33,186 --> 02:10:38,782
SPEAKER_0:  where I just have a whole bunch of stacks in front of me and whenever

02:10:39,746 --> 02:10:41,918
SPEAKER_0:  A packet comes in, I sort of...

02:10:42,242 --> 02:10:47,710
SPEAKER_0:  look at the number of the pack that there's some number on the packet and I say oh that packet goes on this

02:10:47,938 --> 02:10:48,446
SPEAKER_0:  file.

02:10:49,154 --> 02:10:54,110
SPEAKER_0:  And then I can do a little bit and then sort of that pile provides my context.

02:10:55,202 --> 02:10:58,526
SPEAKER_0:  And as soon as I'm done with the processing, I sort of...

02:10:59,298 --> 02:11:07,550
SPEAKER_0:  I can't forget everything about what's going on because the next packet will come in from some random other client and it's that pile or this pile.

02:11:08,642 --> 02:11:14,974
SPEAKER_0:  And every time a pile is maybe empty or full or whatever the criteria is, I can toss it away or...

02:11:15,426 --> 02:11:16,926
SPEAKER_0:  use it for a new space but

02:11:17,858 --> 02:11:19,614
SPEAKER_0:  several traditional

02:11:19,938 --> 02:11:26,302
SPEAKER_0:  Third-party libraries for asynchronous I-O processing in Python chose the model of a callback.

02:11:27,202 --> 02:11:30,334
SPEAKER_0:  And that's the idea where you have a bunch of different...

02:11:30,754 --> 02:11:34,558
SPEAKER_0:  stacks of paper in front of you and every time someone gives you a piece

02:11:34,850 --> 02:11:35,998
SPEAKER_0:  gives you new sheet.

02:11:36,226 --> 02:11:38,494
SPEAKER_0:  you decide which stack it belongs to.

02:11:39,618 --> 02:11:40,286
SPEAKER_0:  and

02:11:40,610 --> 02:11:41,118
SPEAKER_0:  That's.

02:11:41,378 --> 02:11:45,406
SPEAKER_0:  leads to a certain style of spaghetti code that.

02:11:46,210 --> 02:11:48,126
SPEAKER_0:  I find sort of aesthetically.

02:11:49,314 --> 02:11:52,446
SPEAKER_0:  not pleasing and I was sort of...

02:11:52,834 --> 02:11:57,502
SPEAKER_0:  never very successful and I had heard many stories about people who were also

02:11:58,722 --> 02:12:01,662
SPEAKER_0:  sort of complaining about that style of coding.

02:12:02,498 --> 02:12:07,326
SPEAKER_0:  It was very prevalent in javascript at the time at least because it was like.

02:12:07,714 --> 02:12:09,406
SPEAKER_0:  How did JavaScript event loop?

02:12:10,306 --> 02:12:11,326
SPEAKER_0:  basically works.

02:12:11,938 --> 02:12:12,990
SPEAKER_0:  And so I thought.

02:12:13,538 --> 02:12:16,094
SPEAKER_0:  Well, the task-based model where...

02:12:16,738 --> 02:12:18,750
SPEAKER_0:  Each task has a bunch of logic.

02:12:19,458 --> 02:12:24,286
SPEAKER_0:  We had mechanisms in the Python language that we could easily reuse.

02:12:24,834 --> 02:12:28,190
SPEAKER_0:  for that. And I thought, I want to build a whole-

02:12:28,546 --> 02:12:31,294
SPEAKER_0:  Library for Asynchronous Networking I.O.

02:12:32,322 --> 02:12:36,702
SPEAKER_0:  and all the other things that may need to be done asynchronously.

02:12:37,634 --> 02:12:39,358
SPEAKER_0:  uh, based on that paradigm.

02:12:40,034 --> 02:12:42,430
SPEAKER_0:  And so I just chose a paradigm and.

02:12:43,074 --> 02:12:48,286
SPEAKER_0:  try to see how far I could get with that. And it turns out that it's a pretty good paradigm.

02:12:49,090 --> 02:12:50,215
SPEAKER_0:  So people enjoy that.

02:12:50,215 --> 02:12:52,798
SPEAKER_1:  kind of paradigm programming for asynchronous.

02:12:53,282 --> 02:12:53,726
SPEAKER_1:  I.O.

02:12:54,434 --> 02:12:55,646
SPEAKER_1:  relative to callbacks.

02:12:57,698 --> 02:13:01,278
SPEAKER_1:  Okay, beautiful. So how does that all interplay with.

02:13:01,922 --> 02:13:05,278
SPEAKER_1:  the infamous Gill, the global interpreter Locke.

02:13:06,946 --> 02:13:10,046
SPEAKER_1:  Maybe can you say what the gil is and how does it dance?

02:13:10,338 --> 02:13:11,902
SPEAKER_1:  beautifully with Ace and Kaio.

02:13:13,314 --> 02:13:14,942
SPEAKER_0:  The global interpreter luck.

02:13:16,162 --> 02:13:21,790
SPEAKER_0:  solves the problem that Python originally was not written with either asynchronous or

02:13:22,178 --> 02:13:22,622
SPEAKER_0:  or.

02:13:22,978 --> 02:13:28,446
SPEAKER_0:  parallelism in mind at all there was no concurrency in the language there was no parallelism there were no

02:13:28,962 --> 02:13:29,566
SPEAKER_0:  threads.

02:13:30,370 --> 02:13:35,262
SPEAKER_0:  only a small number of years into Python's initial development.

02:13:36,034 --> 02:13:43,774
SPEAKER_0:  all the new cool operating systems like SunOS and Silicon Graphics, IRIX and then

02:13:44,354 --> 02:13:49,118
SPEAKER_0:  Eventually POSIX and Windows all came with threading libraries.

02:13:49,922 --> 02:13:54,398
SPEAKER_0:  that lets you do multiple things in parallel. And there is a certain...

02:13:55,138 --> 02:13:56,062
SPEAKER_0:  Certain sort of.

02:13:56,514 --> 02:13:58,142
SPEAKER_0:  principle which is

02:13:58,498 --> 02:14:01,534
SPEAKER_0:  The operating system handles the threads for you.

02:14:02,626 --> 02:14:04,126
SPEAKER_0:  and the program

02:14:04,514 --> 02:14:08,926
SPEAKER_0:  can pretend that there are as many CPUs as...

02:14:09,346 --> 02:14:11,390
SPEAKER_0:  as there are threads in the program.

02:14:12,770 --> 02:14:17,118
SPEAKER_0:  and those CPUs work completely independently.

02:14:18,338 --> 02:14:20,574
SPEAKER_0:  And if you don't have enough CPUs to...

02:14:20,802 --> 02:14:23,326
SPEAKER_0:  operating system sort of simulates.

02:14:23,746 --> 02:14:27,742
SPEAKER_0:  those extra CPUs. On the other hand, if you have enough CPUs...

02:14:28,322 --> 02:14:31,294
SPEAKER_0:  you can get a lot of work done.

02:14:31,682 --> 02:14:34,142
SPEAKER_0:  by deploying those multiple CPUs.

02:14:34,466 --> 02:14:36,062
SPEAKER_0:  But Python wasn't written.

02:14:36,834 --> 02:14:37,150
SPEAKER_0:  to.

02:14:37,730 --> 02:14:38,814
SPEAKER_0:  to do that.

02:14:39,714 --> 02:14:40,318
SPEAKER_0:  Uh...

02:14:40,930 --> 02:14:41,790
SPEAKER_0:  And so.

02:14:43,970 --> 02:14:44,510
SPEAKER_0:  S

02:14:44,994 --> 02:14:49,438
SPEAKER_0:  libraries for for multi threading were added to see.

02:14:50,338 --> 02:14:54,526
SPEAKER_0:  but every operating system vendor was adding their own version of that.

02:14:55,554 --> 02:15:03,550
SPEAKER_0:  we thought, and maybe we were wrong, but at the time we thought, well, we quickly want to be able to support these multiple threads.

02:15:04,418 --> 02:15:09,150
SPEAKER_0:  because they seemed at the time in the early 90s when they were new at least to me.

02:15:10,018 --> 02:15:13,246
SPEAKER_0:  they seemed a cool interesting programming paradigm.

02:15:13,858 --> 02:15:17,342
SPEAKER_0:  And one of the things that Python, at least at the time...

02:15:18,242 --> 02:15:21,662
SPEAKER_0:  felt was nice about the language was that we could give a

02:15:22,626 --> 02:15:25,246
SPEAKER_0:  safe version of all kinds of...

02:15:25,922 --> 02:15:28,446
SPEAKER_0:  cool new operating system toys.

02:15:28,898 --> 02:15:31,326
SPEAKER_0:  to the Python programmer, like I remember.

02:15:33,378 --> 02:15:34,494
SPEAKER_0:  one or two years.

02:15:34,786 --> 02:15:40,094
SPEAKER_0:  Before threading, I had spent some time adding networking sockets.

02:15:41,506 --> 02:15:50,494
SPEAKER_0:  to Python and they were very literal translation of the networking sockets that were in the BSD operating system so Unix BSD.

02:15:51,522 --> 02:15:55,006
SPEAKER_0:  But the nice thing was if you're using sockets from Python...

02:15:55,554 --> 02:16:05,406
SPEAKER_0:  then all the things you can do wrong with sockets in C would automatically give you a clear error message instead of just ending up with a malfunctioning hanging program.

02:16:06,338 --> 02:16:09,246
SPEAKER_0:  And so we thought, well, we'll do the same thing with threading.

02:16:10,242 --> 02:16:14,846
SPEAKER_0:  But we didn't really want to rewrite the interpreter.

02:16:15,746 --> 02:16:18,878
SPEAKER_0:  to be thread safe because that was...

02:16:19,586 --> 02:16:20,286
SPEAKER_0:  bus like.

02:16:21,314 --> 02:16:27,070
SPEAKER_0:  That would be a very complex refactoring of all the interpreter code and all the runtime code.

02:16:27,554 --> 02:16:31,070
SPEAKER_0:  because all the objects were written with the assumption that there's only one.

02:16:32,354 --> 02:16:34,334
SPEAKER_0:  And so we said, okay, well.

02:16:34,786 --> 02:16:36,798
SPEAKER_0:  We'll take our losses, we'll provide...

02:16:37,026 --> 02:16:39,198
SPEAKER_0:  something that looks like threads.

02:16:39,906 --> 02:16:45,406
SPEAKER_0:  And as long as you only have a single CPU on your computer, which most computers at the time did.

02:16:46,178 --> 02:16:46,718
SPEAKER_0:  Uh...

02:16:47,074 --> 02:16:49,150
SPEAKER_0:  It feels just like threads because...

02:16:50,786 --> 02:17:00,638
SPEAKER_0:  The whole idea of multiple threads in the OS was that even if your computer only had one CPU you could still fire up as many threads as you wanted.

02:17:01,058 --> 02:17:04,254
SPEAKER_0:  Well, within reason, maybe 10 or 12, not 5000.

02:17:05,890 --> 02:17:07,070
SPEAKER_0:  And so

02:17:07,394 --> 02:17:09,694
SPEAKER_0:  we thought we had conquered the

02:17:11,490 --> 02:17:15,326
SPEAKER_0:  the abstraction of threads pretty well because multi.

02:17:15,970 --> 02:17:19,294
SPEAKER_0:  core CPUs were not in.

02:17:19,682 --> 02:17:22,046
SPEAKER_0:  in most Python programmers' hands anyway.

02:17:22,914 --> 02:17:30,718
SPEAKER_0:  And then of course, a couple of more iterations of Moore's Law and the computer is getting faster and at some point...

02:17:31,650 --> 02:17:32,414
SPEAKER_0:  Uh...

02:17:33,122 --> 02:17:33,534
SPEAKER_0:  Duh.

02:17:33,794 --> 02:17:35,966
SPEAKER_0:  Chip designers decided that they...

02:17:36,386 --> 02:17:43,198
SPEAKER_0:  couldn't make the CPUs faster but they could still make them smaller and so they could put multiple CPUs on one chip.

02:17:43,842 --> 02:17:46,078
SPEAKER_0:  And suddenly there was all this pressure.

02:17:46,562 --> 02:17:47,198
SPEAKER_0:  about.

02:17:47,970 --> 02:17:50,846
SPEAKER_0:  do things in parallel and that's where the

02:17:51,202 --> 02:17:53,598
SPEAKER_0:  the solution we had in Python didn't work.

02:17:55,394 --> 02:17:59,166
SPEAKER_0:  And that's sort of the moment that the gill became...

02:17:59,938 --> 02:18:01,150
SPEAKER_0:  became infamous.

02:18:01,698 --> 02:18:05,150
SPEAKER_0:  Because the guilt was the solution we used to sort of...

02:18:07,202 --> 02:18:14,174
SPEAKER_0:  take this single interpreter and share it between all the different operating system traps that you could create.

02:18:14,978 --> 02:18:16,478
SPEAKER_0:  And so as long as the...

02:18:17,154 --> 02:18:20,670
SPEAKER_0:  Hardware physically only had one CPU, that was all fine.

02:18:21,634 --> 02:18:22,942
SPEAKER_0:  and then S.

02:18:23,458 --> 02:18:27,198
SPEAKER_0:  hardware vendors were suddenly telling us all, oh you gotta paralyze.

02:18:27,586 --> 02:18:29,438
SPEAKER_0:  Everything's gotta be paralyzed.

02:18:30,114 --> 02:18:31,774
SPEAKER_0:  people started saying, oh.

02:18:32,002 --> 02:18:32,958
SPEAKER_0:  Uh, but...

02:18:33,378 --> 02:18:41,607
SPEAKER_0:  We can use multiple threads in Python and then they discovered, oh, but actually all threads run on a single core.

02:18:41,607 --> 02:18:42,110
SPEAKER_1:  Yeah.

02:18:42,658 --> 02:18:43,902
SPEAKER_1:  I mean, is there a way...

02:18:44,194 --> 02:18:46,910
SPEAKER_1:  Is there ideas in the future to remove?

02:18:47,586 --> 02:18:49,150
SPEAKER_1:  the global interpreter log Gil.

02:18:49,570 --> 02:18:52,030
SPEAKER_1:  like maybe multiple sub interpreters.

02:18:52,322 --> 02:18:53,214
SPEAKER_1:  Some tricky.

02:18:54,498 --> 02:18:57,123
SPEAKER_1:  interpreters on top of interpreters kind of.

02:18:57,123 --> 02:18:59,550
SPEAKER_0:  Yeah, there are a couple of...

02:19:00,066 --> 02:19:02,302
SPEAKER_0:  possible futures there.

02:19:02,882 --> 02:19:03,262
SPEAKER_0:

02:19:04,098 --> 02:19:08,478
SPEAKER_0:  The most likely future is that we'll get multiple sub-interpreters.

02:19:09,442 --> 02:19:13,790
SPEAKER_0:  which each run a completely independent Python program.

02:19:14,082 --> 02:19:18,302
SPEAKER_0:  Nice. But there there's still some benefit of

02:19:19,234 --> 02:19:20,126
SPEAKER_0:  of Surtuf.

02:19:20,610 --> 02:19:23,166
SPEAKER_0:  faster communication between

02:19:23,906 --> 02:19:27,358
SPEAKER_1:  those programs. But it's also managing for you this.

02:19:27,810 --> 02:19:29,886
SPEAKER_1:  running on multiple Python programs.

02:19:30,594 --> 02:19:33,310
SPEAKER_1:  Yeah, so it's hidden from you, right?

02:19:33,570 --> 02:19:40,158
SPEAKER_0:  It's hidden from you, but you have to spend more time communicating between those programs, because this sort of-

02:19:41,154 --> 02:19:42,302
SPEAKER_0:  The attractive.

02:19:43,010 --> 02:19:48,414
SPEAKER_0:  thing about the multi-threaded model is that the threads can share objects.

02:19:48,866 --> 02:19:53,342
SPEAKER_0:  At the same time, that's also the downfall of the multithreaded programming model.

02:19:53,954 --> 02:19:56,830
SPEAKER_0:  because when you do, share objects.

02:19:57,474 --> 02:20:01,950
SPEAKER_0:  you weren't and you didn't necessarily intend to share them or.

02:20:02,274 --> 02:20:05,310
SPEAKER_0:  There were aspects of those objects that

02:20:06,722 --> 02:20:11,102
SPEAKER_0:  were not reusable, you get all kinds of concurrency bugs.

02:20:11,554 --> 02:20:12,254
SPEAKER_0:  And so.

02:20:13,730 --> 02:20:17,598
SPEAKER_0:  The reason I wrote that little blog post about semaphores was that

02:20:18,114 --> 02:20:20,158
SPEAKER_0:  concurrency bugs are just harder.

02:20:21,442 --> 02:20:23,390
SPEAKER_0:  It would be nice if Python had

02:20:23,682 --> 02:20:28,382
SPEAKER_0:  No global interpreter lock and it had so-called free threading.

02:20:30,210 --> 02:20:34,206
SPEAKER_0:  but it would also cause a lot more software bugs.

02:20:35,362 --> 02:20:45,502
SPEAKER_0:  The interesting thing is that there is still a possible future where we are actually going to or where we could experiment at least with that.

02:20:46,338 --> 02:20:48,094
SPEAKER_0:  because there is a...

02:20:48,898 --> 02:20:50,974
SPEAKER_0:  Guy working for Facebook.

02:20:51,362 --> 02:20:54,430
SPEAKER_0:  who has developed a fork of CPython.

02:20:55,362 --> 02:20:55,838
SPEAKER_0:  that.

02:20:56,290 --> 02:20:58,046
SPEAKER_0:  he called the no-gill.

02:20:58,786 --> 02:20:59,710
SPEAKER_0:  interpreter.

02:20:59,938 --> 02:21:01,470
SPEAKER_0:  where he removed the gill.

02:21:01,762 --> 02:21:09,278
SPEAKER_0:  and made a whole bunch of optimizations so that the single threaded case doesn't run too much slower.

02:21:10,242 --> 02:21:15,614
SPEAKER_0:  and multi-threaded case will actually use all the cores that you have.

02:21:17,698 --> 02:21:22,014
SPEAKER_0:  And so that would be an interesting possibility.

02:21:22,786 --> 02:21:24,062
SPEAKER_0:  If we...

02:21:24,450 --> 02:21:26,558
SPEAKER_0:  would be willing as a

02:21:27,170 --> 02:21:29,374
SPEAKER_0:  Python Core developers to actually.

02:21:30,882 --> 02:21:34,398
SPEAKER_0:  uh... maintain that code indefinitely

02:21:34,946 --> 02:21:37,598
SPEAKER_0:  And if we're willing to put up with the...

02:21:37,858 --> 02:21:45,438
SPEAKER_0:  additional complexity of the interpreter and the additional sort of overhead for the single threaded case and

02:21:45,954 --> 02:21:47,838
SPEAKER_0:  I'm personally not convinced.

02:21:48,546 --> 02:21:49,022
SPEAKER_0:  That's.

02:21:51,810 --> 02:21:53,662
SPEAKER_0:  There are enough people.

02:21:54,562 --> 02:21:56,190
SPEAKER_0:  uh, kneading.

02:21:56,706 --> 02:21:58,782
SPEAKER_0:  the speed of multiple threads.

02:21:59,746 --> 02:22:01,598
SPEAKER_0:  with their Python programs.

02:22:02,690 --> 02:22:04,542
SPEAKER_0:  that it's worth to sort of.

02:22:05,378 --> 02:22:08,478
SPEAKER_0:  take that performance hit and that complexity hit.

02:22:09,250 --> 02:22:13,150
SPEAKER_0:  And I feel that the gill actually is pretty nice.

02:22:13,730 --> 02:22:19,518
SPEAKER_0:  Goldilocks point between no threads and all threads all the time.

02:22:19,970 --> 02:22:22,174
SPEAKER_0:  But not everybody agrees on that, so...

02:22:22,562 --> 02:22:26,462
SPEAKER_0:  that is definitely a possible future. What do sub-interpreters look like?

02:22:26,850 --> 02:22:29,630
SPEAKER_0:  a fairly safe bet for 312, so...

02:22:30,242 --> 02:22:31,390
SPEAKER_0:  say a year from now.

02:22:32,130 --> 02:22:34,942
SPEAKER_1:  year so the goal is to do a new version every year.

02:22:35,586 --> 02:22:36,446
SPEAKER_1:  for Python.

02:22:36,866 --> 02:22:39,294
SPEAKER_1:  Let me ask you perhaps a fun question but-

02:22:39,746 --> 02:22:41,886
SPEAKER_1:  There's a philosophy to it too.

02:22:42,434 --> 02:22:45,150
SPEAKER_1:  Will there ever be a Python 4.0?

02:22:45,666 --> 02:22:45,982
SPEAKER_1:  Now.

02:22:46,338 --> 02:22:48,350
SPEAKER_1:  Before you say, it's currently a joke.

02:22:48,610 --> 02:22:49,790
SPEAKER_1:  and probably not.

02:22:50,018 --> 02:22:52,062
SPEAKER_1:  So we're gonna go to 3.99.

02:22:52,482 --> 02:22:55,070
SPEAKER_1:  or 3.9999.

02:22:56,386 --> 02:22:59,230
SPEAKER_1:  Can you imagine possible features?

02:23:00,642 --> 02:23:03,102
SPEAKER_1:  that Python 4.0 might have.

02:23:03,458 --> 02:23:04,094
SPEAKER_1:  that would.

02:23:04,834 --> 02:23:06,974
SPEAKER_1:  and necessitate the creation.

02:23:07,266 --> 02:23:08,830
SPEAKER_1:  of the new 4.0.

02:23:09,474 --> 02:23:10,654
SPEAKER_1:  given the amount of

02:23:11,490 --> 02:23:12,926
SPEAKER_1:  Pain and Joy.

02:23:13,378 --> 02:23:17,246
SPEAKER_1:  suffering and triumph that was involved in the move between.

02:23:17,730 --> 02:23:19,198
SPEAKER_1:  Version 2 and version 3.

02:23:21,250 --> 02:23:22,686
SPEAKER_0:  Yeah, well worked.

02:23:23,330 --> 02:23:23,742
SPEAKER_0:  We.

02:23:25,186 --> 02:23:31,774
SPEAKER_0:  As a community and as a core development team, we have a large amount of

02:23:32,450 --> 02:23:36,574
SPEAKER_0:  painful memories about the Python 3 transition.

02:23:38,242 --> 02:23:41,118
SPEAKER_0:  which is one reason that sort of...

02:23:41,922 --> 02:23:44,574
SPEAKER_0:  Everybody is happy that we've decided.

02:23:45,090 --> 02:23:47,902
SPEAKER_0:  There's not going to be a 4.0 at least.

02:23:48,610 --> 02:23:56,510
SPEAKER_0:  not anytime soon and if there is going to be one that will sort of plan the transition very differently.

02:23:56,898 --> 02:23:59,070
SPEAKER_0:  because clearly we underestimated...

02:23:59,458 --> 02:24:01,086
SPEAKER_0:  the pain, the transition.

02:24:01,730 --> 02:24:04,894
SPEAKER_0:  caused for our users in the Python 3 case.

02:24:05,762 --> 02:24:06,366
SPEAKER_0:  and

02:24:08,034 --> 02:24:10,110
SPEAKER_0:  had we known we could have

02:24:10,370 --> 02:24:11,614
SPEAKER_0:  sort of designed.

02:24:12,226 --> 02:24:16,638
SPEAKER_0:  Python 3 somewhat differently without making it any worse.

02:24:17,730 --> 02:24:18,334
SPEAKER_0:  We just.

02:24:18,594 --> 02:24:20,670
SPEAKER_0:  thought that we had a good plan but we

02:24:20,930 --> 02:24:22,974
SPEAKER_0:  We underestimated where.

02:24:23,714 --> 02:24:24,766
SPEAKER_0:  But what sort of...

02:24:25,026 --> 02:24:28,629
SPEAKER_0:  the users were capable of when it comes to that kind of transition.

02:24:28,629 --> 02:24:30,270
SPEAKER_1:  By the way, I think we talked.

02:24:31,426 --> 02:24:34,142
SPEAKER_1:  way before, like a year and a half before.

02:24:34,914 --> 02:24:37,054
SPEAKER_1:  the Python 2 officially.

02:24:37,858 --> 02:24:40,190
SPEAKER_1:  End of life. End of life. End of life.

02:24:41,058 --> 02:24:46,398
SPEAKER_1:  What was that? What was your memory of the end of life? Did you shed a tear on January 1st, 2020?

02:24:46,818 --> 02:24:47,550
SPEAKER_1:  It was there.

02:24:47,970 --> 02:24:49,095
SPEAKER_1:  Everyone

02:24:49,095 --> 02:24:53,118
SPEAKER_0:  The core team had basically moved on years before.

02:24:53,954 --> 02:24:58,014
SPEAKER_0:  It was purely, it was a little symbolic moment.

02:24:59,202 --> 02:25:03,294
SPEAKER_0:  uh... to signal to the the remaining users

02:25:03,778 --> 02:25:04,158
SPEAKER_0:  that.

02:25:06,434 --> 02:25:08,126
SPEAKER_0:  There was no longer going to

02:25:08,482 --> 02:25:12,670
SPEAKER_0:  be any new releases or support for Python 2.7.

02:25:14,530 --> 02:25:18,750
SPEAKER_1:  Did you shed a single tear while looking out over the horizon?

02:25:19,042 --> 02:25:24,350
SPEAKER_0:  I'm not a very poetic person and I don't shed tears like that, but no.

02:25:26,786 --> 02:25:37,854
SPEAKER_0:  We actually had planned a party, but the party was planned for the US Python conference that year, which would never happen, of course, because of the pandemic.

02:25:38,082 --> 02:25:44,574
SPEAKER_0:  Oh, was it like in March? It was 20. The conference was going to be, I think, late April that year.

02:25:44,898 --> 02:25:45,214
SPEAKER_1:  out

02:25:46,050 --> 02:25:47,175
SPEAKER_1:  So that was a...

02:25:47,175 --> 02:25:49,438
SPEAKER_0:  It's a very difficult decision to cancel it, but...

02:25:51,266 --> 02:25:58,462
SPEAKER_0:  They did. Anyway, if we're going to have a Python four, we're going to have to have both a different reason for.

02:25:59,074 --> 02:26:00,158
SPEAKER_0:  for having that.

02:26:00,898 --> 02:26:04,273
SPEAKER_0:  and a different process for managing the transition.

02:26:04,273 --> 02:26:06,174
SPEAKER_1:  Can you imagine a possible process?

02:26:06,786 --> 02:26:07,934
SPEAKER_1:  that so.

02:26:08,322 --> 02:26:12,894
SPEAKER_1:  So I think you're implying that if there's a 4.0 in some ways it would break.

02:26:13,250 --> 02:26:14,654
SPEAKER_1:  back compatibility.

02:26:14,946 --> 02:26:16,190
SPEAKER_0:  Well, so...

02:26:17,442 --> 02:26:20,382
SPEAKER_0:  Here is a concrete thought I've had.

02:26:20,706 --> 02:26:23,230
SPEAKER_0:  And I'm not unique, but not everyone agrees.

02:26:23,490 --> 02:26:26,238
SPEAKER_0:  with this, so this is definitely a personal opinion.

02:26:27,490 --> 02:26:30,014
SPEAKER_0:  If we were to try something...

02:26:30,434 --> 02:26:32,478
SPEAKER_0:  like that no-gill python?

02:26:33,506 --> 02:26:34,078
SPEAKER_0:  Uh...

02:26:35,682 --> 02:26:38,270
SPEAKER_0:  My expectation is that...

02:26:39,906 --> 02:26:40,990
SPEAKER_0:  It would feel...

02:26:41,858 --> 02:26:42,526
SPEAKER_0:  Just

02:26:42,754 --> 02:26:43,838
SPEAKER_0:  Different enough.

02:26:45,794 --> 02:26:50,014
SPEAKER_0:  at least for the part of the Python ecosystem that...

02:26:50,850 --> 02:26:53,982
SPEAKER_0:  is heavily based on C extensions.

02:26:54,850 --> 02:27:00,862
SPEAKER_0:  And that is like the entire machine learning data science scientific Python.

02:27:01,474 --> 02:27:05,630
SPEAKER_0:  World is all based on C extensions for Python.

02:27:06,530 --> 02:27:07,230
SPEAKER_0:  And so.

02:27:08,610 --> 02:27:12,254
SPEAKER_0:  Those people would likely feel the pain.

02:27:13,090 --> 02:27:14,110
SPEAKER_0:  the most.

02:27:14,946 --> 02:27:15,966
SPEAKER_0:  Because they-

02:27:17,058 --> 02:27:19,070
SPEAKER_0:  even if we don't change.

02:27:19,330 --> 02:27:24,862
SPEAKER_0:  Anything about the syntax of the language and the semantics of the language when you're writing Python code

02:27:25,346 --> 02:27:33,086
SPEAKER_0:  We could even say, suppose that after Python, say, 3.19 instead of 3.20, we'll have 4.0.

02:27:33,442 --> 02:27:35,774
SPEAKER_0:  Suppose that's the time when we.

02:27:36,642 --> 02:27:40,222
SPEAKER_0:  Flip the switch to 4.0 will not have a gil.

02:27:41,090 --> 02:27:42,302
SPEAKER_0:  Imagine it was like that.

02:27:43,650 --> 02:27:44,094
SPEAKER_0:  So.

02:27:45,346 --> 02:27:46,974
SPEAKER_0:  I would probably say...

02:27:48,354 --> 02:27:54,558
SPEAKER_0:  That particular year, the release that we name 4.0 will be syntactically

02:27:54,914 --> 02:27:58,398
SPEAKER_0:  it will not have any new syntactical features.

02:27:58,850 --> 02:28:03,230
SPEAKER_0:  No new modules in the standard library, no new built-in functions.

02:28:04,482 --> 02:28:05,982
SPEAKER_0:  Everything will be.

02:28:06,434 --> 02:28:09,534
SPEAKER_0:  at the Python level will be purely compatible.

02:28:10,050 --> 02:28:11,806
SPEAKER_0:  with Python 3.19.

02:28:12,706 --> 02:28:13,374
SPEAKER_0:  However,

02:28:14,850 --> 02:28:16,638
SPEAKER_0:  Extension modules

02:28:17,474 --> 02:28:18,526
SPEAKER_0:  We'll have to.

02:28:18,850 --> 02:28:23,518
SPEAKER_0:  make a change. They will have to be recompiled. They will not have the same.

02:28:24,642 --> 02:28:25,470
SPEAKER_0:  Binary.

02:28:25,698 --> 02:28:26,718
SPEAKER_0:  interface.

02:28:27,810 --> 02:28:28,414
SPEAKER_0:  Uh...

02:28:29,378 --> 02:28:33,566
SPEAKER_0:  the semantics and APIs for some.

02:28:34,978 --> 02:28:39,454
SPEAKER_0:  things that are frequently accessed by C extensions will be different.

02:28:40,322 --> 02:28:41,086
SPEAKER_0:  And so.

02:28:41,538 --> 02:28:43,262
SPEAKER_0:  for a pure Python user.

02:28:44,290 --> 02:28:46,302
SPEAKER_0:  4.0 would be a breeze.

02:28:46,626 --> 02:28:54,942
SPEAKER_0:  except that there are very few pure Python users left because everybody who is using Python for something significant is using

02:28:55,618 --> 02:28:58,142
SPEAKER_0:  third party extensions there are like I don't know

02:28:58,626 --> 02:29:02,686
SPEAKER_0:  several hundreds of thousands of third party extensions on the

02:29:03,330 --> 02:29:05,662
SPEAKER_0:  the PyPI service.

02:29:06,338 --> 02:29:08,990
SPEAKER_0:  And I'm not saying they're all good, but...

02:29:09,410 --> 02:29:15,550
SPEAKER_0:  there is a large list of extensions that would have to do work. And some of those extensions are

02:29:16,098 --> 02:29:19,486
SPEAKER_0:  currently already low on maintainers.

02:29:20,098 --> 02:29:22,046
SPEAKER_0:  and they're struggling to work.

02:29:22,338 --> 02:29:23,198
SPEAKER_1:  Keep afloat.

02:29:23,810 --> 02:29:28,254
SPEAKER_1:  So there you can give a huge heads up to them if you go to 4.0.

02:29:28,610 --> 02:29:30,078
SPEAKER_1:  to really keep developing it.

02:29:30,498 --> 02:29:32,830
SPEAKER_0:  Yeah, we probably have to do something like.

02:29:34,946 --> 02:29:39,774
SPEAKER_0:  several years before, who knows, maybe five years earlier, like 3.15.

02:29:40,386 --> 02:29:41,630
SPEAKER_0:  we would have to say...

02:29:42,146 --> 02:29:47,454
SPEAKER_0:  and and i'm just making that that specific numbers up but we did at some point we have to say

02:29:49,634 --> 02:29:52,158
SPEAKER_0:  the Nogil Python could be an option.

02:29:53,058 --> 02:29:55,166
SPEAKER_0:  It might be a compile time option.

02:29:56,034 --> 02:29:56,542
SPEAKER_0:  Uh...

02:29:57,282 --> 02:29:58,046
SPEAKER_0:  If you want to.

02:29:58,690 --> 02:30:00,446
SPEAKER_0:  Use Nogil, Python.

02:30:00,898 --> 02:30:05,694
SPEAKER_0:  you have to recompile Python from source for your platform using your toolset.

02:30:06,402 --> 02:30:11,294
SPEAKER_0:  All you have to do is change one configuration variable, and then you just run make.

02:30:12,130 --> 02:30:14,910
SPEAKER_0:  or configure and make and it will build it for you.

02:30:15,810 --> 02:30:19,102
SPEAKER_0:  but now you also have to use the

02:30:19,330 --> 02:30:24,094
SPEAKER_0:  the no-gill compatible versions of all extension modules you want to use.

02:30:24,898 --> 02:30:29,662
SPEAKER_0:  And so as long as many extension modules don't have fully functional

02:30:31,138 --> 02:30:32,830
SPEAKER_0:  Sort of variants.

02:30:33,058 --> 02:30:35,134
SPEAKER_0:  that work in the no-gill world.

02:30:36,034 --> 02:30:40,830
SPEAKER_0:  That's not a very practical thing for Python users, but it would allow.

02:30:41,346 --> 02:30:43,038
SPEAKER_0:  Extension developers.

02:30:44,034 --> 02:30:45,630
SPEAKER_0:  to test the waters.

02:30:46,242 --> 02:30:48,894
SPEAKER_0:  see what they need to syntactically...

02:30:49,378 --> 02:30:52,222
SPEAKER_0:  to be able to compile it all maybe they're using.

02:30:53,506 --> 02:31:01,150
SPEAKER_0:  Functions that are defined by the Python 3 runtime that won't be in the Python 4 runtime, those functions will not work.

02:31:01,634 --> 02:31:03,038
SPEAKER_0:  Find an alternative.

02:31:04,066 --> 02:31:07,198
SPEAKER_0:  But they can experiment with that and sort of.

02:31:07,554 --> 02:31:11,646
SPEAKER_0:  write test applications and that would be a way to transition and that

02:31:12,098 --> 02:31:13,118
SPEAKER_0:  that could be...

02:31:13,442 --> 02:31:14,846
SPEAKER_0:  a series of

02:31:15,202 --> 02:31:16,734
SPEAKER_0:  releases where the

02:31:17,378 --> 02:31:21,406
SPEAKER_0:  Python 4 is more and more imminent. Uh, we-

02:31:22,018 --> 02:31:26,206
SPEAKER_0:  have supported more and more third-party extension modules to

02:31:26,978 --> 02:31:32,126
SPEAKER_0:  have solid support that works for No-Gill Python for that new API.

02:31:33,122 --> 02:31:33,726
SPEAKER_0:  Uh...

02:31:33,954 --> 02:31:34,686
SPEAKER_0:  and

02:31:35,266 --> 02:31:39,102
SPEAKER_0:  then sort of Python 4.0 is like.

02:31:39,554 --> 02:31:45,470
SPEAKER_0:  the official moment that the mayor comes out and cuts the ribbon and now Python.

02:31:45,826 --> 02:31:50,398
SPEAKER_0:  Now the sort of no-gill mode is the default and maybe the only mode there is.

02:31:51,842 --> 02:31:53,982
SPEAKER_1:  The internet wants to know from Reddit.

02:31:55,010 --> 02:31:55,838
SPEAKER_1:  Alright.

02:31:56,194 --> 02:32:00,190
SPEAKER_1:  It's a small and fun question. There's many fun questions, but...

02:32:00,706 --> 02:32:01,278
SPEAKER_1:  Uh...

02:32:01,794 --> 02:32:04,158
SPEAKER_1:  out of the PyPy packages.

02:32:04,418 --> 02:32:05,726
SPEAKER_1:  API packages.

02:32:06,210 --> 02:32:14,814
SPEAKER_1:  Uh, do you have, uh, do you have ones you like, do you, in your opinion, are there must have pi pi libraries or ones you use all the time constantly.

02:32:15,234 --> 02:32:16,126
SPEAKER_1:  Oh my.

02:32:18,210 --> 02:32:20,830
SPEAKER_0:  I should really have a standard answer for that question, but.

02:32:21,506 --> 02:32:29,438
SPEAKER_0:  like a positive standard answer, but my current standard answer is that I'm not a big user of third-party packages.

02:32:30,210 --> 02:32:32,958
SPEAKER_0:  When I write Python code, I'm usually...

02:32:33,282 --> 02:32:36,926
SPEAKER_0:  developing some tooling around building Python itself.

02:32:37,922 --> 02:32:49,118
SPEAKER_0:  And the last thing we want is dependencies on third-party packages. So I tend to just use the standard library. That's where your focus is. That's where you buy this.

02:32:50,402 --> 02:32:51,102
SPEAKER_1:  But you...

02:32:51,426 --> 02:32:54,302
SPEAKER_1:  Do you keep an eye on what's out there to understand?

02:32:54,626 --> 02:32:55,902
SPEAKER_1:  Where to stand the library?

02:32:56,386 --> 02:33:00,574
SPEAKER_1:  could be moving, should be moving. It's a good kind of landscape of what's.

02:33:01,154 --> 02:33:03,029
SPEAKER_1:  missing from the Santa library.

02:33:03,029 --> 02:33:07,038
SPEAKER_0:  Usually when something's missing from the standard library nowadays...

02:33:07,330 --> 02:33:07,870
SPEAKER_0:  Uh...

02:33:10,658 --> 02:33:13,438
SPEAKER_0:  is a relatively new idea.

02:33:13,986 --> 02:33:16,382
SPEAKER_0:  and there is a third party.

02:33:16,738 --> 02:33:22,462
SPEAKER_0:  implementation or maybe possibly multiple third party implementations but

02:33:23,074 --> 02:33:29,406
SPEAKER_0:  they evolve at a much higher rate than they could when they're in the standard library. So they, it would.

02:33:29,922 --> 02:33:30,910
SPEAKER_0:  be a big.

02:33:31,362 --> 02:33:34,590
SPEAKER_0:  reduction in in activity to

02:33:35,426 --> 02:33:42,846
SPEAKER_0:  incorporate things like that in the standard library. So I like that there is a lively package ecosystem and that sort of

02:33:43,266 --> 02:33:49,758
SPEAKER_0:  recent trends in the standard library are actually that we're doing the occasional spring cleaning where we're just

02:33:51,970 --> 02:33:52,638
SPEAKER_0:  We're

02:33:54,626 --> 02:33:56,030
SPEAKER_0:  choosing some

02:33:57,090 --> 02:34:00,638
SPEAKER_0:  modules that have not had a lot of change.

02:34:00,866 --> 02:34:02,750
SPEAKER_0:  in a long time and

02:34:03,682 --> 02:34:04,382
SPEAKER_0:  Maybe.

02:34:05,698 --> 02:34:11,422
SPEAKER_0:  would be better off not existing at all at this point because there might be a better third party

02:34:12,034 --> 02:34:19,486
SPEAKER_0:  alternative anyway and we're sort of slowly removing those that often those are things that I sort of

02:34:20,482 --> 02:34:24,478
SPEAKER_0:  I spiked somewhere in 1992 or 1993.

02:34:24,866 --> 02:34:29,598
SPEAKER_0:  If you look through the commit history, it's very sad.

02:34:30,722 --> 02:34:40,222
SPEAKER_0:  All cosmetic changes like changes in the indentation style or the name of this other standard library module got changed or...

02:34:40,642 --> 02:34:46,174
SPEAKER_0:  Nothing of any substance, the API is identical to what it was 20 years ago.

02:34:48,290 --> 02:34:50,014
SPEAKER_1:  So speaking of packages, they have a...

02:34:51,458 --> 02:34:53,822
SPEAKER_1:  a lot of impact on a lot of people's lives.

02:34:54,050 --> 02:34:56,382
SPEAKER_1:  Does it make sense to you why Python?

02:34:56,770 --> 02:35:00,606
SPEAKER_1:  has become the primary, the dominant language for the machine learning community.

02:35:00,994 --> 02:35:02,206
SPEAKER_1:  So packages like.

02:35:02,626 --> 02:35:04,126
SPEAKER_1:  PyTorch, TensorFlow.

02:35:04,418 --> 02:35:08,766
SPEAKER_1:  second learn and even like the lower level stuff like non-pi sci-pi pandas.

02:35:09,026 --> 02:35:10,718
SPEAKER_1:  I'm at Platte Lab with the visualization.

02:35:11,138 --> 02:35:11,870
SPEAKER_1:  Can you like?

02:35:12,418 --> 02:35:14,366
SPEAKER_1:  Does it make sense to you why it...

02:35:15,074 --> 02:35:15,710
SPEAKER_1:  Uhhh...

02:35:16,706 --> 02:35:20,382
SPEAKER_1:  permeated the entire data science machine learning AI community.

02:35:21,090 --> 02:35:21,726
SPEAKER_0:  Well, it's...

02:35:22,818 --> 02:35:25,822
SPEAKER_0:  Part of it is an effect that's as simple as.

02:35:26,562 --> 02:35:29,182
SPEAKER_0:  We're all driving on the right side of the road, right?

02:35:30,370 --> 02:35:30,846
SPEAKER_0:  Uh...

02:35:31,586 --> 02:35:32,766
SPEAKER_0:  It's compatibility.

02:35:33,730 --> 02:35:35,422
SPEAKER_0:  It's it's an end.

02:35:35,906 --> 02:35:37,310
SPEAKER_0:  and part of it is...

02:35:37,762 --> 02:35:38,366
SPEAKER_0:  Uh...

02:35:39,746 --> 02:35:41,790
SPEAKER_0:  Not- not quite as- as- as-

02:35:42,178 --> 02:35:48,414
SPEAKER_0:  fundamental as driving on the right side of the road, which you have to do for safety reasons. Agree on something.

02:35:49,602 --> 02:35:51,934
SPEAKER_0:  They could have picked JavaScript or Perl.

02:35:52,418 --> 02:35:56,926
SPEAKER_0:  There was a time in the early 2000s that it really looked like Pearl was.

02:35:57,218 --> 02:35:59,518
SPEAKER_0:  going to dominate like biosciences.

02:36:00,834 --> 02:36:08,478
SPEAKER_0:  because DNA search was all based on regular expressions and Pearl has the fastest and most comprehensive regular expression engine still does.

02:36:09,858 --> 02:36:13,310
SPEAKER_1:  I spent quite a long time with Pearl. That was another letting go.

02:36:14,050 --> 02:36:17,982
SPEAKER_1:  Letting go of this kind of data processing.

02:36:18,466 --> 02:36:18,942
SPEAKER_1:  system.

02:36:19,778 --> 02:36:21,854
SPEAKER_0:  The reasons why Python.

02:36:22,594 --> 02:36:24,894
SPEAKER_0:  became the lingua franca of

02:36:25,282 --> 02:36:26,142
SPEAKER_0:  The scientific.

02:36:26,530 --> 02:36:27,710
SPEAKER_0:  code and and

02:36:29,826 --> 02:36:32,158
SPEAKER_0:  machine learning in particular.

02:36:32,578 --> 02:36:33,566
SPEAKER_0:  and data science.

02:36:34,754 --> 02:36:37,310
SPEAKER_0:  it really had a lot to do with.

02:36:38,434 --> 02:36:41,374
SPEAKER_0:  anything was better than C or C++.

02:36:42,466 --> 02:36:48,062
SPEAKER_0:  Recently, a guy who worked at Lawrence Livermore National Laboratories in the

02:36:48,290 --> 02:36:49,022
SPEAKER_0:  the sort of...

02:36:49,570 --> 02:36:50,398
SPEAKER_0:  computing.

02:36:50,722 --> 02:36:51,454
SPEAKER_0:  Division.

02:36:52,866 --> 02:36:58,334
SPEAKER_0:  wrote me his memoirs and he had his own view of

02:36:58,946 --> 02:37:00,062
SPEAKER_0:  How he helped.

02:37:00,706 --> 02:37:04,990
SPEAKER_0:  something he called computational steering into existence.

02:37:06,274 --> 02:37:06,974
SPEAKER_0:  And...

02:37:07,202 --> 02:37:12,606
SPEAKER_0:  This was the idea that you take libraries that in his days were written in Fortran.

02:37:13,186 --> 02:37:17,086
SPEAKER_0:  that solve universal mathematical problems.

02:37:18,786 --> 02:37:21,310
SPEAKER_0:  uh... and those libraries still work but

02:37:21,570 --> 02:37:24,990
SPEAKER_0:  uh... the scientists that use the libraries

02:37:25,698 --> 02:37:28,478
SPEAKER_0:  Use them to solve continuously.

02:37:28,802 --> 02:37:29,598
SPEAKER_0:  different.

02:37:30,498 --> 02:37:34,206
SPEAKER_0:  specific applications and answer different questions.

02:37:34,818 --> 02:37:36,670
SPEAKER_0:  And so those poor scientists.

02:37:37,410 --> 02:37:37,950
SPEAKER_0:  Word.

02:37:38,882 --> 02:37:44,830
SPEAKER_0:  were required to use, say, Fortran, because Fortran was the language that...

02:37:45,154 --> 02:37:46,526
SPEAKER_0:  the library was written in.

02:37:47,202 --> 02:37:49,662
SPEAKER_0:  and then the scientist would have to write.

02:37:50,146 --> 02:37:53,278
SPEAKER_0:  an application that sort of uses the library.

02:37:53,602 --> 02:37:56,862
SPEAKER_0:  to solve a particular equation or set of.

02:37:57,794 --> 02:38:01,694
SPEAKER_0:  of answer a set of questions and the safer same for C++.

02:38:03,010 --> 02:38:10,558
SPEAKER_0:  because there's interoperability, so the dusty decks are written either in C++ or Fortran.

02:38:11,650 --> 02:38:12,126
SPEAKER_0:  Uh...

02:38:13,218 --> 02:38:15,838
SPEAKER_0:  And so Paul Dubois was one of the people who...

02:38:16,834 --> 02:38:18,622
SPEAKER_0:  I think in the mid 90s.

02:38:19,458 --> 02:38:20,510
SPEAKER_0:  saw that.

02:38:21,378 --> 02:38:24,030
SPEAKER_0:  you need a higher level language.

02:38:24,802 --> 02:38:26,110
SPEAKER_0:  for the scientists.

02:38:27,522 --> 02:38:29,694
SPEAKER_0:  to sort of tie together.

02:38:30,274 --> 02:38:34,622
SPEAKER_0:  the fundamental mathematical algorithms of linear algebra and

02:38:34,850 --> 02:38:35,774
SPEAKER_0:  and other stuff.

02:38:37,186 --> 02:38:37,950
SPEAKER_0:  And so.

02:38:39,234 --> 02:38:40,446
SPEAKER_0:  Gradually.

02:38:40,834 --> 02:38:45,406
SPEAKER_0:  some libraries started appearing that did very fundamental.

02:38:45,826 --> 02:38:48,510
SPEAKER_0:  stuffed with arrays of numbers in Python.

02:38:49,314 --> 02:38:49,630
SPEAKER_0:  I mean.

02:38:50,370 --> 02:38:58,494
SPEAKER_0:  When I first created Python, I was not expecting it to be used for arrays of numbers much. I thought that was like an outdated data type.

02:38:59,330 --> 02:39:04,286
SPEAKER_0:  and everything was like objects and strings and like Python was

02:39:04,514 --> 02:39:09,374
SPEAKER_0:  good and fast at string manipulation in objects obviously but arrays of numbers

02:39:09,954 --> 02:39:15,102
SPEAKER_0:  were not very efficient and the multidimensional arrays didn't even exist in the language at all.

02:39:16,770 --> 02:39:17,438
SPEAKER_0:  Uh...

02:39:17,794 --> 02:39:20,766
SPEAKER_0:  But there were people who realized that Python had.

02:39:21,122 --> 02:39:22,366
SPEAKER_0:  extensibility.

02:39:24,194 --> 02:39:26,494
SPEAKER_0:  that was flexible enough that they could.

02:39:27,234 --> 02:39:27,870
SPEAKER_0:  Right?

02:39:28,674 --> 02:39:29,694
SPEAKER_0:  Third party.

02:39:30,018 --> 02:39:35,518
SPEAKER_0:  packages that did support large arrays of numbers and operations on them very efficiently.

02:39:36,834 --> 02:39:39,134
SPEAKER_0:  and somehow they got a foothold.

02:39:39,778 --> 02:39:40,766
SPEAKER_0:  through sort of.

02:39:41,346 --> 02:39:41,854
SPEAKER_0:  different.

02:39:42,658 --> 02:39:51,742
SPEAKER_0:  parts of the scientific community, I remembered that the Hubble Space Telescope people in Baltimore were somehow big Python fans in the late 90s.

02:39:52,898 --> 02:39:53,310
SPEAKER_0:  and

02:39:53,538 --> 02:39:54,334
SPEAKER_0:  at various.

02:39:54,754 --> 02:39:55,422
SPEAKER_0:  points.

02:39:56,194 --> 02:39:59,486
SPEAKER_0:  small improvements were made and more people.

02:40:00,322 --> 02:40:04,734
SPEAKER_0:  got in touch with using Python to derive these libraries.

02:40:06,434 --> 02:40:08,158
SPEAKER_0:  interesting uh

02:40:08,578 --> 02:40:09,854
SPEAKER_0:  algorithms and

02:40:10,242 --> 02:40:16,830
SPEAKER_0:  like once once you have a bunch of scientists who are working on similar problems say they're all working on stuff that

02:40:17,474 --> 02:40:25,854
SPEAKER_0:  that come data that comes in from the Hubble Space Telescope but they're looking at different things some some are looking at stars in this galaxy the other are looking at

02:40:26,178 --> 02:40:28,606
SPEAKER_0:  galaxies. The math is completely different.

02:40:29,186 --> 02:40:30,174
SPEAKER_0:  the underlying.

02:40:31,138 --> 02:40:32,606
SPEAKER_0:  libraries are still the same.

02:40:33,538 --> 02:40:35,262
SPEAKER_0:  And so they exchange.

02:40:36,418 --> 02:40:43,198
SPEAKER_0:  code they say well I wrote this Python program or I wrote a Python library to solve this class of problems

02:40:44,066 --> 02:40:44,734
SPEAKER_0:  and

02:40:45,058 --> 02:40:51,806
SPEAKER_0:  The other guys either say, oh, I can use that library too. Or if you make a few changes, I can use that library too.

02:40:52,642 --> 02:40:54,878
SPEAKER_0:  Why start from scratch?

02:40:55,106 --> 02:40:56,798
SPEAKER_0:  in Perl or JavaScript.

02:40:57,538 --> 02:40:59,326
SPEAKER_0:  where there's not that infrastructure.

02:41:00,418 --> 02:41:04,222
SPEAKER_0:  for arrays of numbers yet where is in python you have it

02:41:04,802 --> 02:41:08,926
SPEAKER_0:  And so more and more scientists at different places doing different.

02:41:09,762 --> 02:41:10,814
SPEAKER_0:  different work.

02:41:11,618 --> 02:41:13,502
SPEAKER_0:  discovered Python and then

02:41:14,274 --> 02:41:22,462
SPEAKER_0:  Then people who had an idea for an important new fundamental library decided, oh, Python is actually.

02:41:22,914 --> 02:41:25,662
SPEAKER_0:  already known to our users, so...

02:41:26,434 --> 02:41:35,294
SPEAKER_0:  let's use Python as the user interface. I imagine at least that's how TensorFlow ended up with Python as the user interface.

02:41:36,258 --> 02:41:37,758
SPEAKER_0:  But with TensorFlow.

02:41:38,018 --> 02:41:38,750
SPEAKER_1:  There's a...

02:41:39,266 --> 02:41:40,254
SPEAKER_1:  deeper.

02:41:40,674 --> 02:41:44,894
SPEAKER_1:  History of what the communities, it's not just like what packages and needs.

02:41:45,154 --> 02:41:48,862
SPEAKER_1:  It's like what the community leans on for programming language.

02:41:49,186 --> 02:41:50,270
SPEAKER_1:  TensorFlow.

02:41:50,946 --> 02:41:54,782
SPEAKER_1:  I had a prior library that was internal to Google.

02:41:55,202 --> 02:41:56,638
SPEAKER_1:  but there's also competing.

02:41:56,994 --> 02:41:57,950
SPEAKER_1:  machine learning.

02:41:58,274 --> 02:41:59,998
SPEAKER_1:  frameworks like the piano.

02:42:00,642 --> 02:42:03,966
SPEAKER_1:  Cafe, they were in Python, there was some Scala.

02:42:04,962 --> 02:42:08,702
SPEAKER_1:  Um, some other languages, but Python was really dominating it.

02:42:09,698 --> 02:42:14,654
SPEAKER_1:  and it's interesting because there's other languages from the engineering space.

02:42:15,074 --> 02:42:15,774
SPEAKER_1:  MATLAB.

02:42:16,642 --> 02:42:18,078
SPEAKER_1:  that a lot of people use.

02:42:18,690 --> 02:42:19,070
SPEAKER_1:  but...

02:42:19,554 --> 02:42:23,614
SPEAKER_1:  different design choices by the company, by the core developers.

02:42:24,002 --> 02:42:25,086
SPEAKER_1:  led to it not.

02:42:25,442 --> 02:42:27,742
SPEAKER_1:  spreading and one of the choices of my lab.

02:42:28,770 --> 02:42:34,151
SPEAKER_1:  uh, by math works is to not make it open source, right? Or not, you know, having people.

02:42:34,151 --> 02:42:37,566
SPEAKER_0:  Hey, it was very expensive product and so.

02:42:37,922 --> 02:42:42,686
SPEAKER_0:  universities especially dislike it because it was a price per seat.

02:42:42,946 --> 02:42:44,222
SPEAKER_0:  I remember hearing.

02:42:45,186 --> 02:42:45,502
SPEAKER_0:  Yeah.

02:42:46,018 --> 02:42:47,774
SPEAKER_1:  I think that's not why it's.

02:42:48,002 --> 02:42:48,574
SPEAKER_1:  Failed.

02:42:48,930 --> 02:42:50,622
SPEAKER_1:  or a failed spread.

02:42:50,850 --> 02:42:54,238
SPEAKER_1:  I think the universities didn't like it, but they would still pay for it.

02:42:55,170 --> 02:42:59,390
SPEAKER_1:  The thing is it didn't feed into that GitHub open source.

02:43:00,162 --> 02:43:01,918
SPEAKER_1:  packages culture.

02:43:02,402 --> 02:43:05,918
SPEAKER_1:  So like and that's somehow a precondition for

02:43:06,626 --> 02:43:07,934
SPEAKER_1:  for viral spreading.

02:43:08,194 --> 02:43:10,558
SPEAKER_1:  The hacker culture, like the tinkerer culture.

02:43:11,202 --> 02:43:15,806
SPEAKER_1:  uh... the with with python it feels like you can build a package from scratch to solve a particular problem

02:43:16,194 --> 02:43:18,750
SPEAKER_1:  and get excited about sharing that package with others.

02:43:19,106 --> 02:43:20,981
SPEAKER_1:  and that creates an excitement.

02:43:20,981 --> 02:43:22,046
SPEAKER_0:  in a bottle language.

02:43:22,338 --> 02:43:26,974
SPEAKER_0:  I tend to like Python's approach to open source in particular because it's sort of

02:43:28,098 --> 02:43:29,886
SPEAKER_0:  It's almost egalitarian.

02:43:31,586 --> 02:43:34,462
SPEAKER_0:  There's little hierarchy.

02:43:34,978 --> 02:43:41,886
SPEAKER_0:  There's obviously some because you all need to decide whether you drive on the left or the right side of the road sometimes.

02:43:42,818 --> 02:43:44,222
SPEAKER_0:  but there is a lot of...

02:43:44,578 --> 02:43:52,382
SPEAKER_0:  access for people with little power. You don't have to work for a big tech company to make a difference in the Python world.

02:43:53,410 --> 02:43:55,134
SPEAKER_0:  Uh, we have.

02:43:55,586 --> 02:44:00,958
SPEAKER_0:  affordable events that really care about community and support people.

02:44:01,634 --> 02:44:02,270
SPEAKER_0:  and sort of.

02:44:02,658 --> 02:44:04,126
SPEAKER_0:  Community is is

02:44:04,994 --> 02:44:05,630
SPEAKER_0:  It's like.

02:44:06,402 --> 02:44:10,558
SPEAKER_0:  big deal at our conferences and in the PSF.

02:44:11,138 --> 02:44:14,878
SPEAKER_0:  When the PSF funds events, it's always about.

02:44:15,746 --> 02:44:17,118
SPEAKER_0:  growing the community.

02:44:17,954 --> 02:44:18,750
SPEAKER_0:  The PSF.

02:44:19,170 --> 02:44:21,470
SPEAKER_0:  funds very little development.

02:44:22,434 --> 02:44:22,782
SPEAKER_0:  date.

02:44:23,810 --> 02:44:27,998
SPEAKER_0:  They do some, but most of the money that the PSF...

02:44:28,674 --> 02:44:29,598
SPEAKER_0:  Forks out.

02:44:30,626 --> 02:44:32,862
SPEAKER_0:  uh... is to community

02:44:33,442 --> 02:44:34,718
SPEAKER_0:  fostering things.

02:44:35,682 --> 02:44:39,614
SPEAKER_1:  So speaking of egalitarian, last time we talked four years ago.

02:44:40,002 --> 02:44:42,750
SPEAKER_1:  It was just after you stepped down from your roll.

02:44:43,330 --> 02:44:46,814
SPEAKER_1:  as the benevolent dictator for life, BDFL.

02:44:47,330 --> 02:44:48,350
SPEAKER_1:  Looking back

02:44:48,642 --> 02:44:50,334
SPEAKER_1:  What are your insights and lessons?

02:44:51,074 --> 02:44:57,854
SPEAKER_1:  You learn from that experience about Python developer community, about human nature, about human civilization.

02:44:59,266 --> 02:45:00,158
SPEAKER_1:  life itself.

02:45:00,802 --> 02:45:01,822
SPEAKER_1:  Oh my.

02:45:02,370 --> 02:45:02,878
SPEAKER_1:  Uh...

02:45:04,130 --> 02:45:07,070
SPEAKER_0:  I probably held onto the position too long.

02:45:08,834 --> 02:45:10,750
SPEAKER_0:  I remember being just...

02:45:11,842 --> 02:45:14,398
SPEAKER_0:  extremely stressed for a long time.

02:45:16,098 --> 02:45:16,606
SPEAKER_0:  and

02:45:17,762 --> 02:45:19,742
SPEAKER_0:  It wasn't very clear to me.

02:45:20,962 --> 02:45:23,646
SPEAKER_0:  what was leading, what was causing the stress.

02:45:26,370 --> 02:45:27,838
SPEAKER_0:  and looking back.

02:45:28,738 --> 02:45:29,310
SPEAKER_0:  Uh...

02:45:31,074 --> 02:45:32,734
SPEAKER_0:  I should have sort of.

02:45:33,570 --> 02:45:34,782
SPEAKER_0:  relinquished.

02:45:35,330 --> 02:45:36,670
SPEAKER_0:  My central role.

02:45:37,378 --> 02:45:38,878
SPEAKER_0:  as BDFL sooner.

02:45:40,290 --> 02:45:42,590
SPEAKER_1:  What were the pros and cons of the BDFL roll?

02:45:42,978 --> 02:45:43,646
SPEAKER_1:  Like what were the-

02:45:43,938 --> 02:45:47,966
SPEAKER_1:  You not relinquishing it. What are the benefits of that for the community?

02:45:48,482 --> 02:45:50,142
SPEAKER_1:  and what are the drawbacks?

02:45:50,626 --> 02:45:51,166
SPEAKER_0:  Well, the-

02:45:51,394 --> 02:45:55,198
SPEAKER_0:  The benefits for the community would be things like...

02:45:56,354 --> 02:45:56,958
SPEAKER_0:  Uhhh

02:45:59,010 --> 02:46:02,462
SPEAKER_0:  clarity of vision and sort of

02:46:04,674 --> 02:46:06,654
SPEAKER_0:  clear direction because I

02:46:07,554 --> 02:46:09,694
SPEAKER_0:  I had certain ideas in...

02:46:10,018 --> 02:46:20,574
SPEAKER_0:  in mind when I created Python and while I sort of let myself be influenced by many other ideas as Python evolved and became.

02:46:22,082 --> 02:46:25,598
SPEAKER_0:  more successful and more complex and more.

02:46:26,306 --> 02:46:27,006
SPEAKER_0:  used.

02:46:27,746 --> 02:46:33,950
SPEAKER_0:  I also stuck to certain principles and it's still hard to say what are Python's core principles.

02:46:35,010 --> 02:46:35,422
SPEAKER_0:  But.

02:46:35,714 --> 02:46:36,766
SPEAKER_0:  The fact that...

02:46:37,218 --> 02:46:38,174
SPEAKER_0:  I was

02:46:38,882 --> 02:46:41,630
SPEAKER_0:  playing that role and sort of always...

02:46:42,082 --> 02:46:43,294
SPEAKER_0:  Very active.

02:46:44,130 --> 02:46:46,846
SPEAKER_0:  through the community in a certain way.

02:46:47,778 --> 02:46:48,862
SPEAKER_0:  It modeled.

02:46:49,250 --> 02:46:51,902
SPEAKER_0:  the community how to think about.

02:46:53,058 --> 02:46:55,678
SPEAKER_0:  How to solve a certain problem? Well...

02:46:56,706 --> 02:46:58,581
SPEAKER_1:  That was a source of stress, but it was also benefit.

02:46:58,581 --> 02:47:04,190
SPEAKER_0:  It was a source of stress for me personally, but it was beneficial for the community because

02:47:04,450 --> 02:47:04,926
SPEAKER_0:  Uh...

02:47:05,346 --> 02:47:06,942
SPEAKER_0:  People. People sort of.

02:47:07,842 --> 02:47:09,022
SPEAKER_0:  over time had.

02:47:09,890 --> 02:47:13,022
SPEAKER_0:  learned how I was thinking and could predict.

02:47:14,722 --> 02:47:21,214
SPEAKER_0:  but how I would decide about a particular issue. not always perfectly of course but there was like

02:47:22,914 --> 02:47:35,742
SPEAKER_0:  There wasn't a lot of jerking around like this year, we're all, but this year the Democrats are in power and we're doing these kinds of things and now the Republicans are in power and they roll all that back and do those kind of things.

02:47:36,674 --> 02:47:37,694
SPEAKER_0:  There is a clear.

02:47:38,562 --> 02:47:40,414
SPEAKER_0:  fairly straight path ahead.

02:47:41,218 --> 02:47:46,462
SPEAKER_0:  And so fortunately the successor structure with the steering console.

02:47:47,234 --> 02:47:48,478
SPEAKER_0:  has sort of.

02:47:49,090 --> 02:47:50,942
SPEAKER_0:  found a similar way of

02:47:51,778 --> 02:47:53,310
SPEAKER_0:  of leading the community.

02:47:53,986 --> 02:47:56,670
SPEAKER_0:  in a fairly steady direction without

02:47:56,930 --> 02:47:57,854
SPEAKER_0:  Stagnating.

02:47:58,498 --> 02:48:01,502
SPEAKER_0:  And for me personally, it's more fun because there are...

02:48:01,954 --> 02:48:03,454
SPEAKER_0:  There are things I can just ignore.

02:48:05,282 --> 02:48:07,454
SPEAKER_0:  Oh yeah, there's a bug in multiprocessing.

02:48:07,810 --> 02:48:10,974
SPEAKER_0:  Let someone else decide whether that's important to solve or not.

02:48:12,642 --> 02:48:18,142
SPEAKER_0:  I'll stick to typing in the async I.O. and the faster interpreter.

02:48:19,106 --> 02:48:21,054
SPEAKER_1:  It allows you to focus a little bit more. Yeah.

02:48:22,370 --> 02:48:22,942
SPEAKER_1:  Uh...

02:48:23,170 --> 02:48:30,366
SPEAKER_1:  What are interesting differences in culture if you can comment on between Google Dropbox and Microsoft from a Python programming perspective?

02:48:30,658 --> 02:48:33,598
SPEAKER_1:  all places you've been to, the positive.

02:48:34,434 --> 02:48:38,110
SPEAKER_1:  Is there a difference or is it just about people and there's?

02:48:38,754 --> 02:48:39,966
SPEAKER_1:  Great people everywhere.

02:48:40,258 --> 02:48:41,598
SPEAKER_1:  Or is there a culture differences?

02:48:43,170 --> 02:48:47,262
SPEAKER_0:  So Dropbox is much smaller than the other two in your list.

02:48:47,778 --> 02:48:48,734
SPEAKER_0:  Yeah. So-

02:48:49,154 --> 02:48:49,598
SPEAKER_0:  DUT.

02:48:50,914 --> 02:48:52,382
SPEAKER_0:  That is a big difference.

02:48:52,770 --> 02:48:56,414
SPEAKER_1:  the set of products they provide is narrower so they're more focused

02:48:57,026 --> 02:49:02,750
SPEAKER_0:  and yeah and and dropbox sort of at least during the time i was there

02:49:03,842 --> 02:49:06,142
SPEAKER_0:  had the tendency of sort of...

02:49:07,138 --> 02:49:08,542
SPEAKER_0:  Making a big plan.

02:49:09,122 --> 02:49:11,966
SPEAKER_0:  putting the whole company behind that plan for a year.

02:49:12,482 --> 02:49:15,678
SPEAKER_0:  and then evaluate and then suddenly find that.

02:49:17,698 --> 02:49:22,462
SPEAKER_0:  everything was wrong about the plan and then they had to do something completely different.

02:49:23,714 --> 02:49:25,054
SPEAKER_0:  So there was like...

02:49:25,858 --> 02:49:37,470
SPEAKER_0:  The annual engineering reorg was sort of an unpleasant tradition at Dropbox because like, oh, there's a new VP of engineering and so now all the directors are being reshuffled and

02:49:38,178 --> 02:49:39,934
SPEAKER_0:  This guy was in charge of.

02:49:41,378 --> 02:49:47,038
SPEAKER_0:  infrastructure one year and the next year he was made in charge of, I don't know, product development.

02:49:48,450 --> 02:49:51,838
SPEAKER_1:  It's fascinating because you don't think about these companies internally.

02:49:52,290 --> 02:49:56,350
SPEAKER_1:  But Dropbox to me from the very beginning was one of my favorite.

02:49:56,706 --> 02:50:00,094
SPEAKER_1:  services. There's certain like programs and online services that

02:50:01,218 --> 02:50:02,174
SPEAKER_1:  Make me happy.

02:50:02,402 --> 02:50:04,670
SPEAKER_1:  make me more efficient and all that kind of stuff, but.

02:50:05,090 --> 02:50:10,750
SPEAKER_1:  one of the powers of those kinds of services, they disappear. You're not supposed to think about how it all works.

02:50:10,978 --> 02:50:12,958
SPEAKER_1:  But it's incredible to me that you can sync.

02:50:13,378 --> 02:50:14,718
SPEAKER_1:  stuff effortlessly.

02:50:15,810 --> 02:50:17,438
SPEAKER_1:  across so many machines.

02:50:17,698 --> 02:50:18,526
SPEAKER_1:  so quickly.

02:50:19,202 --> 02:50:23,070
SPEAKER_1:  and don't have to worry about conflicts. They take care of the-

02:50:23,458 --> 02:50:24,798
SPEAKER_1:  you know, as a person that comes from.

02:50:25,282 --> 02:50:28,286
SPEAKER_1:  version repositories and all that kind of stuff or merge.

02:50:28,706 --> 02:50:30,334
SPEAKER_1:  is super difficult and.

02:50:30,914 --> 02:50:43,006
SPEAKER_1:  Just keeping different versions of different files is very tricky. The fact that they could take care of that is just, I don't know. The engineering behind the scenes must be super difficult, both on the computer infrastructure and the software.

02:50:43,522 --> 02:50:45,854
SPEAKER_0:  a lot of internal sort of.

02:50:46,306 --> 02:50:48,510
SPEAKER_0:  hand-wringing about things like that.

02:50:49,250 --> 02:50:49,982
SPEAKER_0:  but that's it.

02:50:50,434 --> 02:50:53,214
SPEAKER_0:  the product itself always worked very smoothly.

02:50:53,442 --> 02:50:54,270
SPEAKER_1:  Yeah.

02:50:54,594 --> 02:51:00,190
SPEAKER_1:  But there's probably a lot of lessons to that. You can have a lot of turmoil inside on the engineering side, but...

02:51:00,994 --> 02:51:06,590
SPEAKER_1:  If the product is good, the product is good. And maybe don't mess with that either, because you don't want it to be good.

02:51:07,778 --> 02:51:10,686
SPEAKER_1:  Keep it's like with Google focus on the search and the ads.

02:51:11,810 --> 02:51:14,206
SPEAKER_1:  And the money will come.

02:51:14,498 --> 02:51:17,246
SPEAKER_1:  and make sure that's done extremely well. And don't forget.

02:51:17,538 --> 02:51:19,358
SPEAKER_1:  what you do extremely well.

02:51:19,650 --> 02:51:21,374
SPEAKER_1:  In what ways do you provide?

02:51:21,730 --> 02:51:25,470
SPEAKER_1:  Value and happiness to the world. Make sure you do that well.

02:51:26,530 --> 02:51:29,438
SPEAKER_1:  Is there something else to say about Google and Microsoft?

02:51:29,730 --> 02:51:32,542
SPEAKER_1:  Microsoft has had a very fascinating shift recently.

02:51:33,026 --> 02:51:34,654
SPEAKER_1:  Within you see how.

02:51:34,914 --> 02:51:35,614
SPEAKER_1:  uh... what

02:51:35,970 --> 02:51:37,374
SPEAKER_1:  you know, recent CEO.

02:51:37,826 --> 02:51:39,166
SPEAKER_1:  with purchasing GitHub.

02:51:39,970 --> 02:51:44,382
SPEAKER_1:  embracing open source culture, embracing the developer culture. It's pretty interesting to see.

02:51:44,610 --> 02:51:46,654
SPEAKER_0:  That's like why I joined Microsoft.

02:51:47,682 --> 02:51:51,038
SPEAKER_0:  I mean, after retiring and thinking that I would.

02:51:51,682 --> 02:51:55,582
SPEAKER_0:  stay retired for the rest of my life, which of course was a ridiculous thought.

02:51:56,418 --> 02:51:57,342
SPEAKER_0:  I was

02:51:58,338 --> 02:52:04,478
SPEAKER_0:  I was done working for a bit and then the pandemic made me realize that work can also provide a

02:52:04,802 --> 02:52:06,206
SPEAKER_0:  a source of fulfillment.

02:52:07,426 --> 02:52:08,798
SPEAKER_0:  keep you out of trouble.

02:52:10,658 --> 02:52:15,614
SPEAKER_0:  Microsoft is a very interesting company because it has this in-

02:52:16,194 --> 02:52:16,958
SPEAKER_0:  God

02:52:17,634 --> 02:52:19,198
SPEAKER_0:  very long and

02:52:19,618 --> 02:52:20,798
SPEAKER_0:  varied history.

02:52:21,122 --> 02:52:25,566
SPEAKER_0:  and this amazing catalog of products that

02:52:25,794 --> 02:52:27,358
SPEAKER_0:  many of which also

02:52:27,970 --> 02:52:28,958
SPEAKER_0:  date way back.

02:52:29,986 --> 02:52:30,462
SPEAKER_0:  I mean...

02:52:32,994 --> 02:52:38,974
SPEAKER_0:  I've been talking to a bunch of Excel people lately, and Excel is like 35 years old.

02:52:39,906 --> 02:52:44,094
SPEAKER_0:  and they can still read spreadsheets that they might find.

02:52:44,866 --> 02:52:46,334
SPEAKER_1:  on an old floppy drive.

02:52:48,994 --> 02:52:52,286
SPEAKER_1:  Yeah, there's so many incredible tools through the years.

02:52:53,346 --> 02:52:55,422
SPEAKER_1:  Excel, one of the great.

02:52:56,034 --> 02:52:57,502
SPEAKER_1:  shames of my life.

02:52:58,370 --> 02:53:01,534
SPEAKER_1:  is that I've never learned how to use Excel well.

02:53:02,082 --> 02:53:05,022
SPEAKER_1:  I mean, it just always felt like so many features are there.

02:53:05,666 --> 02:53:07,934
SPEAKER_1:  It's similar with ADEs like PyCharm.

02:53:08,706 --> 02:53:13,854
SPEAKER_1:  It feels like I converge quickly to the dumbest way to use a thing to get the job done.

02:53:14,178 --> 02:53:17,022
SPEAKER_1:  when clearly there's so much more power in your fingertips.

02:53:18,626 --> 02:53:21,886
SPEAKER_1:  but I do think there's probably expert users of Excel.

02:53:22,242 --> 02:53:23,486
SPEAKER_1:  Oh...

02:53:23,874 --> 02:53:25,150
SPEAKER_1:  Excel is a cash cow.

02:53:26,018 --> 02:53:27,893
SPEAKER_1:  Oh, it actually brings in money.

02:53:27,893 --> 02:53:28,446
SPEAKER_0:  Oh yeah.

02:53:28,770 --> 02:53:30,398
SPEAKER_0:  a lot of the engineering.

02:53:31,042 --> 02:53:33,438
SPEAKER_0:  sort of if you look deep inside Excel.

02:53:34,530 --> 02:53:37,118
SPEAKER_0:  There's some very good engineering, very.

02:53:37,794 --> 02:53:38,974
SPEAKER_0:  Very impressive stuff.

02:53:39,778 --> 02:53:42,622
SPEAKER_1:  Okay, now I need to definitely learn Excel a little better.

02:53:42,946 --> 02:53:45,758
SPEAKER_1:  I had issues because I'm a keyboard person, so I...

02:53:46,178 --> 02:53:49,054
SPEAKER_1:  and issues coming up with shortcuts and Microsoft sometimes.

02:53:49,730 --> 02:53:55,454
SPEAKER_1:  It's changed over the years, but sometimes they kind of want to make things easier for you on the surface.

02:53:55,778 --> 02:53:56,542
SPEAKER_1:  And therefore...

02:53:57,026 --> 02:53:59,070
SPEAKER_1:  make it harder for like a

02:54:00,290 --> 02:54:03,102
SPEAKER_1:  people that like to have shortcuts and all that kind of stuff.

02:54:03,330 --> 02:54:04,702
SPEAKER_1:  to optimize their workflow.

02:54:05,122 --> 02:54:10,747
SPEAKER_1:  Now, people are probably yelling at me, it's like, no, Excel probably has a lot of ways to optimize work.

02:54:10,747 --> 02:54:17,726
SPEAKER_0:  In fact, I keep discovering that there are many features in Excel that only exists at keyboard.

02:54:19,714 --> 02:54:23,262
SPEAKER_1:  Yeah, that's the sense I have. Now, like I'm embarrassed that it's just.

02:54:23,554 --> 02:54:26,686
SPEAKER_0:  You just have to know what they are.

02:54:27,074 --> 02:54:28,510
SPEAKER_0:  There's no logic or-

02:54:29,474 --> 02:54:36,286
SPEAKER_0:  or reason to the assignment of the keyboard shortcuts because they go back even longer than 35 years.

02:54:37,218 --> 02:54:39,518
SPEAKER_1:  Can you maybe comment about such in a Della?

02:54:39,874 --> 02:54:43,230
SPEAKER_1:  and how hard it is for a CEO to sort of pivot a company.

02:54:43,554 --> 02:54:47,262
SPEAKER_1:  towards open source or developer culture? Is there something you could see about like,

02:54:47,970 --> 02:54:49,758
SPEAKER_1:  What's the role of leadership?

02:54:50,114 --> 02:54:51,102
SPEAKER_1:  in such a...

02:54:51,906 --> 02:54:53,566
SPEAKER_1:  Pivot and definition of a new vision.

02:54:54,146 --> 02:54:55,422
SPEAKER_1:  I've never met him.

02:54:55,554 --> 02:54:55,966
SPEAKER_0:  But.

02:54:56,450 --> 02:54:57,150
SPEAKER_0:  Uh...

02:54:57,730 --> 02:54:58,494
SPEAKER_0:  I hear...

02:54:59,714 --> 02:55:01,246
SPEAKER_0:  He's just a really...

02:55:01,794 --> 02:55:02,270
SPEAKER_0:  sharp.

02:55:03,106 --> 02:55:03,582
SPEAKER_0:  Thinker.

02:55:05,122 --> 02:55:08,158
SPEAKER_0:  but he also has an incredible business sense.

02:55:09,026 --> 02:55:14,110
SPEAKER_0:  He took the organization that had very solid pieces, but that was also

02:55:15,426 --> 02:55:16,318
SPEAKER_0:  struggling.

02:55:17,378 --> 02:55:19,838
SPEAKER_0:  with all sorts of shameful things.

02:55:20,642 --> 02:55:22,846
SPEAKER_0:  Especially to Steve Ballmer time.

02:55:23,682 --> 02:55:28,446
SPEAKER_0:  I imagine in part through his personal charm and thinking and of course that

02:55:29,122 --> 02:55:30,366
SPEAKER_0:  The great trust that...

02:55:30,626 --> 02:55:33,694
SPEAKER_0:  that the rest of the leadership has in him. He managed to.

02:55:34,274 --> 02:55:37,022
SPEAKER_0:  really turn the company around and sort of

02:55:38,786 --> 02:55:42,686
SPEAKER_0:  change it from from openly hostile to open source.

02:55:43,490 --> 02:55:46,558
SPEAKER_0:  to actively embracing open source.

02:55:47,074 --> 02:55:51,006
SPEAKER_0:  And that doesn't mean that suddenly Excel is going to go open source.

02:55:51,490 --> 02:55:55,966
SPEAKER_0:  But that means that there's room for a product like VS Code, which is open source.

02:55:56,866 --> 02:55:58,366
SPEAKER_1:  Yeah, that's fascinating.

02:55:58,690 --> 02:56:02,590
SPEAKER_1:  gives me faith that large companies with good leadership can.

02:56:03,138 --> 02:56:06,846
SPEAKER_1:  grow, can expand, can change and pivot and so on and develop.

02:56:07,586 --> 02:56:10,206
SPEAKER_1:  It gets harder and harder as the company gets large.

02:56:11,010 --> 02:56:18,238
SPEAKER_1:  You wrote a blog post in response to a person looking for advice about whether with a CS degree to choose a 9 to 5 job.

02:56:18,882 --> 02:56:21,054
SPEAKER_1:  or to become an entrepreneur.

02:56:21,602 --> 02:56:22,558
SPEAKER_1:  That's an interesting question.

02:56:23,010 --> 02:56:25,854
SPEAKER_1:  If you just think from first principles right now.

02:56:26,274 --> 02:56:26,974
SPEAKER_1:  somebody.

02:56:27,298 --> 02:56:30,686
SPEAKER_1:  as took a few years in programming, has loved software engineering.

02:56:31,074 --> 02:56:31,998
SPEAKER_1:  in some sense.

02:56:32,450 --> 02:56:33,694
SPEAKER_1:  Creating Python is an

02:56:33,954 --> 02:56:35,326
SPEAKER_1:  entrepreneurial endeavor.

02:56:36,610 --> 02:56:38,590
SPEAKER_1:  That's a choice that a lot of people.

02:56:39,106 --> 02:56:41,598
SPEAKER_1:  that are good programmers have to make? What do I work for?

02:56:42,530 --> 02:56:45,310
SPEAKER_1:  a big company or do I create something new?

02:56:48,098 --> 02:56:52,030
SPEAKER_0:  Or you can work for a big company and create something new there.

02:56:53,378 --> 02:56:54,398
SPEAKER_1:  Oh, inside the...

02:56:54,562 --> 02:56:56,670
SPEAKER_0:  Yeah, I mean big companies.

02:56:57,378 --> 02:57:00,286
SPEAKER_0:  have individuals who create new stuff.

02:57:00,994 --> 02:57:03,422
SPEAKER_0:  that eventually grows big all the time.

02:57:04,226 --> 02:57:07,390
SPEAKER_1:  And if you're the person that creates a new thing, and you're the person that creates a new thing,

02:57:07,714 --> 02:57:09,982
SPEAKER_1:  you'll have a chance to move up quickly in the company.

02:57:10,402 --> 02:57:11,166
SPEAKER_1:  to run that thing.

02:57:12,482 --> 02:57:16,350
SPEAKER_0:  if that's your aspiration, but what can also happen is that.

02:57:17,410 --> 02:57:19,710
SPEAKER_0:  Someone is a brilliant engineer and...

02:57:20,066 --> 02:57:20,574
SPEAKER_0:  assertive.

02:57:21,506 --> 02:57:24,190
SPEAKER_0:  builds a great first version of a product.

02:57:25,634 --> 02:57:26,302
SPEAKER_0:  and

02:57:26,530 --> 02:57:28,446
SPEAKER_0:  has no aspirations.

02:57:29,122 --> 02:57:36,254
SPEAKER_0:  then become a manager and grow the team from five people to 20 people to a hundred people to a thousand people and

02:57:37,442 --> 02:57:40,734
SPEAKER_0:  be in charge of hiring and meetings and

02:57:41,186 --> 02:57:42,206
SPEAKER_0:  They move on to.

02:57:43,010 --> 02:57:48,286
SPEAKER_0:  inventing another crazy thing inside the same company or sometimes they

02:57:49,698 --> 02:57:54,110
SPEAKER_0:  they found a startup or they moved to a different grade.

02:57:54,562 --> 02:57:57,598
SPEAKER_0:  large or small company there's all sorts of models

02:57:58,594 --> 02:58:01,790
SPEAKER_0:  And sometimes people sort of do have this.

02:58:02,242 --> 02:58:05,918
SPEAKER_0:  whole trajectory from engineer buckling down.

02:58:06,338 --> 02:58:07,390
SPEAKER_0:  writing code.

02:58:08,514 --> 02:58:10,846
SPEAKER_0:  Not 9 to 5, but more like...

02:58:11,490 --> 02:58:12,734
SPEAKER_0:  Noon till midnight.

02:58:13,442 --> 02:58:14,718
SPEAKER_0:  Seven days a week.

02:58:15,874 --> 02:58:16,478
SPEAKER_0:  and

02:58:16,962 --> 02:58:19,518
SPEAKER_0:  Coming up with a product and sort of...

02:58:21,378 --> 02:58:25,150
SPEAKER_0:  staying in charge. I mean, if you take Drew Houston...

02:58:25,442 --> 02:58:26,782
SPEAKER_0:  Dropbox's founder.

02:58:27,298 --> 02:58:28,606
SPEAKER_0:  He is still the CEO.

02:58:30,114 --> 02:58:34,494
SPEAKER_0:  And at least when I was there, he had not checked out or anything. He was s-

02:58:35,266 --> 02:58:36,062
SPEAKER_0:  He was good.

02:58:36,386 --> 02:58:36,990
SPEAKER_0:  CEO.

02:58:37,666 --> 02:58:42,206
SPEAKER_0:  but he had started out as the technical inventor or co-inventor.

02:58:43,202 --> 02:58:44,862
SPEAKER_0:  And so he was someone who...

02:58:46,658 --> 02:58:54,846
SPEAKER_0:  I don't know if he always aspired that. I think when he was 16, he already started a company. So maybe, maybe he did, but he sort of...

02:58:56,034 --> 02:58:59,262
SPEAKER_0:  It turned out that he did have the...

02:58:59,906 --> 02:59:01,278
SPEAKER_0:  The personal sort of.

02:59:01,570 --> 02:59:02,654
SPEAKER_0:  skill set.

02:59:02,946 --> 02:59:06,910
SPEAKER_0:  needed to grow and stay on top and other people.

02:59:07,554 --> 02:59:08,094
SPEAKER_0:  Sort of.

02:59:09,186 --> 02:59:13,758
SPEAKER_0:  are brilliant engineers and horrible at management. I count myself.

02:59:14,210 --> 02:59:16,085
SPEAKER_0:  at least in the second category.

02:59:16,085 --> 02:59:22,206
SPEAKER_1:  So your first love and still your love is to be the quote-unquote individual contributor.

02:59:22,594 --> 02:59:23,454
SPEAKER_1:  to the programmer.

02:59:26,114 --> 02:59:28,062
SPEAKER_1:  Do you have advice for a?

02:59:28,386 --> 02:59:31,294
SPEAKER_1:  programming beginner on how to learn Python.

02:59:31,682 --> 02:59:32,414
SPEAKER_1:  the right way.

02:59:36,226 --> 02:59:37,598
SPEAKER_0:  Find something you-

02:59:37,890 --> 02:59:40,126
SPEAKER_0:  actually want to do.

02:59:40,482 --> 02:59:40,894
SPEAKER_0:  with it.

02:59:41,986 --> 02:59:42,846
SPEAKER_0:  If you say...

02:59:43,554 --> 02:59:45,630
SPEAKER_0:  I wanna learn skill X.

02:59:46,690 --> 02:59:48,478
SPEAKER_0:  That's not enough motivation.

02:59:48,930 --> 02:59:50,526
SPEAKER_0:  You need to pick something!

02:59:51,938 --> 02:59:57,630
SPEAKER_0:  and it can be a crazy problem you want to solve. It can be completely unrealistic.

03:00:01,250 --> 03:00:05,278
SPEAKER_0:  but something that challenges you into actually.

03:00:05,730 --> 03:00:06,686
SPEAKER_0:  Learning.

03:00:07,938 --> 03:00:10,174
SPEAKER_0:  coding in some language.

03:00:11,202 --> 03:00:18,046
SPEAKER_1:  And there are so many projects out there you can look for like that. That doesn't have to be some big ambitious thing. It could be writing a small bot.

03:00:18,530 --> 03:00:22,206
SPEAKER_1:  If you're into social media, you can write a Reddit bot or a Twitter bot or...

03:00:22,850 --> 03:00:23,262
SPEAKER_1:  Uh...

03:00:23,490 --> 03:00:28,382
SPEAKER_1:  or some aspect of automating something that you do every single day.

03:00:28,706 --> 03:00:30,581
SPEAKER_1:  processing files all that kind of stuff

03:00:30,581 --> 03:00:33,182
SPEAKER_0:  Nowadays you can take machine learning.

03:00:33,410 --> 03:00:35,422
SPEAKER_0:  opponents and sort of

03:00:36,386 --> 03:00:37,950
SPEAKER_0:  plug those things together.

03:00:38,914 --> 03:00:40,789
SPEAKER_0:  So cool stuff with them.

03:00:40,789 --> 03:00:45,182
SPEAKER_1:  a good really good example. So if you're interested in machine learning, the state of machine learning is such.

03:00:45,762 --> 03:00:46,078
SPEAKER_1:  that.

03:00:46,434 --> 03:00:46,814
SPEAKER_1:  Like a-

03:00:47,202 --> 03:00:48,990
SPEAKER_1:  a tutorial that takes an hour.

03:00:49,474 --> 03:00:51,422
SPEAKER_1:  can get you to start using.

03:00:51,714 --> 03:00:54,366
SPEAKER_1:  pre-trained models to do something super cool.

03:00:54,722 --> 03:01:01,278
SPEAKER_1:  And that's a good way to learn Python because you learn just enough to run this model and that's like a sneaky way to get get in there.

03:01:01,666 --> 03:01:02,430
SPEAKER_1:  to figure out.

03:01:02,850 --> 03:01:04,702
SPEAKER_1:  how to import stuff, how to...

03:01:05,378 --> 03:01:07,230
SPEAKER_1:  write basic IO.

03:01:07,874 --> 03:01:09,214
SPEAKER_1:  how to run functions.

03:01:09,858 --> 03:01:17,438
SPEAKER_1:  I'm not sure if it's the best way to learn the basics in Python, but it could be nice to just fall in love first and then figure out the basics, right?

03:01:17,634 --> 03:01:20,798
SPEAKER_0:  Yeah, you can't expect to learn Python.

03:01:21,346 --> 03:01:22,942
SPEAKER_0:  from a one hour video.

03:01:23,202 --> 03:01:25,438
SPEAKER_0:  I'm blanking out on the name of...

03:01:25,666 --> 03:01:26,814
SPEAKER_0:  of someone who...

03:01:28,770 --> 03:01:30,110
SPEAKER_0:  who wrote very...

03:01:30,370 --> 03:01:32,382
SPEAKER_0:  funny blog post where he said

03:01:33,282 --> 03:01:35,774
SPEAKER_0:  I see all these ads for things like...

03:01:36,738 --> 03:01:39,262
SPEAKER_0:  Learn Python in 10 days or so.

03:01:40,386 --> 03:01:41,246
SPEAKER_0:  And he said...

03:01:41,666 --> 03:01:44,862
SPEAKER_0:  The goal should be learn Python in 10 years.

03:01:45,314 --> 03:01:46,782
SPEAKER_1:  That's hilarious, but...

03:01:47,426 --> 03:01:48,926
SPEAKER_1:  I completely disagree with that.

03:01:49,218 --> 03:01:51,486
SPEAKER_1:  I think the criticism behind that is that...

03:01:52,322 --> 03:01:58,622
SPEAKER_1:  the the places just like the blog post from earlier, the places that tell you learn Python five minutes or ten minutes.

03:01:58,946 --> 03:02:02,321
SPEAKER_1:  They're actually usually really bad tutorials. So the thing is, I do.

03:02:02,321 --> 03:02:03,038
SPEAKER_0:  believe.

03:02:03,298 --> 03:02:05,310
SPEAKER_1:  that you can learn a thing.

03:02:06,690 --> 03:02:07,582
SPEAKER_1:  in an hour.

03:02:07,842 --> 03:02:09,310
SPEAKER_1:  to get some interesting.

03:02:09,762 --> 03:02:10,174
SPEAKER_1:  quick.

03:02:10,402 --> 03:02:11,838
SPEAKER_1:  Like, it hooks you.

03:02:12,226 --> 03:02:15,870
SPEAKER_1:  I mean, this, but it just takes a tremendous amount of skill to be that kind of educator.

03:02:16,098 --> 03:02:20,894
SPEAKER_1:  Richard Feynman was able to condense a lot of ideas in physics in a very short amount of time.

03:02:21,218 --> 03:02:25,022
SPEAKER_1:  but that takes a deep, deep understanding. So yes, of course, the actual

03:02:25,506 --> 03:02:26,430
SPEAKER_1:  I think the 10.

03:02:26,786 --> 03:02:29,566
SPEAKER_1:  the 10 years is about the experience.

03:02:29,826 --> 03:02:31,701
SPEAKER_1:  the pain along the way and there's something

03:02:31,701 --> 03:02:35,166
SPEAKER_0:  You have to practice. You can memorize the syntax.

03:02:37,090 --> 03:02:41,502
SPEAKER_0:  Well, I couldn't, but maybe maybe someone else can, but that doesn't make you a coder.

03:02:42,242 --> 03:02:42,590
SPEAKER_1:  Yeah.

03:02:42,914 --> 03:02:46,366
SPEAKER_1:  Actually, coding has changed in fascinating ways.

03:02:46,594 --> 03:02:51,454
SPEAKER_1:  So much of coding is copying and pasting from Stack Overflow and then adjusting.

03:02:52,290 --> 03:02:56,862
SPEAKER_1:  Which is another way of coding and I don't want to talk down to that kind of style of coding because.

03:02:57,186 --> 03:02:58,622
SPEAKER_1:  It's kind of nicely efficient.

03:02:58,722 --> 03:03:00,350
SPEAKER_0:  But you know where that is going?

03:03:01,410 --> 03:03:04,785
SPEAKER_0:  Code generation. No, seriously get up coke

03:03:04,785 --> 03:03:06,046
SPEAKER_1:  Yeah, copilot.

03:03:06,242 --> 03:03:10,078
SPEAKER_0:  I use it every day and it... Really? It writes...

03:03:10,754 --> 03:03:15,550
SPEAKER_0:  a lot of code for me, and usually it's slightly wrong, but it still saves me typing.

03:03:16,194 --> 03:03:17,982
SPEAKER_0:  because all I have to do is like.

03:03:18,402 --> 03:03:18,974
SPEAKER_0:  Change.

03:03:19,266 --> 03:03:24,286
SPEAKER_0:  one word in a line of text that otherwise it generated perfectly and like

03:03:24,962 --> 03:03:26,110
SPEAKER_0:  How many times?

03:03:26,626 --> 03:03:34,878
SPEAKER_0:  Are you looking for like, oh, what was I doing this morning? I was looking for a begin marker and I look at, we're looking for an end marker. And so.

03:03:35,554 --> 03:03:36,830
SPEAKER_0:  Begin is.

03:03:37,570 --> 03:03:39,454
SPEAKER_0:  Blah blah blah, search for...

03:03:40,034 --> 03:03:40,670
SPEAKER_0:  Begin!

03:03:41,154 --> 03:03:42,494
SPEAKER_0:  This is the begin token.

03:03:43,234 --> 03:03:45,982
SPEAKER_0:  And then the next line I type E.

03:03:46,562 --> 03:03:46,878
SPEAKER_0:  and it.

03:03:47,138 --> 03:03:47,582
SPEAKER_0:  It's.

03:03:48,066 --> 03:03:50,654
SPEAKER_0:  completes the whole line with end instead of begin.

03:03:51,234 --> 03:03:54,270
SPEAKER_0:  That's a very simple example. Sometimes it sort of...

03:03:55,106 --> 03:03:58,494
SPEAKER_0:  If I name my function right, it writes a 5 or 10 line function.

03:04:00,226 --> 03:04:01,822
SPEAKER_1:  and you know...

03:04:02,050 --> 03:04:03,070
SPEAKER_1:  Python enough.

03:04:03,970 --> 03:04:06,174
SPEAKER_1:  very quickly than detect the issues.

03:04:06,466 --> 03:04:08,341
SPEAKER_1:  So it becomes a really good demo.

03:04:08,341 --> 03:04:15,710
SPEAKER_0:  partner then. It doesn't save me a lot of thinking, but since I'm a poor typist, I'm very much appreciative of

03:04:16,162 --> 03:04:16,574
SPEAKER_0:  All the-

03:04:17,058 --> 03:04:18,974
SPEAKER_0:  all the typing it does for me.

03:04:19,970 --> 03:04:26,718
SPEAKER_0:  much better actually than the previous generation of suggestions that are also still built in VS code.

03:04:27,682 --> 03:04:29,854
SPEAKER_0:  Uh, where, when you hit like a dot.

03:04:31,554 --> 03:04:33,246
SPEAKER_0:  tries to guess what the...

03:04:33,474 --> 03:04:39,262
SPEAKER_0:  type is of the variable to the left of the dot and then it gives you a list of welcome

03:04:39,778 --> 03:04:44,510
SPEAKER_0:  what the attributes of that object are, but Copilot is much, much smoother than that.

03:04:44,674 --> 03:04:45,886
SPEAKER_1:  Well, it's fascinating to hear.

03:04:46,402 --> 03:04:48,766
SPEAKER_1:  that you use GitHub co-pilot.

03:04:49,122 --> 03:04:51,550
SPEAKER_1:  Do you think, do you worry about the future of that?

03:04:52,770 --> 03:04:53,598
SPEAKER_1:  to the...

03:04:54,050 --> 03:04:55,486
SPEAKER_1:  Automatic code generation.

03:04:56,514 --> 03:04:57,918
SPEAKER_1:  the increasing amount of

03:04:58,498 --> 03:05:00,990
SPEAKER_1:  that kind of capability our programmers.

03:05:01,826 --> 03:05:02,910
SPEAKER_1:  jobs threatened.

03:05:03,650 --> 03:05:05,525
SPEAKER_1:  or is there still a significant role for humans?

03:05:05,525 --> 03:05:09,310
SPEAKER_0:  Are programmers jobs threatened by the existence of Stack Overflow?

03:05:11,074 --> 03:05:12,094
SPEAKER_0:  I don't think so.

03:05:12,322 --> 03:05:14,558
SPEAKER_0:  It helps you take care of the boring stuff.

03:05:15,778 --> 03:05:17,150
SPEAKER_0:  You shouldn't try to...

03:05:17,442 --> 03:05:23,198
SPEAKER_0:  use it to do something that you have no way of understanding what you're doing yet.

03:05:24,226 --> 03:05:27,166
SPEAKER_0:  A tool like that is always best when...

03:05:28,002 --> 03:05:32,350
SPEAKER_0:  The question you're asking is, please remind me of how I do this.

03:05:32,994 --> 03:05:33,598
SPEAKER_0:  which I-

03:05:34,754 --> 03:05:37,374
SPEAKER_0:  I could do, I could look up how to do it.

03:05:38,114 --> 03:05:38,526
SPEAKER_0:  but.

03:05:39,266 --> 03:05:43,614
SPEAKER_0:  Right now I've forgotten whether the method is called foo or bar.

03:05:44,226 --> 03:05:44,830
SPEAKER_0:  or how you.

03:05:45,058 --> 03:05:52,190
SPEAKER_0:  What the shape of the API is, does it use a builder object or a constructor or a factory or?

03:05:54,114 --> 03:05:55,390
SPEAKER_0:  uh, something else.

03:05:55,810 --> 03:05:57,342
SPEAKER_0:  and what are the parameters.

03:05:57,826 --> 03:06:01,406
SPEAKER_0:  it serves that role, it's like a great assistant.

03:06:02,050 --> 03:06:03,614
SPEAKER_0:  but the creative work of.

03:06:04,130 --> 03:06:07,166
SPEAKER_0:  sort of deciding what you want the code to do.

03:06:07,522 --> 03:06:09,054
SPEAKER_0:  is totally yours.

03:06:10,402 --> 03:06:15,902
SPEAKER_1:  What do you think is the future of Python in the next 10, 20, 50 years, you look forward....

03:06:16,386 --> 03:06:18,654
SPEAKER_1:  You ever think about, you ever imagine a future?

03:06:19,522 --> 03:06:22,398
SPEAKER_1:  of human civilization while living inside the metaverse.

03:06:23,810 --> 03:06:24,670
SPEAKER_1:  on Mars.

03:06:25,602 --> 03:06:29,246
SPEAKER_1:  humanoid robots everywhere. What part does Python play in that?

03:06:30,370 --> 03:06:40,318
SPEAKER_0:  It'll eventually become sort of a legacy language that plays an important role, but that's that most people have never heard of. And, uh,

03:06:40,578 --> 03:06:42,398
SPEAKER_0:  don't need to know about just like.

03:06:43,266 --> 03:06:44,222
SPEAKER_0:  all kinds of

03:06:45,250 --> 03:06:47,390
SPEAKER_0:  basic structures in.

03:06:48,322 --> 03:06:50,910
SPEAKER_0:  biology like mitochondria.

03:06:52,066 --> 03:06:53,950
SPEAKER_1:  so it permeates all of life.

03:06:54,370 --> 03:06:55,710
SPEAKER_1:  all of digital life but...

03:06:55,970 --> 03:06:57,342
SPEAKER_1:  People just build on top of it.

03:06:57,634 --> 03:06:59,870
SPEAKER_1:  And they only know the stuff that's on top of it.

03:07:01,218 --> 03:07:03,518
SPEAKER_0:  You guys, you build layers of abstractions, I mean...

03:07:04,162 --> 03:07:06,046
SPEAKER_0:  Most programmers nowadays.

03:07:06,914 --> 03:07:08,126
SPEAKER_0:  rarely need to.

03:07:08,770 --> 03:07:10,718
SPEAKER_0:  do binary arithmetic, right?

03:07:13,474 --> 03:07:19,390
SPEAKER_1:  Yep, or even think about it or even learn about it, or they can go quite far without knowing.

03:07:19,810 --> 03:07:20,638
SPEAKER_0:  I started.

03:07:21,730 --> 03:07:28,734
SPEAKER_0:  building little digital circuits out of NAND gates that I built myself with transistors and resistors.

03:07:29,346 --> 03:07:30,238
SPEAKER_0:  So I sort of.

03:07:30,754 --> 03:07:32,766
SPEAKER_0:  I feel very blessed that

03:07:33,602 --> 03:07:36,126
SPEAKER_0:  with that start when I was a teenager.

03:07:37,314 --> 03:07:37,726
SPEAKER_0:  I-

03:07:38,306 --> 03:07:42,110
SPEAKER_0:  I learned some of the basic, at least concepts.

03:07:43,138 --> 03:07:45,694
SPEAKER_0:  that go into building a computer.

03:07:46,466 --> 03:07:48,254
SPEAKER_0:  And I sort of every.

03:07:48,482 --> 03:07:49,054
SPEAKER_0:  heart.

03:07:50,114 --> 03:07:51,934
SPEAKER_0:  I have some understanding what

03:07:53,762 --> 03:07:56,862
SPEAKER_0:  what it's for and why it's there and how it works.

03:07:57,506 --> 03:08:01,278
SPEAKER_0:  And I can forget about all that most of the time, but I sort of...

03:08:02,178 --> 03:08:07,166
SPEAKER_0:  I enjoy knowing, oh, if you go deeper, at some point you get to...

03:08:07,650 --> 03:08:12,030
SPEAKER_0:  NAND gates and half adders and shift registers and

03:08:13,250 --> 03:08:18,494
SPEAKER_0:  When it comes to the point of how do you actually make a chip out of silicon, I have no idea.

03:08:18,882 --> 03:08:20,126
SPEAKER_0:  That's just magic to me.

03:08:21,250 --> 03:08:26,814
SPEAKER_1:  but you enjoy knowing that you can walk a while towards the lower and lower layers, but you don't need to.

03:08:27,554 --> 03:08:29,822
SPEAKER_0:  It's nice. The other day as a sort of.

03:08:31,106 --> 03:08:34,270
SPEAKER_0:  A mental exercise I was trying to figure out if I could...

03:08:35,138 --> 03:08:36,318
SPEAKER_0:  build a-

03:08:38,914 --> 03:08:42,462
SPEAKER_0:  a flip-flop circuit out of relays.

03:08:43,394 --> 03:08:44,510
SPEAKER_0:  I was just sort of.

03:08:45,602 --> 03:08:51,774
SPEAKER_0:  trying to remember how does a relay work, yeah there's like this electromagnetic

03:08:52,514 --> 03:08:55,006
SPEAKER_0:  that pulls a switch open or shut.

03:08:56,290 --> 03:09:00,670
SPEAKER_0:  And you can have like, you can open one switch in another.

03:09:00,930 --> 03:09:02,270
SPEAKER_0:  shut another and

03:09:04,034 --> 03:09:15,070
SPEAKER_0:  You can have multiple contacts that go at once, and how many relays do I really need to sort of represent one bit of information? Can the relay just feed on itself? And it wasâ€¦

03:09:15,618 --> 03:09:19,582
SPEAKER_0:  I don't think I got to the final solution, but it was fun that I

03:09:21,314 --> 03:09:22,334
SPEAKER_0:  I could still.

03:09:22,786 --> 03:09:26,046
SPEAKER_0:  do a little bit of problem solving and thinking at that level.

03:09:26,946 --> 03:09:29,150
SPEAKER_1:  And it's cool how we build on top of each other.

03:09:29,570 --> 03:09:30,846
SPEAKER_1:  So there's people that are just...

03:09:31,522 --> 03:09:35,838
SPEAKER_1:  You stood on the shoulders of giants and there's others who stand on your shoulders and it's

03:09:36,226 --> 03:09:37,150
SPEAKER_1:  It's a giant.

03:09:37,474 --> 03:09:38,599
SPEAKER_1:  Beautiful higher. Yeah

03:09:38,599 --> 03:09:43,998
SPEAKER_0:  feel I sort of cover this middle layer of the technology stack where

03:09:44,706 --> 03:09:46,718
SPEAKER_0:  and sort of Peters out below the.

03:09:47,842 --> 03:09:50,078
SPEAKER_0:  the level of Nan Gates.

03:09:51,106 --> 03:09:56,094
SPEAKER_0:  And at the top, I lose track when it gets to machine learning.

03:09:56,898 --> 03:10:00,510
SPEAKER_1:  And then eventually the machine learning will build higher and higher layers.

03:10:00,834 --> 03:10:04,062
SPEAKER_1:  that will help us understand the lowest layer of the physics.

03:10:04,610 --> 03:10:05,982
SPEAKER_1:  and thereby the universe.

03:10:06,402 --> 03:10:07,454
SPEAKER_1:  figures out how.

03:10:08,354 --> 03:10:09,982
SPEAKER_1:  It itself works.

03:10:10,114 --> 03:10:11,806
SPEAKER_0:  Maybe, maybe not.

03:10:12,546 --> 03:10:15,422
SPEAKER_0:  Yeah, I did. I mean, it's possible. I mean...

03:10:16,034 --> 03:10:19,934
SPEAKER_0:  if you think of human consciousness if that's even the right concept.

03:10:21,954 --> 03:10:25,406
SPEAKER_0:  It's interesting that sort of we have this.

03:10:25,986 --> 03:10:28,734
SPEAKER_0:  Super parallel brain that does all these...

03:10:29,442 --> 03:10:32,734
SPEAKER_0:  incredible parallel operations like image recognition.

03:10:33,538 --> 03:10:34,878
SPEAKER_0:  I recognize your face.

03:10:35,874 --> 03:10:38,590
SPEAKER_0:  There's a huge amount of processing that goes on.

03:10:39,042 --> 03:10:42,654
SPEAKER_0:  In parallel, there's lots of nerves between my eyes and my brain.

03:10:43,554 --> 03:10:45,438
SPEAKER_0:  and the brain does a whole bunch of stuff.

03:10:45,730 --> 03:10:48,126
SPEAKER_0:  all at once because it's actually really slow.

03:10:48,450 --> 03:10:51,006
SPEAKER_0:  circuits but there are many of them that all work together.

03:10:52,578 --> 03:10:53,694
SPEAKER_0:  On the other hand...

03:10:53,922 --> 03:10:57,022
SPEAKER_0:  When I'm speaking, everything is completely sequential.

03:10:58,402 --> 03:11:02,878
SPEAKER_0:  I have to sort of string words together one at a time.

03:11:03,714 --> 03:11:08,990
SPEAKER_0:  and when I'm thinking about stuff, when I'm understanding the world.

03:11:10,018 --> 03:11:13,662
SPEAKER_0:  I'm also thinking of everything, like, one step at a time.

03:11:15,618 --> 03:11:19,710
SPEAKER_0:  And so we've sort of, we've got all this incredible.

03:11:20,930 --> 03:11:21,726
SPEAKER_0:  parallel

03:11:22,050 --> 03:11:26,142
SPEAKER_0:  circuitry in our brains and eventually we use that to simulate

03:11:26,786 --> 03:11:28,094
SPEAKER_0:  a single threaded.

03:11:28,770 --> 03:11:29,694
SPEAKER_0:  Much, much.

03:11:30,178 --> 03:11:32,702
SPEAKER_0:  higher level interpreter.

03:11:34,338 --> 03:11:37,630
SPEAKER_1:  It's exactly I mean, that's the illusion of it. That's the illusion

03:11:38,530 --> 03:11:41,182
SPEAKER_1:  of it for us that is a single sequential.

03:11:41,730 --> 03:11:44,958
SPEAKER_1:  set of thoughts and all of that came from a single cell.

03:11:45,346 --> 03:11:49,406
SPEAKER_1:  through the process of embryogenesis. So DNA is the code.

03:11:51,010 --> 03:11:52,894
SPEAKER_1:  DNA holds the entirety of the code.

03:11:53,282 --> 03:11:58,718
SPEAKER_1:  the information and how to use that information to build up an organism the entire like

03:12:00,002 --> 03:12:01,127
SPEAKER_1:  The arms, the legs.

03:12:01,127 --> 03:12:02,846
SPEAKER_0:  built. Yeah, the brain.

03:12:03,074 --> 03:12:05,310
SPEAKER_1:  So you don't buy a computer.

03:12:05,698 --> 03:12:06,823
SPEAKER_1:  You buy like a...

03:12:06,823 --> 03:12:09,918
SPEAKER_0:  You buy a seed, a diagram.

03:12:10,082 --> 03:12:11,582
SPEAKER_1:  and then you plant the computer.

03:12:11,970 --> 03:12:13,278
SPEAKER_1:  and it builds itself.

03:12:13,602 --> 03:12:14,942
SPEAKER_1:  in almost the same way.

03:12:15,554 --> 03:12:17,246
SPEAKER_1:  and then does the computation.

03:12:17,634 --> 03:12:18,142
SPEAKER_1:  And then.

03:12:18,626 --> 03:12:20,670
SPEAKER_1:  is eventually dies.

03:12:21,602 --> 03:12:25,086
SPEAKER_1:  It gets stale, but gives birth to young computers.

03:12:25,794 --> 03:12:30,270
SPEAKER_1:  more and more and gives them lessons, but they figure stuff out on their own and over time.

03:12:30,530 --> 03:12:31,646
SPEAKER_1:  It goes on that way.

03:12:32,066 --> 03:12:38,526
SPEAKER_1:  And those computers, when they go to college, tried to figure out how to program and they built their own little computers.

03:12:38,978 --> 03:12:41,598
SPEAKER_1:  they're increasingly more intelligent, increasingly...

03:12:41,890 --> 03:12:43,710
SPEAKER_1:  higher and higher levels of abstractions.

03:12:44,066 --> 03:12:52,894
SPEAKER_0:  Isn't it interesting that you sort of, you see the same thing appearing at different levels though, because you have like...

03:12:54,690 --> 03:12:56,350
SPEAKER_0:  cells that that

03:12:56,642 --> 03:12:58,014
SPEAKER_0:  create new cells.

03:12:59,330 --> 03:13:05,406
SPEAKER_0:  and eventually that builds a whole organism, but then the animal or the plant or the human

03:13:06,434 --> 03:13:07,582
SPEAKER_0:  has its own.

03:13:08,034 --> 03:13:10,110
SPEAKER_0:  mechanism of replication.

03:13:11,170 --> 03:13:12,318
SPEAKER_0:  That is.

03:13:12,898 --> 03:13:13,470
SPEAKER_0:  is sort of.

03:13:13,858 --> 03:13:20,350
SPEAKER_0:  connected in a very complicated way to the mechanism of replication of the cells. And then if you-

03:13:20,930 --> 03:13:25,150
SPEAKER_0:  If you look inside the cell, if you see how DNA and proteins are...

03:13:25,762 --> 03:13:30,718
SPEAKER_0:  are connected, then there is yet another completely different mechanism whereby

03:13:31,042 --> 03:13:33,470
SPEAKER_0:  Proteins are mass produced.

03:13:34,690 --> 03:13:37,918
SPEAKER_0:  using enzymes and a little bit of...

03:13:38,338 --> 03:13:40,990
SPEAKER_0:  code from DNA and of course viruses.

03:13:41,506 --> 03:13:43,294
SPEAKER_0:  break into it at that level.

03:13:44,194 --> 03:13:44,702
SPEAKER_1:  and

03:13:45,058 --> 03:13:50,206
SPEAKER_1:  While the mechanisms might be different, it seems like the nature of the mechanism.

03:13:50,562 --> 03:13:51,358
SPEAKER_1:  is the same.

03:13:52,130 --> 03:13:52,990
SPEAKER_1:  cares across.

03:13:53,634 --> 03:13:55,262
SPEAKER_1:  natural languages and

03:13:55,490 --> 03:13:56,894
SPEAKER_1:  programming languages.

03:13:57,538 --> 03:13:58,462
SPEAKER_1:  humans.

03:13:59,266 --> 03:14:02,910
SPEAKER_1:  maybe even human civilizations or intelligent civilizations.

03:14:03,586 --> 03:14:05,342
SPEAKER_1:  and then all the way down to...

03:14:05,634 --> 03:14:07,509
SPEAKER_1:  uh... single cell organ

03:14:07,509 --> 03:14:11,518
SPEAKER_0:  It is fascinating to see what abstraction levels.

03:14:12,194 --> 03:14:15,038
SPEAKER_0:  are built on top of individual humans.

03:14:15,842 --> 03:14:18,526
SPEAKER_0:  and how you have like whole societies.

03:14:20,322 --> 03:14:21,054
SPEAKER_0:  That's sort of.

03:14:21,890 --> 03:14:24,318
SPEAKER_0:  have a similar self-preservation.

03:14:25,442 --> 03:14:29,278
SPEAKER_0:  I don't know what it is, instinct, nature, abstraction.

03:14:30,146 --> 03:14:33,521
SPEAKER_0:  as the individuals have and the cells have.

03:14:33,521 --> 03:14:36,542
SPEAKER_1:  and they self replicate and breed in different ways.

03:14:37,154 --> 03:14:42,334
SPEAKER_1:  It's hard for us humans to introspect it because we were very focused on our particular layer of abstraction.

03:14:42,946 --> 03:14:43,294
SPEAKER_1:  but.

03:14:43,746 --> 03:14:46,206
SPEAKER_1:  from an alien perspective looking on Earth, they'll...

03:14:46,466 --> 03:14:47,838
SPEAKER_1:  they'll probably see.

03:14:48,578 --> 03:14:50,078
SPEAKER_1:  the higher level organism.

03:14:50,306 --> 03:14:51,614
SPEAKER_1:  of human civilization.

03:14:52,738 --> 03:14:58,974
SPEAKER_1:  as part of this bigger organism of life on Earth itself. In fact, that could be an organism just alone, just life, life.

03:14:59,490 --> 03:15:00,254
SPEAKER_1:  Life on Earth.

03:15:01,026 --> 03:15:02,270
SPEAKER_1:  This is...

03:15:02,498 --> 03:15:03,710
SPEAKER_1:  been a wild

03:15:04,034 --> 03:15:06,910
SPEAKER_1:  both philosophical and technical conversation. thanks for watching

03:15:07,202 --> 03:15:08,862
SPEAKER_1:  You're an amazing human being, you're-

03:15:09,410 --> 03:15:15,262
SPEAKER_1:  You were gracious enough to talk to me when I was first doing this podcast. You were one of the earliest first people.

03:15:15,746 --> 03:15:23,006
SPEAKER_1:  I've talked to somebody I admired for a long time. It's just a huge honor that you did it at that time and you do it again. You're awesome. Thank you, Lex.

03:15:23,970 --> 03:15:27,038
SPEAKER_1:  Thanks for listening to this conversation with Guido Benrassam.

03:15:27,490 --> 03:15:30,878
SPEAKER_1:  To support this podcast, please check out our sponsors in the description.

03:15:31,266 --> 03:15:31,742
SPEAKER_1:  And now.

03:15:32,098 --> 03:15:34,302
SPEAKER_1:  Let me leave you with some words from Oscar Wilde.

03:15:34,786 --> 03:15:38,366
SPEAKER_1:  Experience is the name that everyone gives to their mistakes.

03:15:39,106 --> 03:15:40,862
SPEAKER_1:  Thank you for listening and hope to see you.

03:15:41,282 --> 03:15:41,726
SPEAKER_1:  next time.
